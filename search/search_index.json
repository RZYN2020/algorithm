{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u524d\u8a00","text":"<p>\u5f53\u4eca\u4e92\u8054\u7f51\u65f6\u4ee3\uff0c\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5df2\u7ecf\u6210\u4e3a\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u4e2d\u7684\u6838\u5fc3\u77e5\u8bc6\u3002\u65e0\u8bba\u662f\u5728\u5de5\u4e1a\u754c\u8fd8\u662f\u5b66\u672f\u754c\uff0c\u90fd\u9700\u8981\u6df1\u5165\u7406\u89e3\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u57fa\u672c\u539f\u7406\u548c\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u8ba1\u7b97\u548c\u4f18\u5316\u7684\u7cfb\u7edf\u8bbe\u8ba1\u3002</p> <p>\u4f5c\u4e3a\u4e00\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u5b66\u4e60\u8005\u6216\u4ece\u4e1a\u8005\uff0c\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5b66\u4e60\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u5237\u9898\u662f\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u901a\u8fc7\u5237\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u638c\u63e1\u5404\u79cd\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u65b9\u5f0f\u3001\u4f18\u7f3a\u70b9\u3001\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u7b49\u91cd\u8981\u6982\u5ff5\u3002</p> <p>\u672c\u535a\u5ba2\u65e8\u5728\u8bb0\u5f55\u6211\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e2d\u7684\u4e00\u4e9b\u5fc3\u5f97\u4f53\u4f1a\u548c\u5237\u9898\u7ecf\u9a8c\uff0c\u4ee5\u53ca\u6211\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u3002\u6211\u5c06\u5206\u4eab\u4e00\u4e9b\u7ecf\u5178\u95ee\u9898\u7684\u89e3\u6cd5\u548c\u4f18\u5316\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5b9e\u7528\u7684\u6280\u5de7\u548c\u5de5\u5177\uff0c\u5e0c\u671b\u80fd\u591f\u5bf9\u6b63\u5728\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u540c\u5b66\u4eec\u6709\u6240\u5e2e\u52a9\u3002</p> <p>By ChatGPT</p>"},{"location":"gugu-interview/","title":"Gugu interview","text":"<p>2025.7.1</p> <p>\u4e09\u6708\u521d\u627e\u5230\u5b9e\u4e60\uff0c\u56db\u4e94\u6708\u4efd\u653e\u677e\uff0c\u516d\u6708\u4e0b\u65ec\u53bb\u5b9e\u4e60\u3002\u5b9e\u4e60\u4e00\u5468\u591a\uff0c\u5ffd\u7136\u610f\u8bc6\u5230\u53c8\u8be5\u5237\u7b97\u6cd5\u9898\u4e86\u2014\u2014\u79cb\u62db\u8fd1\u5728\u773c\u524d\u4e86\u3002</p> <p>\u5b9e\u4e60\u516c\u53f8\u867d\u8bf4\u8fd8\u4e0d\u9519\uff0c\u798f\u5229\u5f85\u9047\u4e5f\u5f88\u597d\uff0c\u4f46\u662f\u5c97\u4f4d\u8fd8\u662f\u6709\u70b9\u5c0f\u4f17\u4e86\u2014\u2014\u97f3\u89c6\u9891\u5ba2\u6237\u7aef\u3002\u8fd9\u6837\u4e0b\u53bb\u4e0d\u597d\u8df3\u69fd\u4e5f\u4e0d\u597d\u6da6\u554a\u3002</p> <p>\u4e0a\u7f51\u4e00\u770b\uff0c\u5927\u90e8\u5206\u516c\u53f8\u62db\u8058\u7684 Software Engineer \u8fd8\u662f\u540e\u7aef\u77e5\u8bc6\u4e3a\u4e3b\u3002\u51b5\u4e14\u4efb\u4f55\u516c\u53f8\u4e1a\u52a1\u7684\u6838\u5fc3\u4e5f\u90fd\u662f\u540e\u7aef\uff0c\u6240\u4ee5\u79cb\u62db\u8fd8\u662f\u6da6\u53bb\u540e\u53f0\u5f00\u53d1\u4e86\u3002</p> <p>\u4e8e\u662f\u5f00\u4e86leetcode\u4f1a\u5458\uff0c\u770b\u5230\u4e86\u8fd9\u672c\u5c0f\u518c\u5b50\u2014\u2014\u4e0d\u9519\uff0c\u6709\u610f\u601d\uff01\u5237\u9898\u540c\u65f6\u8fd8\u80fd\u4e86\u89e3\u56fd\u5916\u4f01\u4e1a\u7684\u62db\u8058\u6d41\u7a0b\uff01\u90a3\u5c31\u5f00\u59cb\u5427~</p> <p>\u5176\u4ed6\u6709\u610f\u601d\u7684\u5c0f\u518c\u5b50\uff1a</p> <ol> <li>\u540e\u7aef</li> <li>https://leetcode.cn/leetbook/detail/7-day-interview-hou-duan/</li> <li>https://leetcode.cn/leetbook/detail/da-han-hou-duan-gang-ti-mu-he-ji-shang/</li> <li>https://leetcode.cn/leetbook/detail/2024-hou-duan-mian-shi-gong-lue/</li> <li>\u7b97\u6cd5</li> <li>https://leetcode.cn/leetbook/detail/arithmetic-interview-cheat-sheet/</li> <li>\u6570\u636e\u5e93</li> <li>https://leetcode.cn/leetbook/detail/database-handbook/</li> <li>\u5e76\u53d1</li> <li>https://leetcode.cn/leetbook/detail/concurrency/</li> <li>\u6781\u5ba2\u65f6\u95f4</li> <li>https://uaxe.github.io/geektime-docs/%E5%90%8E%E7%AB%AF-%E6%9E%B6%E6%9E%84/</li> </ol>"},{"location":"gugu-interview/#_1","title":"\u7f16\u7801\u95ee\u9898","text":"<p>\u8c37\u6b4c\uff08Google\uff09\u6280\u672f\u9762\u8bd5\u975e\u5e38\u56f0\u96be\u800c\u4e14\u5bcc\u6709\u6311\u6218\u6027\u3002\u60f3\u8981\u83b7\u5f97\u7535\u8bdd\u9762\u8bd5\uff0c\u4f60\u9700\u8981\u5c06\u7b80\u5386\u63d0\u4ea4\u5230\u4ed6\u4eec\u7684 \u5728\u7ebf\u7533\u8bf7 \u7cfb\u7edf\u6216\u8005\u901a\u8fc7\u5185\u90e8\u5458\u5de5\u8fdb\u884c\u63a8\u8350\u3002</p> <p>\u9762\u8bd5\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65\uff0c\u4f60\u53ef\u80fd\u4f1a\u6536\u5230\u4e00\u4e2a\u5728\u7ebf\u8bc4\u4f30\u94fe\u63a5\u3002 \u8bc4\u4f30\u6709\u6548\u671f\u4e3a 7 \u5929\uff0c\u5305\u542b\u4e24\u4e2a\u7f16\u7801\u95ee\u9898\uff0c\u9700\u8981\u5728\u4e00\u5c0f\u65f6\u5185\u5b8c\u6210\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f9b\u4f60\u7ec3\u4e60\u7684\u5728\u7ebf\u8bc4\u4f30\u95ee\u9898\u3002</p>"},{"location":"gugu-interview/#686","title":"686. \u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>a</code> \u548c <code>b</code>\uff0c\u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32 <code>a</code> \u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32 <code>b</code> \u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32 <code>a</code> \u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de <code>-1</code>\u3002</p> <p>\u6ce8\u610f\uff1a\u5b57\u7b26\u4e32 <code>\"abc\"</code> \u91cd\u590d\u53e0\u52a0 0 \u6b21\u662f <code>\"\"</code>\uff0c\u91cd\u590d\u53e0\u52a0 1 \u6b21\u662f <code>\"abc\"</code>\uff0c\u91cd\u590d\u53e0\u52a0 2 \u6b21\u662f <code>\"abcabc\"</code>\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = \"abcd\", b = \"cdabcdab\"\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1aa \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a \"abcdabcdabcd\", \u6b64\u65f6 b \u662f\u5176\u5b50\u4e32\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = \"a\", b = \"aa\"\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = \"a\", b = \"a\"\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = \"abc\", b = \"wxyz\"\n\u8f93\u51fa\uff1a-1\n</code></pre> <p>\u597d\u4e45\u6ca1\u505a\u9898\uff0c\u770b\u8499\u4e86\u3002\u601d\u8def\u611f\u89c9\u662f\u4e0d\u65ad\u4eceb\u4e2d\u51cf\u53bba\uff0c\u4f46\u5177\u4f53\u7ec6\u8282\u5c31\u6709\u70b9\u96be\u4ee5\u60f3\u5230\u4e86\u3002</p> <p>\u770b\u9519\u9898\u76ee\u4e86\uff0c\u539f\u6765\u91cd\u53e0\u5c31\u662f\u4e0d\u65adappend</p> <p>\u4e00\u770b\u9898\u89e3\uff0cKMP\u7b97\u6cd5\uff0c\u5931\u656c\u5931\u656c\uff01</p> <p>https://leetcode.cn/problems/repeated-string-match/solutions/1170729/gong-shui-san-xie-yi-ti-san-jie-qia-chan-3hbr/</p> <p>https://zq99299.github.io/dsalg-tutorial/dsalg-java-hsp/14/04.html#kmp-%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90</p> <p>https://oi-wiki.org/string/kmp/</p> <p>kmp\u7b97\u6cd5\u5faa\u73af\u5339\u914d\u5373\u53ef\u3002</p>"},{"location":"gugu-interview/#_2","title":"\u9762\u8bd5","text":"<ol> <li>\u7535\u8bdd\u9762\u8bd5</li> <li>\u73b0\u573a\u9762\u8bd5</li> <li>\u62db\u8058\u59d4\u5458\u4f1a</li> <li>\u5f55\u7528\u5ba1\u6838</li> </ol> <p>\u5047\u8bbe\u4f60\u901a\u8fc7\u4e86\u7b80\u5386\u5ba1\u9605\uff0c\u62db\u8058\u4eba\u5458\u4f1a\u8054\u7cfb\u4f60\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u4f1a\u6709\u4e24\u6b21\u7535\u8bdd\u9762\u8bd5\uff0c\u5982\u679c\u8868\u73b0\u4f18\u79c0\uff0c\u4f60\u5c06\u4f1a\u83b7\u9080\u53c2\u4e0e\u73b0\u573a\u9762\u8bd5.</p> <p>\u7535\u8bdd\u9762\u8bd5\u901a\u5e38\u4f1a\u6301\u7eed 30 \u81f3 60 \u5206\u949f\u3002</p> <p>\u7535\u8bdd\u9762\u8bd5\u7684\u5185\u5bb9\u6db5\u76d6\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u3002\u51c6\u5907\u597d\u7528\u4f60\u6700\u64c5\u957f\u7684\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199 20 \u81f3 30 \u884c\u4ee3\u7801\u3002\u4ee3\u7801\u5e94\u8be5\u4fdd\u6301\u6574\u6d01\u3001\u5065\u58ee\u3001\u5bcc\u6709\u8868\u73b0\u529b\u3002</p> <p>\u9762\u8bd5\u5b98\u4f1a\u8be2\u95ee\u4e00\u4e24\u4e2a\u6709\u8bb8\u591a\u540e\u7eed\u7684\u7f16\u7801\u95ee\u9898\u3002\u4f60\u9700\u8981\u5728\u4e0e\u9762\u8bd5\u5b98\u5171\u4eab\u7684 Google Doc \u4e2d\u7f16\u5199\u4ee3\u7801\uff0c\u5e76\u9610\u660e\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002 \u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u7528\u8033\u673a\u6216\u626c\u58f0\u5668\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u81ea\u7531\u8f93\u5165\u4efb\u4f55\u5185\u5bb9\u3002</p> <p>\u4f60\u5c06\u4f1a\u9762\u5bf9\u4e00\u4e2a\u5f00\u653e\u5f0f\u95ee\u9898\uff0c\u9762\u8bd5\u5b98\u4f1a\u63d0\u51fa\u4e00\u4e9b\u8f85\u52a9\u6027\u95ee\u9898\u6765\u6f84\u6e05\uff0c\u5e76\u5236\u5b9a\u8981\u6c42\u3002 \u4f60\u9700\u8981\u4f7f\u7528\u7b97\u6cd5\u89e3\u91ca\u8be5\u95ee\u9898\u3002 \u5c06\u7b97\u6cd5\u8f6c\u5316\u4e3a\u53ef\u884c\u7684\u4ee3\u7801\u3002 \uff08\u63d0\u793a\uff1a\u4e0d\u8981\u56e0\u4e3a\u65f6\u95f4\u6709\u9650\u800c\u62c5\u5fc3\u65e0\u6cd5\u5c3d\u5584\u5c3d\u7f8e\u3002\u5c06\u5b83\u5199\u4e0b\u6765\uff0c\u7136\u540e\u9010\u6b65\u6539\u8fdb\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u8981\u786e\u4fdd\u8003\u8651\u5230\u7279\u6b8a\u60c5\u51b5\u548c\u4e34\u754c\u6761\u4ef6\uff0c\u5e76\u4e3a\u6295\u5165\u751f\u4ea7\u505a\u597d\u51c6\u5907\u3002\uff09 \u4f18\u5316\u4ee3\u7801\uff0c\u9075\u5faa\u6d4b\u8bd5\u7528\u4f8b\u5e76\u627e\u51fa\u9519\u8bef\u3002</p> <p>\u5c31\u662f\u8fd9\u6837\uff01\u901a\u8fc7\u7535\u8bdd\u9762\u8bd5\uff0c\u73b0\u5728\u4f60\u5df2\u7ecf\u6536\u5230\u4e86\u73b0\u573a\u9762\u8bd5\u7684\u9080\u8bf7\u3002\u73b0\u573a\u9762\u8bd5\u662f Google \u9762\u8bd5\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u73af\u8282\uff0c\u4f60\u83b7\u5f97\u5f55\u7528\u7684\u80fd\u529b\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4f60\u5728\u73b0\u573a\u9762\u8bd5\u65f6\u7684\u8868\u73b0\u3002\u6839\u636e\u4ee5\u5f80\u7684\u7ecf\u9a8c\uff0c\u5728\u73b0\u573a\u9762\u8bd5\u540e\u6536\u5230\u5f55\u7528\u901a\u77e5\u7684\u5019\u9009\u4eba\u6bd4\u4f8b\u5927\u81f4\u4e3a 1/5 \u5230 1/7\u3002</p> <p>\u4f60\u901a\u5e38\u4f1a\u4e0e\u4e94\u4f4d Google \u5458\u5de5\u4f1a\u9762\uff0c\u6bcf\u6b21\u7ea6 30 \u81f3 45 \u5206\u949f \uff0c\u5176\u4e2d\u4e00\u4f4d\u4e3a\u5348\u9910\u9762\u8bd5\u5b98\uff0c\u4ed6\u4e0d\u4f1a\u63d0\u4ea4\u9762\u8bd5\u53cd\u9988\uff0c\u6240\u4ee5\u5927\u53ef\u501f\u6b64\u673a\u4f1a\u81ea\u7531\u63d0\u95ee\u3002</p> <p>\u6240\u6709\u5019\u9009\u4eba\u90fd\u5c06\u6709\u673a\u4f1a\u7a81\u51fa\u5176\u5728\u56db\u4e2a\u4e0d\u540c\u9886\u57df\u4e0a\u7684\u4f18\u52bf\uff1a</p> <p>\u4e00\u822c\u8ba4\u77e5\u80fd\u529b\uff1a\u901a\u8fc7\u5f00\u653e\u5f0f\u95ee\u9898\u53ef\u4ee5\u4e86\u89e3\u4f60\u5904\u7406\u548c\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u95ee\u9898\u5f80\u5f80\u6ca1\u6709\u6807\u51c6\u7684\u6b63\u786e\u7b54\u6848\uff0c\u8fd9\u610f\u5473\u7740 Google \u770b\u4e2d\u7684\u662f\u4f60\u89e3\u91ca\u601d\u8003\u8fc7\u7a0b\u7684\u80fd\u529b\u4ee5\u53ca\u4f60\u5982\u4f55\u5229\u7528\u6570\u636e\u6765\u505a\u51fa\u660e\u667a\u51b3\u7b56\u3002 \u9886\u5bfc\u529b\uff1a\u51c6\u5907\u597d\u8bb2\u8ff0\u4f60\u662f\u5982\u4f55\u8fd0\u7528\u6c9f\u901a\u548c\u51b3\u7b56\u6280\u5de7\u6765\u8c03\u52a8\u4ed6\u4eba\u7684\u79ef\u6781\u6027\u3002\u8fd9\u4e9b\u7ecf\u5386\u53ef\u4ee5\u662f\u5982\u4f55\u5728\u5de5\u4f5c\u6216\u7ec4\u7ec7\u4e2d\u62c5\u4efb\u9886\u5bfc\u89d2\u8272\uff0c\u4e5f\u53ef\u4ee5\u662f\u5982\u4f55\u5e2e\u52a9\u56e2\u961f\u53d6\u5f97\u6210\u529f\uff08\u5373\u4fbf\u662f\u4ee5\u975e\u6b63\u5f0f\u9886\u5bfc\u8005\u7684\u8eab\u4efd\uff09\u3002 \u4e0e\u89d2\u8272\u76f8\u5173\u7684\u77e5\u8bc6\uff1aGoogle \u611f\u5174\u8da3\u7684\u662f\u5982\u4f55\u7ed3\u5408\u4f60\u7684\u4e2a\u4eba\u4f18\u52bf\u4e0e\u7ecf\u9a8c\u6765\u63a8\u52a8\u79ef\u6781\u7684\u5f71\u54cd\u3002\u4e0d\u4ec5\u4ec5\u662f\u4f60\u76ee\u524d\u5982\u4f55\u505a\u51fa\u8d21\u732e\uff0c\u8fd8\u5305\u62ec\u5982\u4f55\u6210\u957f\u4e3a\u4e0d\u540c\u7684\u89d2\u8272\uff0c\u54ea\u6015\u662f\u5f53\u4e0b\u5c1a\u672a\u521b\u9020\u7684\u89d2\u8272\u3002 Google \u7cbe\u795e\uff1a\u5206\u4eab\u4f60\u4e2a\u4eba\u72ec\u7acb\u4ee5\u53ca\u56e2\u961f\u534f\u4f5c\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5982\u4f55\u5e2e\u52a9\u4ed6\u4eba\uff0c\u5982\u4f55\u5728\u8ff7\u832b\u4e2d\u627e\u5230\u65b9\u5411\uff0c\u4ee5\u53ca\u5982\u4f55\u63a8\u52a8\u81ea\u5df1\u8d70\u51fa\u8212\u9002\u533a\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u65e0\u8bba\u4f60\u7684\u5de5\u4f5c\u7ecf\u9a8c\u5982\u4f55\uff0cGoogle \u90fd\u975e\u5e38\u91cd\u89c6\u4f60\u7684\u5206\u6790\u80fd\u529b\u3002\u8bf7\u51c6\u5907\u597d\u5c55\u793a\u4f60\u5728\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u65b9\u9762\u7684\u624e\u5b9e\u529f\u5e95\u3002\u5982\u679c\u4f60\u7684\u4f18\u52bf\u4f53\u73b0\u5728\u591a\u5e74\u7684\u4ece\u4e1a\u7ecf\u9a8c\uff0c\u4f46\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u57fa\u7840\u77e5\u8bc6\u611f\u5230\u751f\u758f\uff0c\u90a3\u4e48\u5c31\u4e0d\u5f97\u4e0d\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u78e8\u7ec3\u57fa\u672c\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u57fa\u7840\u6280\u80fd\u3002\u5426\u5219\uff0c\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u53cd\u8f6c\u4e8c\u53c9\u6811\u800c\u50cf Max Howell\uff08Homebrew \u4f5c\u8005\uff09\u4e00\u6837\u88ab\u62d2\u7edd\u3002</p> <p>Google \u5e0c\u671b\u4e86\u89e3\u4f60\u7684\u7f16\u7801\u6280\u80fd\u548c\u4e13\u4e1a\u6280\u672f\u77e5\u8bc6\uff0c\u5305\u62ec\u5de5\u5177\u3001\u7f16\u7a0b\u8bed\u8a00\uff0c\u4ee5\u53ca\u5173\u4e8e\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7b49\u4e3b\u9898\u7684\u4e00\u822c\u77e5\u8bc6\u3002\u8ba8\u8bba\u8fc7\u7a0b\u4e2d\u901a\u5e38\u4f1a\u53cd\u590d\u63d0\u5230\u76f8\u5173\u7684\u8bdd\u9898\uff0c\u5c31\u50cf\u5728\u5de5\u4f5c\u4e2d\u7684\u8ba8\u8bba\u90a3\u6837\uff0c\u4ece\u800c\u63a8\u52a8\u5f7c\u6b64\u601d\u8003\u5e76\u5b66\u4e60\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u8bf7\u51c6\u5907\u597d\u6df1\u5165\u63a2\u8ba8\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6253\u7834\u81ea\u5df1\u7684\u6781\u9650\uff0c\u627e\u51fa\u6700\u4f73\u7b54\u6848 \u2014\u2014 \u8fd9\u53ef\u80fd\u5c31\u662f\u4f60\u5c06\u6765\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002</p> <p>Google \u7684\u73b0\u573a\u6280\u672f\u9762\u8bd5\u5386\u6765\u5728\u767d\u677f\u4e0a\u8fdb\u884c\uff0c\u4f46\u4e3a\u4e86\u63d0\u4f9b\u66f4\u52a0\u771f\u5b9e\u7684\u7f16\u7801\u4f53\u9a8c\u5e76\u51cf\u5c11\u8017\u65f6\uff0cGoogle \u5df2\u7ecf\u5f00\u59cb\u63d0\u4f9b\u7b14\u8bb0\u672c\u7528\u4e8e\u5728\u67d0\u4e9b\u7f51\u7ad9\u4e0a\u8fdb\u884c\u7f16\u7801\u9762\u8bd5\u3002\u8fd9\u4e9b chromebook \u4e0a\u4f1a\u6709\u4e00\u4e2a\u9762\u8bd5\u7a0b\u5e8f\uff0c\u5e76\u5141\u8bb8\u4f60\u9009\u62e9\u4f60\u6240\u559c\u7231\u7684\u7f16\u7a0b\u8bed\u8a00\u3002</p> <p>\u5728\u6574\u4e2a\u9762\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u968f\u65f6\u5411\u9762\u8bd5\u5b98\u8be2\u95ee\uff0c\u4ee5\u786e\u4fdd\u4f60\u5b8c\u5168\u7406\u89e3\u4ed6\u4eec\u7684\u95ee\u9898\u3002</p> <p>\u5728\u73b0\u573a\u9762\u8bd5\u4e4b\u540e\uff0c\u6bcf\u4e2a\u9762\u8bd5\u5b98\uff08\u5348\u9910\u9762\u8bd5\u5b98\u9664\u5916\uff09\u90fd\u5fc5\u987b\u63d0\u4ea4\u8be6\u7ec6\u7684\u9762\u8bd5\u53cd\u9988\u3002 \u6bcf\u4e2a\u9762\u8bd5\u5b98\u7684\u53cd\u9988\u90fd\u5bf9\u5176\u4ed6\u9762\u8bd5\u5b98\u4fdd\u5bc6\uff0c\u4ee5\u786e\u4fdd\u81ea\u5df1\u7684\u53cd\u9988\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u4eba\u3002 \u6bcf\u4e2a\u9762\u8bd5\u5b98\u90fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8bc4\u5206\uff0c\u5e76\u505a\u51fa\u8058\u7528 / \u4e0d\u8058\u7528\u7684\u51b3\u5b9a\u3002</p> <p>\u5047\u8bbe\u53cd\u9988\u5f97\u5206\u8db3\u591f\u597d\uff0c\u90a3\u4e48\u4f60\u7684\u6574\u4e2a\u4fe1\u606f\u5305\u5c06\u88ab\u63d0\u4ea4\u5230\u62db\u8058\u59d4\u5458\u4f1a\u8fdb\u884c\u5ba1\u67e5\u3002</p> <p>\u62db\u8058\u59d4\u5458\u4f1a\u5c06\u5f7b\u5e95\u5ba1\u67e5\u6240\u6709\u63d0\u4ea4\u7684\u53cd\u9988\u610f\u89c1\uff0c\u5e76\u4f5c\u51fa\u8058\u7528 / \u4e0d\u8058\u7528\u7684\u5efa\u8bae\u3002</p> <p>\u5982\u679c\u62db\u8058\u59d4\u5458\u4f1a\u5efa\u8bae\u8058\u7528\uff0c\u90a3\u4e48\uff0c\u606d\u559c\uff01\u4f60\u5df2\u7ecf\u5230\u8fbe\u8fd9\u4e00\u6d41\u7a0b\u7684\u6700\u540e\u9636\u6bb5\u3002\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c10-12% \u7684\u5019\u9009\u4eba\u672a\u80fd\u5f97\u5230\u5f55\u7528\u3002\u62db\u8058\u4eba\u5458\u4f1a\u8bf7\u6c42\u5916\u90e8\u53c2\u8003\u8d44\u6599\u548c\u85aa\u916c\u5386\u53f2\u8bb0\u5f55\uff0c\u8fdb\u884c\u6750\u6599\u68c0\u67e5\uff0c\u5e76\u4e3a\u201c\u5f85\u9047\u5ba1\u6838\u201d\u6d41\u7a0b\u51c6\u5907\u4fe1\u606f\u5305\u3002</p> <p>\u5f55\u7528\u5ba1\u6838\u6d41\u7a0b\uff1a</p> <p>\u9884\u5ba1\u59d4\u5458\u4f1a \u85aa\u8d44\u59d4\u5458\u4f1a\u8bc4\u4f30 \u9ad8\u7ba1\u5ba1\u6838</p> <p>\u5728\u6700\u540e\u7684\u9ad8\u7ba1\u5ba1\u6838\u4e2d\uff0c\u5f55\u7528\u88ab\u5426\u51b3\u7684\u53ef\u80fd\u6027\u975e\u5e38\u5c0f\u3002</p>"},{"location":"haskell-learning/","title":"Haskell learning","text":"<p>2023.10.5</p> <p>\u5728\u4e86\u89e3\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8bed\u8a00\u5b66\u4e60\u7684\u6700\u4f73\u65b9\u6cd5\u8fd8\u662f\u5237\u9898\u3002\u5237\u9898\u5e76\u5bf9\u6bd4\u81ea\u5df1\u548c\u4ed6\u4eba\u7684\u89e3\u7b54\u80fd\u6559\u7ed9\u4f60\u4e00\u4e9b\u5728\u4ee3\u7801\u7f16\u5199\u7684 \"best practice\" \uff0c\u89c1\u591a\u4e86\u8fd9\u4e9b \"best practice\" \u65b9\u624d\u66f4\u6709\u4fe1\u5fc3\u53bb\u505a\u9879\u76ee/\u8bfb\u9879\u76ee\u4ee3\u7801\u3002</p> <p>\u6700\u8fd1\u5728\u5b66\u4e60 Haskell\uff0c\u5c31\u5728 codewars \u4e0a\u627e\u4e00\u4e9b\u9898\u76ee\u5b66\u4e60\u4e00\u4e0b\u3002</p>"},{"location":"haskell-learning/#highest-and-lowest","title":"Highest and Lowest","text":"<p>https://www.codewars.com/kata/554b4ac871d6813a03000035/haskell</p> <p>\u614c\u5fd9 google \u5404\u79cd\u5e38\u7528\u51fd\u6570\u540e\u5f97\u5230\u5982\u4e0b\u7b54\u6848\uff08\u5176\u4e2d\u6700\u5927\u7684\u95ee\u9898\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u7ed9 expr \u7c7b\u578b\u6807\u6ce8\uff0c\u6240\u4ee5\u628a read \u5c01\u88c5\u6210\u4e86 stringToInt\uff09\uff1a</p> <pre><code>stringToInt :: String -&gt; Int\nstringToInt = read\n\nhighAndLow :: String -&gt; String\nhighAndLow input =\n  let strs = words input in\n   let nums = map stringToInt strs in\n        show (maximum nums) ++ \" \" ++ show (minimum nums)\n</code></pre> <p>\u66f4\u597d\u7684\u89e3\u7b541\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow xs = show (maximum ns) ++ \" \" ++ show (minimum ns)\n  where ns = (map read $ words xs) :: [Int]\n</code></pre> <ol> <li> <p>where \u548c let \u4f3c\u4e4e\u5dee\u4e0d\u591a... \u4f46\u82e5\u662f \u9884\u5907\u5de5\u4f5c\u592a\u591a \u8fd8\u662f\u653e\u5728 where \u91cc\u66f4\u597d\u4e00\u4e9b\uff0c\u56e0\u4e3a where \u7f6e\u540e\u80fd\u66f4\u597d\u51f8\u663e\u4ee3\u7801\u4e3b\u4f53...</p> </li> <li> <p>\u5bf9 expr \u7684\u7c7b\u578b\u6807\u6ce8\u7528 <code>::</code> \u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5 \u4e0a\u9762\u7684 <code>stringToInt</code> \u53ef\u4ee5\u66ff\u6362\u4e3a <code>(read :: String -&gt; Int)</code></p> </li> </ol> <p>\u66f4\u597d\u7684\u89e3\u7b542\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . sequence [maximum,minimum] . map (read ::String-&gt;Int) . words\n</code></pre> <p>\u4e00\u884c\u6d41...</p> <p>unwords: words \u7684 inverse</p> <p>sequence: Evaluate each monadic action in the structure from left to right, and collect the results. The <code>Traversable</code> class \u7684\u51fd\u6570; class (Functor t, Foldable t) =&gt; Traversable t</p> <ul> <li>https://blog.jakuba.net/2014-07-30-foldable-and-traversable/</li> <li>https://downloads.haskell.org/~ghc/5.04.1/docs/html/base/index.html</li> <li>https://wiki.haskell.org/Foldable_and_Traversable</li> <li>!!! Monad ((-&gt;) r) https://hackage.haskell.org/package/base-4.14.1.0/docs/src/GHC.Base.html#line-979\uff0c \u8fd9\u4e2a Monad \u53ef\u4ee5\u7406\u89e3\u4e3a Map?</li> <li>\u55ef...\u603b\u4e4b\u8fd8\u662f\u975e\u5e38\u62bd\u8c61...</li> </ul> <p>\u89e3\u7b543:</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . f . map read . words\n    where f :: [Integer] -&gt; [Integer]\n          f xs = [maximum xs, minimum xs]\n</code></pre> <p>\u4e0a\u9762\u89e3\u7b54\u4e2d\u70e7\u8111\u7684 <code>sequence [maximum,minimum]</code> \u6362\u6210 <code>f</code></p> <p>\u89e3\u7b544\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow input = \n  let ns = map read $ words input :: [Int]\n      mx = maximum ns\n      mn = minimum ns\n  in\n    unwords $ map show [mx,mn]\n</code></pre> <p>\u5f88\u89c4\u6574\u7684\u4e00\u4e2a\u89e3\u7b54</p> <p>\u89e3\u7b545\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . highAndLow' . map read . words\n\nhighAndLow' :: [Int] -&gt; [Int]\nhighAndLow' (n1:ns) = foldl (\\[mx, mn] n -&gt; [max mx n, min mn n]) [n1, n1] ns\n</code></pre> <p>\u7a0d\u5fae\u5feb\u70b9\uff0c\u4f46\u5c31\u6ca1\u90a3\u4e48\u597d\u770b\u4e86</p>"},{"location":"haskell-learning/#multiply","title":"Multiply","text":"<p>https://www.codewars.com/kata/50654ddff44f800200000004/haskell</p> <pre><code>multiply :: Int -&gt; Int -&gt; Int\nmultiply a b = a * b\n</code></pre> <p>\u4f46\u611f\u89c9\u5e94\u8be5\u4e0d\u662f\u8003\u70b9...</p> <p>\u8003\u70b9\u5e94\u8be5\u662f\u5982\u4e0b\u89e3\u7b54\u4e2d\u6d89\u53ca\u7684\uff1a</p> <pre><code>multiply :: Int -&gt; Int -&gt; Int\nmultiply a b = fromJust $ do\n  return $ a * b\n</code></pre>"},{"location":"haskell-learning/#tribonacci-sequence","title":"Tribonacci Sequence","text":"<p>https://www.codewars.com/kata/556deca17c58da83c00002db/haskell</p> <pre><code>tribonacci :: (Num a) =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n =\n  take n $\n    map (\\(x, _, _) -&gt; x) ns\n  where\n    ns = iterate (\\(x, y, z) -&gt; (y, z, x + y + z)) (a, b, c)\n</code></pre> <p>emm...\u8fd8\u662f\u5f88\u9ebb\u70e6\u7684\u89e3\u7b54</p> <p>\u89e3\u7b541\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci _ n | n &lt; 1 = []\ntribonacci (a, b, c) n = a : tribonacci (b, c, a+b+c) (n-1)\n</code></pre> <p>emmmm.... very very clever!!! </p> <p>\u5728\u505a\u672c\u9898\u7684\u65f6\u5019\u8111\u5b50\u91cc\u5c31\u6ca1\u6709\u4ea7\u751f\u8fc7\u9012\u5f52\u8fd9\u4e2a\u5ff5\u5934...\u88ab wholemeal programming \u6bd2\u5bb3\u4e86\u4e48...</p> <p>\u89e3\u7b542\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n tribs\n    where tribs = [a, b, c] ++ zipWith3 (\\x y z -&gt; x + y + z) tribs (tail tribs) (tail $ tail tribs)\n\n-- \u6216\u7c7b\u4f3c\u7684    \ntribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n $ trib\n    where trib = a : b : c : zipWith3 (\\a b c -&gt; a + b + c)\n                                      (drop 0 trib)\n                                      (drop 1 trib)\n                                      (drop 2 trib)\n</code></pre> <p>\u4eba\u5bb6\u4e5f\u662f wholemeal programming\uff0c\u4eba\u5bb6\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4f18\u96c5\uff1f\uff01</p> <p>\u5662\uff0ctribs \u53ef\u4ee5\u76f4\u63a5\u9012\u5f52\u5b9a\u4e49\u554a...</p> <p>https://www.scs.stanford.edu/16wi-cs240h/slides/basics-slides.html#(8)</p> <p>\u89e3\u7b543\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci sig n = take n $ unfoldr (\\(a,b,c) -&gt; Just (a,(b,c,a+b+c))) sig\n</code></pre> <p>\u8fd8\u6709 <code>unfoldr</code> \u8fd9\u4e48\u9ad8\u7ea7\u7684\u51fd\u6570\u5417...</p> <p>https://hackage.haskell.org/package/deferred-folds-0.9.18.3/docs/DeferredFolds-Unfoldr.html</p> <p>\u89e3\u7b544\uff1a</p> <pre><code>{-# LANGUAGE BangPatterns #-}\n\ntribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n . go $ (a, b, c)\n  where\n    go (!x, !y, !z) = x : go (y, z, x + y + z)\n</code></pre> <p>BangPattern: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/strict.html \uff0c \u4e0d lazy \u4e86</p> <p>\u5176\u4f59\u548c\u89e3\u6cd5\u4e00\u7c7b\u4f3c</p>"},{"location":"haskell-learning/#_1","title":"\u5176\u5b83","text":"<p>https://en.wikibooks.org/wiki/Haskell/Understanding_monads</p> <p>\u53d1\u73b0\u4e00\u95e8\u975e\u5e38\u597d\u7684\u8bfe\u7a0b...\u51b3\u5b9a\u5148\u770b\u8fd9\u4e2a\u4e86 https://www.scs.stanford.edu/16wi-cs240h/sched/</p>"},{"location":"leetcode-2024-feb/","title":"Leetcode 2024 feb","text":""},{"location":"leetcode-2024-feb/#217-3007-k","title":"2.17  3007. \u4ef7\u503c\u548c\u5c0f\u4e8e\u7b49\u4e8e K \u7684\u6700\u5927\u6570\u5b57","text":"<p>\u9898\u89e3\uff1ahttps://leetcode.cn/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k/</p> <p>\u89c6\u9891\uff1ahttps://www.bilibili.com/video/BV1zt4y1R7Tc/?vd_source=226da368954a7c68d6b7e4bbdc91b2cd</p> <ul> <li>\u6570\u4f4dDP</li> <li>https://www.bilibili.com/video/BV1rS4y1s721/?spm_id_from=333.337.search-card.all.click&amp;vd_source=226da368954a7c68d6b7e4bbdc91b2cd</li> </ul> <p>\u5982\u679c\u7528\u6700\u6734\u7d20\u7684\u60f3\u6cd5\u53bb\u89e3\u9898\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e0b\u9762\u4e09\u79cd\u64cd\u4f5c</p> <ol> <li>\u64cd\u4f5c1\uff1a\u6c42\u4e00\u4e2a\u6574\u6570\u7684\u4ef7\u503c -&gt; <code>O(1/x)</code></li> <li>\u64cd\u4f5c2\uff1a\u6c42\u4ece 1 \u5230 num \u6240\u6709\u6574\u6570\u7684\u4ef7\u503c\u548c -&gt; <code>O(num/x)</code></li> <li>\u64cd\u4f5c3\uff1a\u6c42\u6700\u5927\u7684 num\uff0c\u4f7f\u5f97 1 ... num \u7684\u4ef7\u503c\u548c\u5c0f\u4e8e k -&gt;  <code>O(k^2/x)</code></li> </ol> <p>\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f <code>O()</code></p> <p>\u53c8\u5df2\u77e5</p> <ul> <li><code>1 &lt;= k &lt;= 10^15</code></li> <li><code>1 &lt;= x &lt;= 8</code></li> </ul> <p>\u53c8\u5df2\u77e5\u5e38\u89c1\u6570\u636e\u91cf\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1ahttps://www.acwing.com/blog/content/32/</p> <p>\u4e00\u822cACM\u6216\u8005\u7b14\u8bd5\u9898\u7684\u65f6\u95f4\u9650\u5236\u662f1\u79d2\u62162\u79d2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++\u4ee3\u7801\u4e2d\u7684\u64cd\u4f5c\u6b21\u6570\u63a7\u5236\u5728 10^7\u223c10^8 \u4e3a\u6700\u4f73\u3002</p> <p>\u56e0\u6b64\uff0c\u4e0a\u9762\u7684\u64cd\u4f5c\u81f3\u5c11\u53d6\u4e00\u4e2a\u5bf9\u6570\uff1b</p> <p>\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\u7528\u4e8c\u5206\u67e5\u627e\uff1a</p> <pre><code>    pub fn find_maximum_number(k: i64, x: i32) -&gt; i64 {\n        let mut hi = 1 &lt;&lt; x * (k.ilog2() as i32 + 1);\n        let mut lo = 0;\n        while lo &lt;= hi {\n            let mid = (hi + lo) / 2;\n            let sum = Solution::sum_until(mid, x);\n            if sum == k {\n                return mid;\n            } \n            if sum &gt; k {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        unreachable!()\n    }\n</code></pre> <p>\u8003\u8651sum_until \u6709\u8f83\u591a\u91cd\u590d\u8ba1\u7b97\uff0c\u53ef\u4f7f\u7528\u6570\u4f4d dp \u51cf\u5c11\u91cd\u590d\u3002</p> <p>\u6ce8\u610f\u4f18\u5148\u7ea7\u95ee\u9898\uff1a</p> <p><code>dp_arr[i] = dp_arr[i - 1] * 2 - 1 + 1 &lt;&lt; (*x* as usize * (i - 1))</code></p> <p><code>*h* &amp; !((2 &lt;&lt; (i * *x*)) - 1)</code></p> <p>\u6570\u4f4dDP\uff1a\u9012\u5f52\u65b9\u7a0b\u548c\u4ece\u9ad8\u5230\u5e95\u6309\u4f4d\u679a\u4e3e\u6709\u5173</p> <p>\u8be6\u89c1\uff1ahttps://algo.itcharge.cn/10.Dynamic-Programming/09.Digit-DP/01.Digit-DP/#_2-2-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0</p> <p>\u57fa\u672c\u6846\u67b6\uff1a</p> <pre><code>class Solution:\n    def digitDP(self, n: int) -&gt; int:\n        # \u5c06 n \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 s\n        s = str(n)\n\n        @cache\n        # pos: \u7b2c pos \u4e2a\u6570\u4f4d\n        # state: \u4e4b\u524d\u9009\u8fc7\u7684\u6570\u5b57\u96c6\u5408\u3002\n        # isLimit: \u8868\u793a\u662f\u5426\u53d7\u5230\u9009\u62e9\u9650\u5236\u3002\u5982\u679c\u4e3a\u771f\uff0c\u5219\u7b2c pos \u4f4d\u586b\u5165\u6570\u5b57\u6700\u591a\u4e3a s[pos]\uff1b\u5982\u679c\u4e3a\u5047\uff0c\u5219\u6700\u5927\u53ef\u4e3a 9\u3002\n        # isNum: \u8868\u793a pos \u524d\u9762\u7684\u6570\u4f4d\u662f\u5426\u586b\u4e86\u6570\u5b57\u3002\u5982\u679c\u4e3a\u771f\uff0c\u5219\u5f53\u524d\u4f4d\u4e0d\u53ef\u8df3\u8fc7\uff1b\u5982\u679c\u4e3a\u5047\uff0c\u5219\u5f53\u524d\u4f4d\u53ef\u8df3\u8fc7\u3002\n        def dfs(pos, state, isLimit, isNum):\n            if pos == len(s):\n                # isNum \u4e3a True\uff0c\u5219\u8868\u793a\u5f53\u524d\u65b9\u6848\u7b26\u5408\u8981\u6c42\n                return int(isNum)\n\n            ans = 0\n            if not isNum:\n                # \u5982\u679c isNumb \u4e3a False\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u5f53\u524d\u6570\u4f4d\n                ans = dfs(pos + 1, state, False, False)\n\n            # \u5982\u679c\u524d\u4e00\u4f4d\u6ca1\u6709\u586b\u5199\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u53ef\u9009\u62e9\u6570\u5b57\u4e3a 0\uff0c\u5426\u5219\u6700\u5c11\u4e3a 1\uff08\u4e0d\u80fd\u542b\u6709\u524d\u5bfc 0\uff09\u3002\n            minX = 0 if isNum else 1\n            # \u5982\u679c\u53d7\u5230\u9009\u62e9\u9650\u5236\uff0c\u5219\u6700\u5927\u53ef\u9009\u62e9\u6570\u5b57\u4e3a s[pos]\uff0c\u5426\u5219\u6700\u5927\u53ef\u9009\u62e9\u6570\u5b57\u4e3a 9\u3002\n            maxX = int(s[pos]) if isLimit else 9\n\n            # \u679a\u4e3e\u53ef\u9009\u62e9\u7684\u6570\u5b57\n            for x in range(minX, maxX + 1): \n                # x \u4e0d\u5728\u9009\u62e9\u7684\u6570\u5b57\u96c6\u5408\u4e2d\uff0c\u5373\u4e4b\u524d\u6ca1\u6709\u9009\u62e9\u8fc7 x\n                if (state &gt;&gt; x) &amp; 1 == 0:\n                    ans += dfs(pos + 1, state | (1 &lt;&lt; x), isLimit and x == maxX, True)\n            return ans\n\n        return dfs(0, 0, True, False)\n</code></pre> <p>\u6b64\u5916\u5747 sum_until \u548c findMaximumNumber \u5b9e\u9645\u4e0a\u90fd\u6709\u7b80\u6613\u7684O(n)\u505a\u6cd5(\u627e\u89c4\u5f8b)</p>"},{"location":"leetcode-2024-jan/","title":"Leetcode 2024 jan","text":""},{"location":"leetcode-2024-jan/#114-822","title":"1.14 822. \u7ffb\u8f6c\u5361\u7247\u6e38\u620f","text":"<pre><code>use std::collections::HashSet;\nimpl Solution {\n    pub fn flipgame(fronts: Vec&lt;i32&gt;, backs: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut wants = HashSet::new();\n        let mut n_wants = HashSet::new();\n        for i in 0..fronts.len() {\n            wants.insert(fronts[i]);\n            wants.insert(backs[i]);\n            if fronts[i] == backs[i] {\n                n_wants.insert(fronts[i]);\n            }\n        }\n        wants = wants.difference(&amp;n_wants).copied().collect();\n\n        wants.into_iter().min().unwrap_or(0)\n    }\n}\n</code></pre> <p>\u590d\u5065\u6d3b\u52a8...</p>"},{"location":"leetcode-2024-jan/#120-1938","title":"1.20 1938. \u67e5\u8be2\u6700\u5927\u57fa\u56e0\u5dee","text":"<p>\u6b64\u9898\u4e00\u89c1\u5c31\u60f3\u5230\u4e86\u4e0b\u9762\u8fd9\u79cd\u66b4\u529b\u89e3\u6cd5\uff0c\u5982\u679c queries \u957f n\uff0cparents \u957f m\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n logm)</code></p> <pre><code>impl Solution {\n    pub fn max_genetic_difference(parents: Vec&lt;i32&gt;, queries: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; Vec&lt;i32&gt; {\n        let mut ans = Vec::&lt;i32&gt;::new();\n        for query in queries {\n            if let [mut n, v] = query[..] {\n                let mut max_v = v ^ n;\n                while n != -1 {\n                    n = parents[n as usize];\n                    max_v = max_v.max(n ^ v);\n                }\n                ans.push(max_v);\n            } else {\n                unreachable!()\n            }\n        }\n        ans\n    }\n}\n</code></pre> <p>\u95ee\u9898\u5728\u4e8e\u6d4b\u8bd5\u6570\u636e\u4e2d m \u53ef\u80fd\u592a\u5927\uff0c\u56e0\u6b64 TLE</p> <p>\u8003\u8651\u5230 n \u4e0d\u53ef\u7701\u7565\uff0c\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u51cf\u5c0f log m \u8fd9\u4e2a\u56e0\u5b50\u3002\u8003\u8651\u6bd4\u8f83\u7684\u8fc7\u7a0b\u5728\u4e8e\u4ece leaf \u5230 root \u8ba1\u7b97 log m \u6b21\u5f02\u6216\u5e76\u53d6\u6700\u5927\u503c\uff0c\u8f6c\u800c\u601d\u8003 \u6c42\u82e5\u5e72\u6b21\u5f02\u6216\u64cd\u4f5c\u7684\u6700\u5927\u503c\u6709\u65e0\u7b80\u4fbf\u65b9\u6cd5\u3002</p> <p>\u5f02\u6216\u4e3a\u4e8c\u8fdb\u5236\u6309\u4f4d\u6bd4\u8f83\uff0c\u76f8\u540c\u4e3a 0\uff0c\u4e0d\u540c\u4e3a 1\u3002\u800c\u6bd4\u8f83\u5927\u5c0f\u4e3a\u4e8c\u8fdb\u5236\u6309\u4f4d\u6bd4\u8f83\u5148\u51fa\u73b0 1 \u7684\u5927\u3002\u90a3\u4e48\u4e00\u4e2a\u6570 a \u82e5\u5e72\u6570\u5f02\u6216\u64cd\u4f5c\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6309\u4f4d\u5224\u65ad\u54ea\u4e2a\u6570\u6700\u5148\u51fa\u73b0\u4e0e a \u4e0d\u540c\u7684\u4f4d\u3002\u8fd9\u79cd\u6309\u5e8f\u5217\u4e0d\u65ad\u9012\u8fdb\u7684\u611f\u89c9\u5c31\u8ba9\u4eba\u60f3\u5230\u4e86 Trie \u6811\u3002</p> <p>\u8003\u8651\u4f7f\u7528 Trie \u6811\uff0c\u7ed3\u679c\u5982\u4e0b\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6570\u4f4d\u6570\u6709\u9650\uff0c\u590d\u6742\u5ea6 <code>O(n+m)</code></p> <p>\u00b7</p> <pre><code>const MAX_BIT: usize = 18;\n\n#[derive(Debug)]\nstruct Trie {\n    left:  Option&lt;Box&lt;Trie&gt;&gt;,  // 0\n    right: Option&lt;Box&lt;Trie&gt;&gt;, // 1\n    cnt: usize\n}\n\nimpl Trie {\n\n    pub fn new() -&gt; Trie {\n        Trie {\n            left: None,\n            right: None,\n            cnt: 0,\n        }\n    }\n\n    pub fn insert(trie: &amp;mut Trie, n: i32) {\n        let mut cur = trie;\n        for i in (0..=MAX_BIT).rev()  {\n            cur.cnt += 1;\n            let bit = n &amp; (1 &lt;&lt; i);\n            if bit != 0 {\n                cur = cur.right.get_or_insert(Box::new(Trie::new()))\n            } else {\n                cur = cur.left.get_or_insert(Box::new(Trie::new()))\n            }\n        }\n        cur.cnt += 1;\n    }\n\n    pub fn remove(trie: &amp;mut Trie, n: i32) {\n        let mut cur = trie;\n        for i in (0..=MAX_BIT).rev()  {\n            cur.cnt -= 1;\n            let bit = n &amp; (1 &lt;&lt; i);\n            if bit != 0 {\n                cur = cur.right.get_or_insert(Box::new(Trie::new()))\n            } else {\n                cur = cur.left.get_or_insert(Box::new(Trie::new()))\n            }\n        }\n        cur.cnt -= 1;\n    }\n\n\n    pub fn max(trie: &amp;Trie, v: i32) -&gt; i32 {\n        let mut cur = trie;\n        let mut p = 0;\n        for i in (0..=MAX_BIT).rev()  {\n            let bit = v &amp; (1 &lt;&lt; i);\n            // try to select different bit:\n            if bit != 0 {\n                if cur.left.is_some() &amp;&amp; cur.left.as_ref().unwrap().cnt != 0 {\n                    cur = cur.left.as_ref().unwrap();\n                } else {\n                    p += 1 &lt;&lt; i;\n                    cur = cur.right.as_ref().unwrap();\n                }\n\n            } else {\n                if cur.right.is_some() &amp;&amp; cur.right.as_ref().unwrap().cnt != 0{\n                    p += 1 &lt;&lt; i;\n                    cur = cur.right.as_ref().unwrap();\n                } else {\n                    cur = cur.left.as_ref().unwrap();\n                }\n            }\n        }\n        p ^ v\n    }\n\n}\n\n\nimpl Solution {\n\n    pub fn max_genetic_difference(parents: Vec&lt;i32&gt;, queries: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; Vec&lt;i32&gt; {\n        // assign queries -&gt; O(n)\n        let mut node_queries = vec![Vec::&lt;(usize, i32)&gt;::new(); parents.len()];\n        let query_len = queries.len();\n\n        for (i, query) in queries.into_iter().enumerate() {\n            if let [n, v] = query[..] {\n                node_queries[n as usize].push((i, v))\n            } else {\n                unreachable!() \n            }\n        }\n\n        // build graph -&gt; O(m)\n        let mut graph = vec![Vec::&lt;i32&gt;::new(); parents.len()];\n        let mut root = 0;\n        for (n, p) in parents.into_iter().enumerate() {\n            if p == -1 {\n                root = n;\n            } else {\n                graph[p as usize].push(n as i32);\n            }\n        }\n\n        // dfs -&gt; O(m log MAX_BIT)\uff0clog MAX_BIT \u4e3a\u5728 Trie \u4e2d\u63d2\u5165/\u5220\u9664\u6bcf\u4e2a\u6570\u7684\u65f6\u95f4\n        let mut ans = vec![0; query_len];\n        let mut stack = vec![(root, false)];\n        let mut trie = Trie::new();\n\n        while let Some((n, visited)) = stack.pop() {\n            if visited {\n                Trie::remove(&amp;mut trie, n as i32);\n                continue;\n            }\n            stack.push((n, true));\n            Trie::insert(&amp;mut trie, n as i32);\n            for (i, v) in node_queries[n].iter() {\n                ans[*i] = Trie::max(&amp;trie, *v);\n            }\n            for child in graph[n].iter() {\n                stack.push((*child as usize, false))\n            }\n        }\n\n\n        ans\n    }\n}\n</code></pre>"},{"location":"leetcode-2024-jan/#121","title":"1.21 \u6784\u9020\u6700\u957f\u975e\u9012\u51cf\u5b50\u6570\u7ec4","text":"<p>\u7b2c\u4e00\u773c\u6ca1\u6709\u8003\u8651\u6e05\u695a\uff0c\u6ca1\u6709\u8ba4\u8bc6\u5230\u5bf9\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u51b3\u7b56\u90fd\u4f1a\u5bf9\u540e\u7eed\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd\uff0c\u6709\u4e86\u4e0b\u9762\u9519\u8bef\u7b54\u6848\u3002</p> <pre><code>impl Solution {\n    pub fn max_non_decreasing_length(nums1: Vec&lt;i32&gt;, nums2: Vec&lt;i32&gt;) -&gt; i32 {\n        let l = nums1.len();\n\n        let mut res = 0;\n        let mut maxl = 0;\n        let mut cur = 0;\n        for i in 0..l {\n            let min = nums1[i].min(nums2[i]);\n            let max = nums1[i].max(nums2[i]);\n            if min &gt;= cur {\n                cur = min;\n                maxl += 1;\n            } else if max &gt;= cur {\n                cur = min;\n                maxl += 1;\n            } else {\n                res = res.max(maxl);\n                maxl = 1;\n                cur = min;\n            }\n        }\n        res.max(maxl)\n    }\n}\n</code></pre> <p>\u8003\u8651\u5230\u5f71\u54cd\u540e\uff0c\u610f\u8bc6\u5230\u6bcf\u4e2a\u4f4d\u7f6e\u9009\u6570\u7ec4 A \u6216\u9009\u6570\u7ec4 B \u90fd\u8981\u8003\u8651\uff0c\u8003\u8651\u53ef\u4ee5\u5212\u5206\u5b50\u95ee\u9898\uff0c\u627e\u5230\u4f9d\u8d56\u5173\u7cfb\u3002\u53c8\u56e0\u4e3a\u662f\u5426\u80fd\u9009\u4f4d\u7f6e n \u4e0a\u7684\u67d0\u4e2a\u6570\u53d6\u51b3\u4e8e\u4f4d\u7f6e n-1 \u4e0a\u7684\u6570\uff0c\u5f97\u51fa\u5982\u4e0b\u7b54\u6848\uff1a</p> <pre><code>    // \u5982\u679c\u628a\u300c\u5b50\u6570\u7ec4\u300d\u6539\u6210\u300c\u5b50\u5e8f\u5217\u300d\u5462\uff1f -&gt; \u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u6570\u7ec4\u7684\u6700\u957f\u975e\u9012\u51cf\u5b50\u5e8f\u5217 -&gt; \u5b58\u5728 O(nlog\u2061n) \u89e3\u6cd5\n    // https://leetcode.cn/problems/longest-increasing-subsequence/\n    // https://www.bilibili.com/video/BV1XW4y1f7Wv/?spm_id_from=333.999.0.0&amp;vd_source=ebce05e0e6ac0774e7cf8844bf20f437\n    pub fn max_non_decreasing_length(nums1: Vec&lt;i32&gt;, nums2: Vec&lt;i32&gt;) -&gt; i32 {\n\n        let (mut last_min, mut last_max) = (0, 0);\n\n        let mut lmin_l = 0;\n        let mut lmax_l = 0;\n\n        let mut max_l = 0;\n\n\n        for i in 0..nums1.len() {\n            let min = nums1[i].min(nums2[i]);\n            let max = nums1[i].max(nums2[i]);\n\n            let lmin_l_ = if min &gt;= last_max {\n                lmax_l + 1\n            } else if min &gt;= last_min {\n                lmin_l + 1\n            } else {\n                1\n            };\n\n            lmax_l = if max &gt;= last_max {\n                lmax_l + 1\n            } else if max &gt;= last_min {\n                lmin_l + 1\n            } else {\n                1\n            };\n            lmin_l = lmin_l_;\n\n\n            last_min = min;\n            last_max = max;\n            max_l = max_l.max(lmax_l);\n        }\n\n        max_l\n    }\n</code></pre>"},{"location":"leetcode-2024-jan/#122-2304","title":"1.22 2304. \u7f51\u683c\u4e2d\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7","text":"<p>\u4e00\u773c\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u6ce8\u610f\uff1a</p> <ol> <li>MAX_COST \u6700\u5927\u503c</li> <li>\u4e0b\u6807\u5199\u5bf9</li> </ol> <pre><code>    pub fn min_path_cost(grid: Vec&lt;Vec&lt;i32&gt;&gt;, move_cost: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; i32 {\n        const MAX_COST: i32 = std::i32::MAX;\n\n        let m = grid.len();\n        let n = grid[0].len();\n        let mut min_path = vec![vec![MAX_COST; n]; m];\n\n        for i in 0..n {\n            min_path[0][i] = grid[0][i];\n        }\n\n        // O(mn^2)\n        for i in 1..m {\n            for j in 0..n {\n                for k in 0..n {\n                    let parent_val = grid[i - 1][j];\n                    let total_cost = grid[i][k] + move_cost[parent_val as usize][k];\n                    min_path[i][k] = min_path[i][k].min(min_path[i - 1][j] + total_cost);\n                }\n            }\n        }\n\n        *min_path[m - 1].iter().min().unwrap()\n    }\n</code></pre>"},{"location":"leetcode-2024-jan/#125-2498-ii","title":"1.25 2498. \u9752\u86d9\u8fc7\u6cb3 II","text":"<p>\u6784\u9020\u9898\uff0c\u8fd9 tm \u8c01\u80fd\u60f3\u5230...</p> <p>\u8bc1\u660e\uff1a\u95f4\u9694\u8df3\u6240\u5f97\u7ed3\u679c\u4e3a\u6240\u6709\u95f4\u9694\u7684\u6700\u5927\u503c\u3002\u5047\u8bbe\u5b58\u5728\u975e\u95f4\u9694\u8df3\u6700\u4f18\u89e3\uff0c\u5219\u5fc5\u62c6\u5206\u6700\u5927\u95f4\u9694\uff0c\u6700\u5927\u95f4\u9694\u62c6\u5206\u540e\u53cd\u7a0b\u95f4\u9694\u5fc5\u5927\u4e8e\u539f\u6700\u5927\u95f4\u9694\uff0c\u77db\u76fe\u3002\u6545\u95f4\u9694\u8df3\u4e3a\u6700\u4f18\u89e3\u3002</p> <pre><code>impl Solution {\n    pub fn max_jump(stones: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut max_jmp = stones[1] - stones[0];\n        for i in 2..stones.len() {\n            max_jmp = max_jmp.max(stones[i] - stones[i - 2]);\n        }\n        max_jmp\n    }\n}\n</code></pre> <p>\u6b64\u5916\uff0c\u68c0\u67e5\u53ef\u5426\u5728\u6700\u5927\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>m</code>\u7684\u60c5\u51b5\u4e0b\u5f80\u8fd4\uff0c\u4e8c\u5206\u67e5\u627e <code>m</code> \u5373\u53ef\u3002\uff08\u8fd9\u79cd\u601d\u8def\u5176\u5b9e\u66f4\u6709\u542f\u53d1\u6027\uff09</p>"},{"location":"leetcode-ali/","title":"P","text":""},{"location":"leetcode-ali/#548","title":"548. \u5c06\u6570\u7ec4\u5206\u5272\u6210\u548c\u76f8\u7b49\u7684\u5b50\u6570\u7ec4","text":""},{"location":"leetcode-ali/#555","title":"555. \u5206\u5272\u8fde\u63a5\u5b57\u7b26\u4e32","text":""},{"location":"leetcode-ali/#666-iv","title":"666. \u8def\u5f84\u603b\u548c IV","text":""},{"location":"leetcode-ali/#np","title":"NP","text":""},{"location":"leetcode-ali/#678","title":"678. \u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32","text":""},{"location":"leetcode-ali/#146-lru","title":"146. LRU \u7f13\u5b58","text":""},{"location":"leetcode-ali/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":""},{"location":"leetcode-ali/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"leetcode-ali/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":""},{"location":"leetcode-ali/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"leetcode-ali/#46","title":"46. \u5168\u6392\u5217","text":""},{"location":"leetcode-ali/#56","title":"56. \u5408\u5e76\u533a\u95f4","text":""},{"location":"leetcode-ali/#560-k","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4","text":""},{"location":"leetcode-ali/#54","title":"54. \u87ba\u65cb\u77e9\u9635","text":""},{"location":"leetcode-ali/#72","title":"72. \u7f16\u8f91\u8ddd\u79bb","text":""},{"location":"leetcode-ali/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":""},{"location":"leetcode-ali/#165","title":"165. \u6bd4\u8f83\u7248\u672c\u53f7","text":""},{"location":"leetcode-ali/#215-k","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","text":""},{"location":"leetcode-ali/#279","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570","text":""},{"location":"leetcode-ali/#0813","title":"\u9762\u8bd5\u9898 08.13. \u5806\u7bb1\u5b50","text":""},{"location":"leetcode-ali/#1312","title":"1312. \u8ba9\u5b57\u7b26\u4e32\u6210\u4e3a\u56de\u6587\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570","text":""},{"location":"leetcode-ali/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode-ali/#review","title":"review","text":""},{"location":"leetcode-ali/#_1","title":"\u5b50\u4e32","text":""},{"location":"leetcode-ali/#239","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c \u6ce8\u610f\u5355\u8c03\u6027","text":""},{"location":"leetcode-ali/#76","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":""},{"location":"leetcode-ali/#_2","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"leetcode-ali/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u633a\u590d\u6742...","text":""},{"location":"leetcode-ali/#_3","title":"\u53cc\u6307\u9488","text":""},{"location":"leetcode-ali/#42","title":"42. \u63a5\u96e8\u6c34 \u7ecf\u5178","text":""},{"location":"leetcode-ali/#15_1","title":"15. \u4e09\u6570\u4e4b\u548c \u633a\u590d\u6742...","text":""},{"location":"leetcode-ali/#_4","title":"\u54c8\u5e0c","text":""},{"location":"leetcode-ali/#128","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 \u7a7f\u9488\u5f15\u7ebf","text":""},{"location":"leetcode-ali/#_5","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-ali/#300-xxx","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \u4ee5xxx\u7ed3\u5c3e\u7684","text":""},{"location":"leetcode-ali/#_6","title":"\u6280\u5de7","text":""},{"location":"leetcode-ali/#31","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","text":""},{"location":"leetcode-ali/#287","title":"287. \u5bfb\u627e\u91cd\u590d\u6570 \u8f6c\u5316\u4e3a\u6c42\u73af\u95ee\u9898","text":""},{"location":"leetcode-ali/#_7","title":"\u4e8c\u5206","text":""},{"location":"leetcode-ali/#34-lower_bound","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \u4e24\u6b21lower_bound","text":""},{"location":"leetcode-ali/#4_1","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode-ali/#_8","title":"\u6808","text":""},{"location":"leetcode-ali/#155","title":"155. \u6700\u5c0f\u6808 \u987e\u540d\u601d\u4e49\uff0c\u4e24\u4e2a\u6808","text":""},{"location":"leetcode-ali/#84","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 \u8003\u8651\u8ba1\u7b97\u65f6\u673a","text":""},{"location":"leetcode-ali/#_9","title":"\u56de\u6eaf","text":""},{"location":"leetcode-ali/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u5b66\u4e60\u7b80\u4fbf\u505a\u6cd5","text":""},{"location":"leetcode-ali/#_10","title":"\u6570\u7ec4","text":""},{"location":"leetcode-ali/#56_1","title":"56. \u5408\u5e76\u533a\u95f4 \u5148\u6309\u5de6\u7aef\u70b9\u6392\u5e8f","text":""},{"location":"leetcode-ali/#189-reverse","title":"189. \u8f6e\u8f6c\u6570\u7ec4 \u591a\u6b21reverse","text":""},{"location":"leetcode-ali/#41","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u539f\u5730\u54c8\u5e0c","text":""},{"location":"leetcode-ali/#_11","title":"\u77e9\u9635","text":""},{"location":"leetcode-ali/#54_1","title":"54. \u87ba\u65cb\u77e9\u9635 \u4e00\u5c42\u5c42\u5411\u5185\u6536\u7f29","text":""},{"location":"leetcode-ali/#48","title":"48. \u65cb\u8f6c\u56fe\u50cf \u5148\u8f6c\u7f6e\uff0c\u518d\u6c34\u5e73\u7ffb\u8f6c","text":""},{"location":"leetcode-ali/#240-ii","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \u4ece\u53f3\u4e0a\u89d2\u770b\uff0c\u4e8c\u5206\u67e5\u627e\u6811","text":""},{"location":"leetcode-ali/#_12","title":"\u94fe\u8868","text":""},{"location":"leetcode-ali/#160","title":"160. \u76f8\u4ea4\u94fe\u8868 \u4e24\u4e2a\u5217\u8868\u63a5\u4e0a","text":""},{"location":"leetcode-ali/#234-mid-reverse","title":"234. \u56de\u6587\u94fe\u8868 \u4ecemid reverse","text":""},{"location":"leetcode-ali/#19-n-k","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 \u53cc\u6307\u9488\uff0c\u5148\u8d70k\u6b65","text":""},{"location":"leetcode-ali/#25-k_1","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"leetcode-ali/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":""},{"location":"leetcode-bytedance-2023/","title":"2023 7\u6708","text":""},{"location":"leetcode-bytedance-2023/#_1","title":"\u65b0\u9898","text":""},{"location":"leetcode-bytedance-2023/#455","title":"455. \u5206\u53d1\u997c\u5e72","text":"<p>\u6ce8\u610f\uff0cpython\u7684sort\u51fd\u6570\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f</p> <p>\uff08\u4ee5\u53caheapq\u662f\u6700\u5c0f\u5806\uff09</p> <p>\u4ee5\u53ca\u6ce8\u610f sorted \u548c sort \u7684\u533a\u522b</p> <pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        ans = 0\n        if s == []:\n            return 0\n        g.sort()\n        s.sort()\n        cur = len(s) - 1\n        for i in range(len(g) - 1, -1, -1):\n            if s[cur] &gt;= g[i]:\n                ans += 1\n                cur -= 1\n                if cur == -1:\n                    return ans\n        return ans\n</code></pre> <p>\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff08\u663e\u7136\u4e5f\u53ef\u4ece\u5c0f\u5230\u5927\u8d2a\u5fc3\uff09</p> <pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        g.sort()\n        s.sort()\n        n = len(g)\n        i = 0\n        for x in s:\n            if i &lt; n and g[i] &lt;= x:\n                i += 1\n        return i\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/assign-cookies/solutions/2974809/pai-xu-shuang-zhi-zhen-jian-ji-xie-fa-py-ttn8/\n</code></pre> <p>17min</p>"},{"location":"leetcode-bytedance-2023/#103","title":"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386","text":"<p>\u8bb0\u5f97\u6bcf\u6b21\u5faa\u73af\u540e\u6e05\u7a7acur</p> <pre><code>class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        ans = []\n        cur = []\n        if root == None:\n            return []\n        q = deque([(root, 0)])\n        while q:\n            node, layer = q.popleft()\n            cur.append(node.val)\n            if len(q) == 0 or layer != q[0][1]:\n                if layer % 2 == 1:\n                    cur.reverse()\n                ans.append(cur[:])\n                cur = []\n            for sub in [node.left, node.right]:\n                if sub != None:\n                    q.append((sub, layer + 1))\n        return ans\n</code></pre> <p>5min</p>"},{"location":"leetcode-bytedance-2023/#344","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32","text":"<p>\u6211\u7684\u5199\u6cd5</p> <pre><code>class Solution:\n    def reverseString(self, s: List[str]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        for i in range(len(s) // 2):\n            s[i], s[len(s) - i - 1] = s[len(s) - i - 1], s[i]\n</code></pre> <p>\u4f46\u53ef\u4ee5\u66f4\u7b80\u5355</p> <pre><code>class Solution:\n    def reverseString(self, s: List[str]) -&gt; None:\n        for i in range(len(s) // 2):\n            s[i], s[-i - 1] = s[-i - 1], s[i]\n</code></pre> <p>&lt; 1 min</p>"},{"location":"leetcode-bytedance-2023/#_2","title":"\u65e7\u9898","text":"<p>199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe  11min \u72af\u4e86\u548c\u7b2c\u4e00\u6b21\u505a\u540c\u6837\u7684\u9519\u8bef\uff0c\u4e0b\u68070/-1\u641e\u9519</p> <p>3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 7min \u5199\u5f97\u7a0d\u5fae\u6bd4\u7b2c\u4e00\u6b21\u597d\u4e9b</p> <p>33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4  30min...\u4f46\u601d\u8def\u6bd4\u4e4b\u524d\u6e05\u695a\u4e86\u8bb8\u591a...</p> <p>215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 emm...\u5feb\u901f\u9009\u62e9\u5199\u5bf9\u975e\u5e38\u4e0d\u5bb9\u6613\u554a</p> <p>146. LRU \u7f13\u5b58 todo</p>"},{"location":"leetcode-bytedance-2023/#2023-6","title":"2023 \u5e74 6 \u6708","text":""},{"location":"leetcode-bytedance-2023/#_3","title":"\u65b0\u9898","text":"<p>225. \u7528\u961f\u5217\u5b9e\u73b0\u6808</p> <p>88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4</p>"},{"location":"leetcode-bytedance-2023/#_4","title":"\u65e7\u9898","text":"<p>25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868</p> <p>15. \u4e09\u6570\u4e4b\u548c</p> <p>31. \u4e0b\u4e00\u4e2a\u6392\u5217</p> <p>200. \u5c9b\u5c7f\u6570\u91cf</p>"},{"location":"leetcode-bytedance-2023/#2023-5","title":"2023\u5e74 5 \u6708","text":""},{"location":"leetcode-bytedance-2023/#_5","title":"\u65b0\u9898","text":"<p>310. \u6700\u5c0f\u9ad8\u5ea6\u6811</p> <p>852. \u5c71\u8109\u6570\u7ec4\u7684\u5cf0\u9876\u7d22\u5f15</p>"},{"location":"leetcode-bytedance-2023/#_6","title":"\u65e7\u9898","text":"<p>92. \u53cd\u8f6c\u94fe\u8868 II</p> <p>121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a</p>"},{"location":"leetcode-contest-355/","title":"Leetcode contest 355","text":"<p>2023.8.23</p> <p>contest-355</p> <p>\u672c\u79d1\u558a\u4e86\u4e09\u5e74\u7684\u8981\u5b66\u7b97\u6cd5\uff0c\u524d\u534a\u5e74\u53c8\u4e3a\u4e86\u627e\u5b9e\u4e60\u558a\u4e86\u597d\u51e0\u4e2a\u6708\u7684\u8981\u5237\u9898\uff0c\u53ef\u7ec8\u7a76\u662f\u6ca1\u6709\u5237\u8d77\u6765\u3002\u4e3b\u8981\u539f\u56e0\u662f\u61d2\uff0c\u6b21\u8981\u539f\u56e0\u662f\u8fd8\u662f\u5728\u601d\u60f3\u4e0a\u8fd8\u662f\u8f7b\u89c6\u4e86\u3002\u3002</p> <p>\u4e0d\u8fc7\u6700\u8fd1\u8d8a\u53d1\u610f\u8bc6\u5230\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7075\u9b42\u8fd8\u662f\u5173\u4e8e\u8ba1\u7b97\u7684\u3002\u5728\u5404\u4e2a\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\u53cd\u590d\u9047\u5230\u4e00\u4e9b\u4f3c\u66fe\u76f8\u8bc6\u7684\u6a21\u5f0f(\u6bd4\u5982\u5c61\u89c1\u4e0d\u9c9c\u7684\u4e0d\u52a8\u70b9\u7b97\u6cd5)\u4e4b\u540e\uff0c\u6211\u8d8a\u53d1\u611f\u5230\u9700\u8981\u4e00\u5c42\u66f4\u9ad8\u7684\u62bd\u8c61\u6765\u7edf\u4e00\u8fd9\u4e9b\u5173\u4e8e\u8ba1\u7b97\u7684\u6a21\u5f0f\u4e86\u3002\u4f46\u662f\u8ba1\u7b97\u53c8\u597d\u50cf\u5f80\u5f80\u96be\u4ee5\u62bd\u8c61\uff0c\u6bcf\u4e2a\u7b97\u6cd5\u672c\u8eab\u5c31\u8f83\u4e3a\u590d\u6742\u4e14\u7b97\u6cd5\u4e4b\u95f4\u7684\u5171\u540c\u6027\u53c8\u8f83\u5c11\uff0c\u652f\u914d\u7b97\u6cd5\u9898\u76ee\u7684\u597d\u50cf\u53ea\u662f\u4e9b\u6a21\u7cca\u7684\u201c\u601d\u60f3\u201d\uff0c\u5982\u201c\u5206\u6cbb\u201d\uff0c\u201c\u52a8\u6001\u89c4\u5212\u201d\u4e4b\u7c7b\u7684\u3002\u8fd9\u4e9b\u601d\u60f3\u53c8\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u7ed3\u5408\u5728\u4e00\u4e2a\u9898\u76ee\u4e2d\uff0c\u8ba9\u4eba\u65e0\u6cd5\u901a\u8fc7\u4e00\u79cd\u201c\u7b97\u6cd5\u201d\u53bb\u89e3\u51b3\u6240\u6709\u7b97\u6cd5\u95ee\u9898\u3002\u76f8\u6bd4\u4e8e\u4eba\u4e3a\u9650\u5b9a\u7684\u903b\u8f91\u63a8\u7406\u89c4\u5219\uff0c\u8fd9\u79cd\u7075\u6d3b\u591a\u53d8\u7684\u201c\u601d\u60f3\u201d\u4f3c\u4e4e\u624d\u662f\u66f4\u4e3a\u666e\u904d\u7684\u3002\u5bf9\u4e8e\u601d\u60f3\u7684\u5b66\u4e60\u90a3\u5c31\u53ea\u80fd\u9760\u201c\u609f\u201d\u4e86\uff0c\u800c\u201c\u609f\u201d\u4e0d\u80fd\u5149\u9760\u770b\uff0c\u5fc5\u987b\u8981\u601d\u8003\uff0c\u52a8\u624b\u540e\u624d\u80fd\u4f53\u4f1a\uff0c\u56e0\u6b64\u505a\u9898\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u4e86\u3002</p> <p>\u6210\u529f\u8bf4\u670d\u81ea\u5df1\u540e\uff0c\u7ec8\u4e8e\u505a\u4e86\u4e00\u6b21leetcode\u5468\u8d5b\uff0c\u7ed3\u679c\u81ea\u7136\u662f\u60e8\u4e0d\u5fcd\u7779\uff0c\u53ea\u8fc7\u4e86\u4e24\u9053\u7b80\u5355\u3002\u3002\u5e0c\u671b\u4ee5\u540e\u575a\u6301\u4e0b\u53bb\u80fd\u6709\u8fdb\u6b65\u5427\u3002</p> <p>\u6211\u611f\u89c9Python\u6700\u9002\u5408\u7528\u6765\u505a\u7b97\u6cd5\u9898\uff0c\u53ef\u4ee5\u8ba9\u4eba\u53ea\u5173\u6ce8\u7eaf\u7cb9\u7684\u8ba1\u7b97\u800c\u5f88\u5c11\u62c5\u5fc3\u8bed\u8a00\u672c\u8eab\u7684\u95ee\u9898\u3002\u4e0d\u8fc7\u56e0\u4e3a\u60f3\u7740\u987a\u4fbf\u5b66\u4e60\u4e0bRust\uff0c\u5c31\u5148\u7528Rust\u505a\u51e0\u6b21\u9898\u3002</p>"},{"location":"leetcode-contest-355/#2789","title":"2789. \u5408\u5e76\u540e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20","text":"<pre><code>impl Solution {\n    pub fn max_array_value(nums: Vec&lt;i32&gt;) -&gt; i64 {\n        nums.into_iter().rfold(0i64, |acc, num| {\n            if acc &gt;= num as i64 {\n                acc + num as i64\n            } else {\n                num as i64\n            }\n        })\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a\u89c2\u5bdf \u64cd\u4f5c \uff0c\u5bb9\u6613\u5f97\u51fa\u82e5\u6570\u7ec4\u4e2d\u6709\u76f8\u90bb\u7684\u4e09\u4e2a\u5143\u7d20 abc\uff0c\u82e5 a &lt; b &lt; c \u5219\u4e00\u5b9a\u6709  a &lt; b + c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6570\u7ec4\u7684\u9012\u589e\u533a\u95f4\u53ef\u4ee5\u4ece\u53f3\u5230\u5de6\u8fdb\u884c\u64cd\u4f5c\u5c06\u533a\u95f4\u5185\u6240\u6709\u6570\u52a0\u8d77\u6765\uff1b\u64cd\u4f5c\u540e\u4e0d\u5f71\u54cd\u8be5\u533a\u95f4\u53f3\u4fa7\u7684\u9012\u51cf\u533a\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u53f3\u5411\u5de6\u626b\u63cf\u5408\u5e76\u6240\u6709\u9012\u589e\u533a\u95f4(on fly)\u3002</p>"},{"location":"leetcode-contest-355/#2788","title":"2788. \u6309\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32","text":"<pre><code>impl Solution {\n    pub fn split_words_by_separator(words: Vec&lt;String&gt;, separator: char) -&gt; Vec&lt;String&gt; {\n        words\n            .into_iter()\n            .flat_map(|word| {\n                word.split(separator)\n                    .filter(|w| !w.is_empty())\n                    .map(str::to_string)\n                    .collect::&lt;Vec&lt;String&gt;&gt;()\n            })\n            .collect()\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a\u5206\u5272\u5373\u53ef\u3002\u7528flat_map\u65b9\u4fbf\u4e9b\u3002</p>"},{"location":"leetcode-contest-355/#2791","title":"2791. \u6811\u4e2d\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u7684\u8def\u5f84\u6570","text":"<pre><code>use std::{collections::{HashMap, btree_map::Entry}, process::id};\nimpl Solution {\n    #[inline(always)]\n    fn to_bits(c: char) -&gt; Option&lt;u32&gt; {\n        let offset = c as u32 - 'a' as u32;\n        if offset &lt; 26 {\n            return Some(1 &lt;&lt; offset);\n        }\n        None\n    }\n\n    pub fn count_palindrome_paths(parent: Vec&lt;i32&gt;, s: String) -&gt; i64 {\n        let mut pal_cnt: i64 = 0;\n        let mut xors: HashMap&lt;u32, i64&gt; = HashMap::new();\n        let chars: Vec&lt;char&gt; = s.chars().collect();\n        let mut graph: HashMap&lt;i32, Vec&lt;i32&gt;&gt; = HashMap::new();\n        for (idx, ele) in parent.iter().enumerate() {\n            graph.entry(*ele).or_insert(vec![]).push(idx as i32);\n        }\n\n        xors.insert(0, 1);\n        let mut stack: Vec&lt;(i32, u32)&gt; = vec![(0, 0)];\n        while let Some((cur, p_xor)) = stack.pop() {\n            if let Some(v) = graph.get(&amp;cur) {\n                for nxt in v {\n                    let xor = p_xor ^ Self::to_bits(*chars.get(*nxt as usize).unwrap()).unwrap();\n                    pal_cnt += (0..26)\n                        .into_iter()\n                        .map(|i| *xors.get(&amp;((1 &lt;&lt; i) ^ xor)).unwrap_or(&amp;0))\n                        .sum::&lt;i64&gt;();\n                    pal_cnt += xors.get(&amp;xor).unwrap_or(&amp;0);\n                    *xors.entry(xor).or_insert(0) += 1;\n                    stack.push((*nxt, xor));\n                }\n            }\n        }\n        return pal_cnt as i64;\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a</p> <ol> <li> <p>\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9\u7136\u540e\u5224\u65ad\u3002</p> </li> <li> <p>\u5df2\u77e5\u8def\u5f84\u5982\u4f55\u5224\u65ad\u662f\u5426\u56de\u6587\uff1f-&gt; \u5947\u5076\u6027\u5373\u53ef\u5224\u65ad</p> </li> <li> <p>\u5df2\u77e5\u4e00\u5bf9\u70b9\u5982\u4f55\u77e5\u9053\u8def\u5f84\uff1f-&gt; \u4ecelca\u51fa\u53d1\u7684\u4e24\u6761\u8def\u5f84\u5408\u5e76(\u5224\u65ad\u56de\u6587\u6070\u597d\u4e5f\u4e0d\u9700\u8981\u8003\u8651\u65b9\u5411\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u522b\u8d70\u7136\u540e\u5408\u5e76)</p> </li> <li> <p>\u5982\u4f55\u8868\u793a\u8def\u5f84\u4fe1\u606f\uff1f-&gt; \u5982\u679c\u7528HashMap\u9700\u8981\u591a\u6b21copy\uff0c\u8003\u8651\u5230\u53ea\u9700\u8981\u4fdd\u5b58\u5947\u5076\u4fe1\u606f\u4e14\u5b57\u6bcd\u8868\u6709\u9650\uff0c\u7528bitset\u5373\u53ef</p> </li> <li> <p>\u4f7f\u7528bitset\u4e4b\u540e\u53d1\u73b0\u8def\u5f84\u7684\u5408\u5e76\u6070\u597d\u53ef\u4ee5\u7528bitset\u4e4b\u95f4\u7684\u4ea6\u6216\u8868\u793a</p> </li> <li> <p>\u5982\u4f55\u679a\u4e3e\u6240\u6709\u7684\u70b9\u5bf9\uff1f\u70b9\u5bf9\u4e4b\u95f4\u662f\u5426\u6709\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\uff1f</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\uff0c\u9488\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c</p> <p>\u601d\u8def\u7c7b\u4f3c\u4e8e\u70b9\u5206\u6cbb</p> </li> <li> <p>\u7684\u786e\u662f\u6709\u4f9d\u8d56\u5173\u7cfb\uff08\u7236\u8282\u70b9\u53ef\u5229\u7528\u5b50\u8282\u70b9\u5df2\u77e5\u7684\u8def\u5f84\u4fe1\u606f\uff09\uff0c\u4f46\u96be\u4ee5\u5229\u7528\uff08\u56e0\u4e3a\u9700\u8981\u5b50\u8282\u70b9\u4fdd\u5b58\u6240\u6709\u8def\u5f84\u4fe1\u606f\uff0c\u8fd9\u5f00\u9500\u53c8\u4e0d\u5c0f\uff09\u3002\u6b64\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3alca\u65f6\u4e24\u4e2a\u5b50\u6811\u4e92\u76f8\u5339\u914d\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u5927(n^2)</p> </li> <li> <p>\u8fd9\u91cc\u5361\u58f3\u4e86\uff0c\u7136\u540e\u770b\u9898\u89e3\uff1a</p> </li> <li> <p>\u5982\u4f55\u5229\u7528\u4f9d\u8d56\u5173\u7cfb\u51cf\u5c11\u8ba1\u7b97\uff1f\u8003\u8651 a ^ b ^ a = b \u56e0\u6b64\u8def\u5f84 a -&gt; b -&gt; c ^ a -&gt; b -&gt; d = c -&gt;b -&gt; d\u3002\u56e0\u4e3a\u8def\u5f84\u95f4\u7684\u76f8\u4e92\u62b5\u6d88\u3002\u6211\u4eec\u4e0d\u9700\u8981\u5355\u72ec\u5b58\u50a8\u6bcf\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8def\u5f84\uff0c\u4efb\u4f55\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u53ef\u4ee5\u6709\u4e24\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u5f02\u6216\u5f97\u5230\uff01</p> </li> <li> <p>\u679a\u4e3e\u70b9\u5bf9\u65f6\u53ef\u4ee5\u5229\u7528\u4e24\u6570\u4e4b\u548c\u7684\u601d\u8def\u3002\uff08\u4e0d\u8981\u88ab\u5b57\u6bcd\u8868\u5413\u5230\uff0c\u53ea\u8981\u5b83\u6709\u9650\uff0c\u5c31\u662fO(1)\uff01</p> </li> <li> <p>\u6240\u4ee5\u6700\u540e\u5c31\u80fd\u4ee5<code>O(n)</code>\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u9053\u9898</p> </li> </ol>"},{"location":"leetcode-contest-355/#2790","title":"2790. \u957f\u5ea6\u9012\u589e\u7ec4\u7684\u6700\u5927\u6570\u76ee","text":"<pre><code>impl Solution {\n    pub fn max_increasing_groups(usage_limits: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut ord_limits = usage_limits.into_iter().map(|x| x as i64).collect::&lt;Vec&lt;i64&gt;&gt;();\n        ord_limits.sort();\n        ord_limits.into_iter()\n            .fold((0, 0), |(cur, rem), num| {\n                if rem + num &gt;= cur + 1 {\n                    (cur + 1, rem + num - cur - 1)\n                } else {\n                    (cur, rem + num)\n                }\n            })\n            .0 as i32\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a</p> <ol> <li>\u5148\u6392\u4e2a\u5e8f\uff0c\u8bd5\u7740\u6784\u9020\u4e00\u4e0b</li> <li>\u4ece\u591a\u5230\u5c11\u5c1d\u8bd5\u903c\u8fd1\u9898\u76ee\u8981\u6c42\uff0c\u591a\u7684\u53ef\u4ee5\u6d88\u53bb</li> <li>\u53d1\u73b0\u601d\u8def\u4e0d\u592a\u5bf9\uff0c\u53c8\u8003\u8651\u5982\u4f55\u628a\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u6253\u4e71\uff0c\u82e5\u6709\u4e86\u6253\u4e71\u7b97\u6cd5\u80fd\u5426\u9006\u5411\u8fd8\u539f</li> <li>\u601d\u7d22\u65e0\u679c\uff0c\u770b\u9898\u89e3\uff1a</li> <li>\u4ece\u5c11\u5230\u591a\u5c1d\u8bd5\u903c\u8fd1\u9898\u76ee\u8981\u6c42\uff0c\u591a\u7684\u53ef\u4ee5\u8865\u5230\u540e\u9762\uff08\u9707\u60ca</li> </ol>"},{"location":"leetcode-contest-355/#_1","title":"\u53cd\u601d","text":""},{"location":"leetcode-contest-355/#_2","title":"\u601d\u8003\u65b9\u5f0f","text":"<p>\u505a\u4e86\u505a\u9898\u53d1\u73b0\u81ea\u5df1\u7684\u601d\u7ef4\u8fd8\u662f\u5f88\u5355\u7eaf\u7684\u3002\u3002\u3002</p> <p>\u505a\u9898\u5c31\u4e24\u4e2a\u601d\u8def\uff1a</p> <ol> <li>\u679a\u4e3e\u5e76\u5206\u522b\u5224\u65ad\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u770b\u80fd\u4e0d\u80fd\u6d88\u9664\u4f9d\u8d56\u5173\u7cfb\uff08\u679a\u4e3e\u4e5f\u53ef\u4ee5\u662f\u4e00\u79cd\u6784\u9020\uff0c\u4e0d\u8fc7\u663e\u7136\u6784\u9020\u96be\u5ea6\u592a\u5927</li> <li>\u6784\u9020\uff0c\u6b63\u5411\u4e0d\u884c\u5c31\u53cd\u5411\uff08\u6784\u9020\u4e5f\u53ef\u4ee5\u7b97\u4e00\u79cd\u679a\u4e3e\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7ed3\u6784\u5e76\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6784\u9020\u6761\u4ef6-&gt;\u4f46\u662f\u6709\u7684\u9898\u663e\u7136\u641c\u7d22\u7a7a\u95f4\u592a\u5927\uff0c\u53ea\u80fd\u6784\u9020</li> </ol> <p>\u4e00\u4e2a\u6280\u5de7\uff1a</p> <ol> <li>\u7279\u5316\uff0c\u4e0d\u7528\u7684\u4fe1\u606f\u5c31\u522b\u7ba1\u4e86\uff0c\u964d\u4f4e\u70b9\u5e38\u6570\u65f6\u95f4\u3002</li> </ol> <p>\u540e\u9762\u4e24\u4e2a\u96be\u9898\u90fd\u662f\u8fd9\u6837\u5957\uff0c\u4f46\u5374\u6ca1\u6709\u5957\u6210\u3002</p> <p>\u5c1d\u8bd5\u6cdb\u5316\u4e00\u4e0b\u51e0\u4e2a\u9898\uff1a</p> <p>\u7ed9\u67d0\u4e2a\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c\u6c42\u6ee1\u8db3\u67d0\u4e2a\u6027\u8d28\u7684\u7ed3\u6784\u7684\u96c6\u5408\u3002\u4e0d\u540c\u70b9\u5728\u4e8e\u7ed3\u6784\u7684\u5b9a\u4e49\u65b9\u5f0f\u4ee5\u53ca\u6027\u8d28\uff08\u597d\u50cf\u6ca1\u5565\u7528</p> <p>\u601d\u8def\u597d\u50cf\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u4e3a\u4ec0\u4e48\u505a\u4e0d\u51fa\u6765\u5462\uff1f</p> <p>\u5173\u952e\u5c31\u5728\u4e8e\u5982\u4f55\u6d88\u9664\u201c\u4f9d\u8d56\u5173\u7cfb\u201d\u4ee5\u53ca\u5982\u4f55\u201c\u6784\u9020\u201d\u662f\u9760\u76f4\u89c9\u7684\u3002\u3002\u3002\u4f46\u662f\u6211\u7ecf\u8fc7\u7684\u8bad\u7ec3\u8f83\u5c11\u6ca1\u80fd\u517b\u6210\u8fd9\u6837\u7684\u76f4\u89c9\u3002</p> <p>\u62ff 2791 \u6765\u770b\uff0c\u5176\u4f9d\u8d56\u5173\u7cfb\u5728\u4e8e \u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684 \u8def\u5f84 \u4f9d\u8d56\u4e8e \u5b83\u4eec\u5230 \u6839\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u4e14\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u662f\u7531\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u4fdd\u8bc1\u7684\u3002\u4f46\u662f\u6211\u6ca1\u60f3\u5230\u5f02\u6216\u7684\u8fd9\u4e2a\u6027\u8d28\uff0c\u6ca1\u6709\u8fd9\u4e2a\u6027\u8d28\u7684\u63d0\u793a\u81ea\u7136\u4e5f\u5c31\u60f3\u4e0d\u5230\u771f\u6b63\u7684\u4f9d\u8d56\u5173\u7cfb\u4e86\u3002\u800c\u4e4b\u524d\u505a\u7684\u52a8\u6001\u89c4\u5212\u53c8\u7ed9\u4e86\u6211\u4e00\u79cd\u4e00\u5b9a\u662f\u201c\u5b50\u8282\u70b9\u4f9d\u8d56\u7236\u8282\u70b9\u201d\u7684\u9519\u89c9\uff0c\u6240\u4ee5\u5c31\u4e00\u76f4\u5f80\u8fd9\u65b9\u9762\u8003\u8651\u4e86\u3002</p> <p>\u62ff 2790  \u6765\u770b\uff0c\u5982\u679c\u6211\u5728\u8003\u8651\u76f4\u89c92\u65f6\u7a0d\u5fae\u53cd\u4e00\u4e0b\u5c31\u53ef\u4ee5\u628a\u6784\u9020\u60f3\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u5374\u6700\u540e\u9677\u5165\u4e86\u9519\u8bef\u7684\u601d\u8def\u91cc\u53bb\u3002</p> <p>\u4e24\u9053\u9898\u56e0\u4e3a\u611f\u89c9\u505a\u4e0d\u51fa\u9677\u5165\u6b7b\u80e1\u540c\u6765\u800c\u653e\u5f03\u4e86\uff0c\u4f46\u5982\u679c\u540e\u9762\u80fd\u5728\u505a\u9898\u7684\u540c\u65f6\u8bb0\u5f55\u81ea\u5df1\u7684\u601d\u8003\u65b9\u5f0f\uff0c\u4e5f\u8bb8\u80fd\u907f\u514d\u8fd9\u79cd\u9677\u5165\u6b7b\u80e1\u540c\u7684\u611f\u89c9\u3002</p>"},{"location":"leetcode-contest-355/#_3","title":"\u7b97\u6cd5","text":"<p>\u67e5 2791 \u76f8\u5173\u8d44\u6599\u65f6\u53d1\u73b0\u4e86\u8bb8\u591a\u7b97\u6cd5\uff1a</p> <p>\u5982\u4e0a\u9762\u63d0\u5230\u7684\u70b9\u5206\u6cbb\uff0c\u4ee5\u53ca\u6c42lca\u7684\u7b97\u6cd5\u3002\u5ffd\u7136\u60f3\u8d77\u6765\u4e4b\u524d\u5199\u7f16\u8bd1\u5668\u505a\u7c7b\u578b\u63a8\u5bfc\u6c42\u6700\u5c0f\u7236\u7c7b\u65f6\u4e5f\u6d89\u53ca\u6c42lca\uff0c\u4f46\u5f53\u65f6\u597d\u50cf\u7528\u4e86\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\u7684\u66b4\u529b\u505a\u6cd5\u3002\u3002</p> <p>\u53e6\u5916\u505a\u8fd9\u4efd\u7b14\u8bb0\u65f6\u672c\u6765\u6253\u7b97\u65e2\u5199\u201c\u76f4\u89c9\u201d\uff0c\u4e5f\u5199\u8bc1\u660e\u7684\uff0c\u4f46\u662f\u611f\u89c9\u5199\u7b97\u6cd5\u7684\u8bc1\u660e\u6bd4\u5199\u7b97\u6cd5\u96be\u591a\u4e86\u3002\u3002\u3002\u5bf9\u4e8e\u8fd9\u79cd\u6709\u6d4b\u8bd5\u7528\u4f8b\u7684\u9898\u76ee\u8fd8\u662f\u76f8\u4fe1\u76f4\u89c9\u4e86\u3002\u3002\u3002</p>"},{"location":"leetcode-contest-355/#rust","title":"Rust","text":"<p>rust\u7684\u8bb8\u591a\u51fd\u6570\u5f0f\u7279\u6027\u548c\u96c6\u5408\u975e\u5e38\u6709\u7528\u3002</p> <p>JonGjengset\u7684youtube\u9891\u9053\u6709\u5173\u4e8e\u5b83\u4eec\u7684\u5f88\u597d\u7684\u4ecb\u7ecd</p> <ul> <li>collection</li> <li>iter</li> </ul> <p>\u53d1\u73b0\u4e24\u4e2a\u6709\u5173rust\u7684\u6709\u8da3\u7684\u9879\u76ee\uff1a</p> <ul> <li>frunk crate\uff1arust\u51fd\u6570\u5f0f\u7f16\u7a0b\u652f\u6301 </li> <li>cranelift\uff1arust\u4f3c\u4e4e\u8ba1\u5212\u672a\u6765\u7528\u8fd9\u4e2a\u66ff\u4ee3llvm\u4f5c\u4e3a\u540e\u7aef(\u8fd9\u6837\u5c31\u5b8c\u5168\u81ea\u4e3e\u4e86\uff01) </li> </ul> <p>\u6587\u7ae0:</p> <ul> <li>Rust\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff01</li> <li>ebpf\u4e0d\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff01</li> </ul> <p>\u4e66\u7c4d\uff1a</p> <ul> <li>effective rust</li> </ul> <p>\u8bfe\u7a0b:</p> <ul> <li>15-816 Linear Logic  by Frank Pfenning </li> </ul>"},{"location":"leetcode-hot100-100/","title":"Leetcode hot100 100","text":"<p>2025.2.14</p> <p>\u90e8\u5206\u4ee3\u7801\u6765\u81ea\u5b98\u65b9\u9898\u89e3</p>"},{"location":"leetcode-hot100-100/#_1","title":"\u6570\u7ec4","text":""},{"location":"leetcode-hot100-100/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<ol> <li>\u53ef\u4ee5\u628a\u5b50\u6570\u7ec4\u7684\u5143\u7d20\u548c\u8f6c\u6362\u6210\u4e24\u4e2a\u524d\u7f00\u548c\u7684\u5dee -&gt; 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a -&gt; \u8d2a\u5fc3\u6c42\u89e3</li> <li>\u52a8\u6001\u89c4\u5212 -&gt; \u6ce8\u610f\u672c\u9898\u4e5f\u6709\u4e24\u79cd\u5199\u6cd5\uff08\u662f\u5426\u591a\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u6570\u7ec4\uff09</li> </ol> <pre><code>    def maxSubArray(self, nums: List[int]) -&gt; int:\n        ans = -inf\n        min_pre_sum = pre_sum = 0\n        for x in nums:\n            pre_sum += x  # \u5f53\u524d\u7684\u524d\u7f00\u548c\n            ans = max(ans, pre_sum - min_pre_sum)  # \u51cf\u53bb\u524d\u7f00\u548c\u7684\u6700\u5c0f\u503c\n            min_pre_sum = min(min_pre_sum, pre_sum)  # \u7ef4\u62a4\u524d\u7f00\u548c\u7684\u6700\u5c0f\u503c\n        return ans\n\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        ans = -inf  # \u6ce8\u610f\u7b54\u6848\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u4e0d\u80fd\u521d\u59cb\u5316\u6210 0\n        f = 0\n        for x in nums:\n            f = max(f, 0) + x\n            ans = max(ans, f)\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-100/#56","title":"56. \u5408\u5e76\u533a\u95f4","text":"<p>\u8ba9\u4eba\u4e0d\u7531\u5f97\u60f3\u8d77\u4e86\u7ebf\u6bb5\u6811...</p> <p>\u9996\u5148\u60f3\u5230\u7684\u662f$O(N^2)$\u590d\u6742\u5ea6\u7684\u7b80\u5355\u505a\u6cd5</p> <pre><code>    def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n        def inverve(i1, i2):\n            return not (i1[1] &lt; i2[0] or i1[0] &gt; i2[1])\n        def mergei(i1, i2):\n            return [min(i1[0], i2[0]), max(i1[1], i2[1])]\n        ans = []\n        worklist = intervals\n        while worklist:\n            inv1 = worklist.pop()\n            interv = False\n            for i, inv2 in enumerate(ans):\n                if inverve(inv1, inv2):\n                    interv = True\n                    ans.remove(inv2)\n                    worklist.append(mergei(inv1, inv2))\n                    break\n            if not interv:\n                ans.append(inv1)\n        return ans\n</code></pre> <p>\u4f46\u5176\u5b9e\u6392\u5e8f\u540e\u626b\u63cf\u4e00\u904d\u5373\u53ef\uff1a</p> <pre><code>    def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n        intervals.sort(key=lambda p: p[0])  # \u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        ans = []\n        for p in intervals:\n            if ans and p[0] &lt;= ans[-1][1]:  # \u53ef\u4ee5\u5408\u5e76\n                ans[-1][1] = max(ans[-1][1], p[1])  # \u66f4\u65b0\u53f3\u7aef\u70b9\u6700\u5927\u503c\n            else:  # \u4e0d\u76f8\u4ea4\uff0c\u65e0\u6cd5\u5408\u5e76\n                ans.append(p)  # \u65b0\u7684\u5408\u5e76\u533a\u95f4\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-100/#189","title":"189. \u8f6e\u8f6c\u6570\u7ec4","text":"<p>\u6700\u7b80\u5355\u7684\u601d\u8def</p> <pre><code>    def rotate(self, nums: List[int], k: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        shift = k % len(nums)\n        for i, n in enumerate(nums[-shift:] + nums[0:-shift]):\n            nums[i] = n\n</code></pre> <p>\u4e00\u4e2a\u795e\u5947\u7684\u53cd\u8f6c\u505a\u6cd5</p> <p></p> <pre><code>    def rotate(self, nums: List[int], k: int) -&gt; None:\n        def reverse(i: int, j: int) -&gt; None:\n            while i &lt; j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n\n        n = len(nums)\n        k %= n  # \u8f6e\u8f6c k \u6b21\u7b49\u4e8e\u8f6e\u8f6c k%n \u6b21\n        reverse(0, n - 1)\n        reverse(0, k - 1)\n        reverse(k, n - 1)\n</code></pre>"},{"location":"leetcode-hot100-100/#238","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef","text":"<p>\u5206\u522b\u8ba1\u7b97\u524d\u7f00\u548c\u540e\u7f00product\u5373\u53ef</p> <pre><code>    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        preproduct = [1]\n        for n in nums[:-1:]:\n            preproduct.append(preproduct[-1]*n)\n\n        sufproduct = [1]\n        for n in nums[:0:-1]:\n            sufproduct.append(bakproduct[-1] * n)\n        sufproduct.reverse()\n\n        ans = []\n        for i in range(len(nums)):\n            ans.append(preproduct[i] * sufproduct[i])\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-100/#41","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u5e76\u4e14\u53ea\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848</p> <p>\u5982\u679c\u4e0d\u8003\u8651\u989d\u5916\u7a7a\u95f4\uff0chash\u4e00\u4e0b\u5c31\u597d</p> <pre><code>    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n        nums = set(nums)\n        i = 1\n        while True:\n            if not i in nums:\n                return i\n            i += 1\n</code></pre> <p>\u539f\u5730\u54c8\u5e0c\uff1a \u5251\u6307 Offer 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57</p> <p></p> <p></p>"},{"location":"leetcode-hot100-100/#_2","title":"\u77e9\u9635","text":""},{"location":"leetcode-hot100-100/#73","title":"73. \u77e9\u9635\u7f6e\u96f6","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a <code>*m* x *n*</code> \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0 \uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0 \u3002\u8bf7\u4f7f\u7528 \u539f\u5730 \u7b97\u6cd5\u3002</p> <ul> <li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u91cf\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li> </ul> <p>\u9996\u5148\u5c0f\u7684\u4f18\u5316</p> <pre><code>    def setZeroes(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        zero_cols = []\n        zero_rows = []\n        for c in range(len(matrix)):\n            for r in range(len(matrix[0])):\n                if matrix[c][r] == 0:\n                    zero_cols.append(c)\n                    zero_rows.append(r)\n        for c in zero_cols:\n            for i in range(len(matrix[c])):\n                matrix[c][i] = 0\n        for i in range(len(matrix)):\n            for r in zero_rows:\n                matrix[i][r] = 0   \n</code></pre> <p>\u4f46\u4f9d\u7136\u4e0d\u662f\u5e38\u6570...\u6240\u4ee5\u6709...</p> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u77e9\u9635\u7684\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u4ee3\u66ff\u65b9\u6cd5\u4e00\u4e2d\u7684\u4e24\u4e2a\u6807\u8bb0\u6570\u7ec4\uff0c\u4ee5\u8fbe\u5230 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u3002\u4f46\u8fd9\u6837\u4f1a\u5bfc\u81f4\u539f\u6570\u7ec4\u7684\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u88ab\u4fee\u6539\uff0c\u65e0\u6cd5\u8bb0\u5f55\u5b83\u4eec\u662f\u5426\u539f\u672c\u5305\u542b 0\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u989d\u5916\u4f7f\u7528\u4e24\u4e2a\u6807\u8bb0\u53d8\u91cf\u5206\u522b\u8bb0\u5f55\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u662f\u5426\u539f\u672c\u5305\u542b 0\u3002</p> <pre><code>    def setZeroes(self, matrix: List[List[int]]) -&gt; None:\n        m, n = len(matrix), len(matrix[0])\n        flag_col0 = any(matrix[i][0] == 0 for i in range(m))\n        flag_row0 = any(matrix[0][j] == 0 for j in range(n))\n\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = matrix[0][j] = 0\n\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n\n        if flag_col0:\n            for i in range(m):\n                matrix[i][0] = 0\n\n        if flag_row0:\n            for j in range(n):\n                matrix[0][j] = 0\n</code></pre>"},{"location":"leetcode-hot100-100/#54","title":"54. \u87ba\u65cb\u77e9\u9635","text":"<p>\u7ed9\u4f60\u4e00\u4e2a <code>m</code> \u884c <code>n</code> \u5217\u7684\u77e9\u9635 <code>matrix</code> \uff0c\u8bf7\u6309\u7167 \u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f \uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</p> <p>\u7ecf\u5178\u4e86\uff0c\u6ce8\u610f\u8fb9\u754c\u95ee\u9898</p> <pre><code>class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -&gt; List[int]:\n        UP, DOWN, LEFT, RIGHT = 1, 2, 3, 4\n        MOVE = {UP: (-1, 0), DOWN: (1, 0), LEFT: (0, -1), RIGHT: (0, 1)}\n        DIRECT_CHANGE = {RIGHT: DOWN, DOWN: LEFT, LEFT: UP, UP: RIGHT} \n        border = {UP: 0, DOWN: len(matrix) - 1, LEFT: 0, RIGHT: len(matrix[0]) - 1}\n        curr = (0, 0)\n        direct = RIGHT\n        ans = []\n\n        def in_border(pos):\n            return border[UP] &lt;= pos[0] &lt;= border[DOWN] and border[LEFT] &lt;= pos[1] &lt;= border[RIGHT]\n\n        def update_border():\n            nonlocal border\n            if direct == RIGHT:\n                border[UP] += 1\n            elif direct == DOWN:\n                border[RIGHT] -= 1\n            elif direct == LEFT:\n                border[DOWN] -= 1\n            elif direct == UP:\n                border[LEFT] += 1\n\n        while True:\n            next_pos = (curr[0] + MOVE[direct][0], curr[1] + MOVE[direct][1])\n            if in_border(next_pos):\n                 ans.append(matrix[curr[0]][curr[1]])\n                 curr = next_pos\n            else:\n                ans.append(matrix[curr[0]][curr[1]])\n                update_border()\n                direct = DIRECT_CHANGE[direct]\n                next_pos = (curr[0] + MOVE[direct][0], curr[1] + MOVE[direct][1])\n                if not in_border(next_pos):\n                    break\n                curr = next_pos\n\n        return ans\n</code></pre> <p>\u66f4\u7b80\u5355\u7684\u505a\u6cd5\uff08\u4e00\u5c42\u5c42\u5411\u5185\u6536\u7f29\uff09\uff1a</p> <pre><code>class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -&gt; List[int]:\n        if not matrix or not matrix[0]:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        top, bottom, left, right = 0, rows - 1, 0, cols - 1\n        ans = []\n\n        while top &lt;= bottom and left &lt;= right:\n            # \u4ece\u5de6\u5230\u53f3\u904d\u5386\u9876\u90e8\u884c\n            for col in range(left, right + 1):\n                ans.append(matrix[top][col])\n            top += 1\n\n            # \u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u53f3\u4fa7\u5217\n            for row in range(top, bottom + 1):\n                ans.append(matrix[row][right])\n            right -= 1\n\n            if top &lt;= bottom:\n                # \u4ece\u53f3\u5230\u5de6\u904d\u5386\u5e95\u90e8\u884c\n                for col in range(right, left - 1, -1):\n                    ans.append(matrix[bottom][col])\n                bottom -= 1\n\n            if left &lt;= right:\n                # \u4ece\u4e0b\u5230\u4e0a\u904d\u5386\u5de6\u4fa7\u5217\n                for row in range(bottom, top - 1, -1):\n                    ans.append(matrix[row][left])\n                left += 1\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-100/#48","title":"48. \u65cb\u8f6c\u56fe\u50cf","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635 <code>matrix</code> \u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002\u8bf7\u4f60\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002</p> <p>\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002</p> <p>\u53ef\u4ee5\u5148\u8f6c\u7f6e\uff0c\u518d\u6c34\u5e73\u7ffb\u8f6c</p> <pre><code>    def rotate(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        for i in range(len(matrix)):\n            for j in range(0, i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(len(matrix)):\n            for j in range(0, len(matrix) // 2):\n                l = j\n                r = len(matrix) - j - 1\n                matrix[i][l], matrix[i][r] = matrix[i][r], matrix[i][l]\n\n            ====\n            matrix[i].reverse()\n            ====\n</code></pre>"},{"location":"leetcode-hot100-100/#240-ii","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II","text":"<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 <code>*m* x *n*</code> \u77e9\u9635 <code>matrix</code> \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code> \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002</li> <li>\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</li> </ul> <p>\u6700\u5f00\u59cb\u56db\u6b21\u4e8c\u5206\u67e5\u627e\u5373\u53ef -&gt; \u601d\u8def\u9519\u8bef</p> <p>\u5b9e\u9645\u4e0a\u4ece\u53f3\u4e0a\u89d2\u770b\u662f\u4e00\u9897\u4e8c\u5206\u67e5\u627e\u6811</p> <pre><code>class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1  # \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        while i &lt; m and j &gt;= 0:  # \u8fd8\u6709\u5269\u4f59\u5143\u7d20\n            if matrix[i][j] == target:\n                return True  # \u627e\u5230 target\n            if matrix[i][j] &lt; target:\n                i += 1  # \u8fd9\u4e00\u884c\u5269\u4f59\u5143\u7d20\u5168\u90e8\u5c0f\u4e8e target\uff0c\u6392\u9664\n            else:\n                j -= 1  # \u8fd9\u4e00\u5217\u5269\u4f59\u5143\u7d20\u5168\u90e8\u5927\u4e8e target\uff0c\u6392\u9664\n        return False\n</code></pre>"},{"location":"leetcode-hot100-100/#_3","title":"\u94fe\u8868","text":""},{"location":"leetcode-hot100-100/#160","title":"160. \u76f8\u4ea4\u94fe\u8868","text":"<pre><code>class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; Optional[ListNode]:\n        p, q = headA, headB\n        while p is not q:\n            p = p.next if p else headB\n            q = q.next if q else headA\n        return p\n</code></pre>"},{"location":"leetcode-hot100-100/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<p>\u7b80\u5355\u7684\u5199\u6cd5\uff1a</p> <pre><code>    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        pre = None\n        cur = head\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre\n</code></pre>"},{"location":"leetcode-hot100-100/#234","title":"234. \u56de\u6587\u94fe\u8868","text":"<p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5426\u7528 <code>O(n)</code> \u65f6\u95f4\u590d\u6742\u5ea6\u548c <code>O(1)</code> \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f</p> <p>\uff08\u5426\u5219\u4e00\u4e2astack\u5c31\u89e3\u51b3\u4e86\uff09</p> <p>\u8fd9\u5c31\u8ba9\u4eba\u60f3\u8d77\u6765 lc160 \u9898\u3002\u9700\u8981\u67d0\u79cd\u6784\u9020\u4e0b\u7684\u6307\u9488\u79fb\u52a8...</p> <p>\u56de\u6587\u94fe\u8868\u7684\u6027\u8d28\uff1f-&gt; reverse\u540e\u4f9d\u7136\u4e00\u6837...   \u4e2d\u95f4\u5207\u5f00\u540e\u4e00\u8fb9reverse\u540e\u4e00\u6837 -&gt; \u600e\u4e48\u4ece\u4e2d\u95f4\u5207\u5f00\uff1f\u5148\u7edf\u8ba1\u957f\u5ea6...</p> <p>\u4f46\u662f\u603b\u611f\u89c9\u592a\u9ebb\u70e6\uff0c\u6000\u7591\u6709\u66f4\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u4e00\u770b\u7b54\u6848\uff0c\u679c\u7136\u8bb8\u591a\u673a\u5de7\uff08\u6bd4\u5982\u4e2d\u95f4\u8282\u70b9\u539f\u6765\u53ef\u4ee5\u5feb\u6162\u6307\u9488\u505a...\uff09</p> <pre><code>class Solution:\n    # 876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\n    def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow\n\n    # 206. \u53cd\u8f6c\u94fe\u8868\n    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        pre, cur = None, head\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre\n\n    def isPalindrome(self, head: Optional[ListNode]) -&gt; bool:\n        mid = self.middleNode(head)\n        head2 = self.reverseList(mid)\n        while head2:\n            if head.val != head2.val:  # \u4e0d\u662f\u56de\u6587\u94fe\u8868\n                return False\n            head = head.next\n            head2 = head2.next\n        return True\n</code></pre>"},{"location":"leetcode-hot100-100/#141-142-ii","title":"141. \u73af\u5f62\u94fe\u8868  142. \u73af\u5f62\u94fe\u8868 II","text":"<p>\u7ecf\u5178\u7684\u5feb\u6162\u6307\u9488\u4e86\uff01</p> <p>141\u8981\u6c42\u8fd4\u56de\u662f\u5426\u6709\uff0c142\u8fd4\u56de\u76f8\u4ea4\u5904</p> <p>141\u53ef\u4ee5\u4fee\u6539\u94fe\u8868\uff0c\u56e0\u6b64\u53ef\u4ee5\u6807\u8bb0\u5df2\u8bbf\u95ee\u8282\u70b9\uff0c\u4e0d\u5728\u8d58\u8ff0\u3002</p> <p>\u5982\u679c\u540c142\u4e00\u6837\uff0c\u4e0d\u53ef\u4ee5\u4fee\u6539\u94fe\u8868\uff0c\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f</p> <ol> <li>\u5feb\u6162\u6307\u9488\uff0c\u5982\u679c\u80fd\u8ffd\u4e0a\uff0c\u5219\u6709\u73af</li> <li>\u5982\u679c2\u500d\u901f\u5ea6\uff0c\u8ffd\u4e0a\u65f6\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u5462\uff1f</li> <li>\u7565\u5fae\u63a8\u5bfc\u5373\u53ef\u5f97\uff1a\u8ffd\u4e0a\u70b9\u5230\u8d77\u70b9\u957f\u5ea6\u5373\u4e3a\u73af\u957f\u7684\u500d\u6570</li> <li>\u6b64\u65f6\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u4ece\u8d77\u70b9\u548c\u8ffd\u4e0a\u70b9\u51fa\u53d1\uff0c\u76f8\u4ea4\u5904\u6781\u4e3a\u5165\u73af\u70b9\uff01</li> </ol> <pre><code>class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -&gt; bool:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast is slow: \n                return True\n        return False \n</code></pre> <pre><code>class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast is slow:\n                while slow is not head:\n                    slow = slow.next\n                    head = head.next\n                return slow\n        return None\n</code></pre>"},{"location":"leetcode-hot100-100/#21","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<ol> <li>\u6ce8\u610f\u53ef\u4ee5\u7528dummy node\u7b80\u5316\u64cd\u4f5c</li> <li>\u6ce8\u610f\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u7684\u7b80\u5316</li> </ol> <pre><code>class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        cur = dummy = ListNode()  # \u7528\u54e8\u5175\u8282\u70b9\u7b80\u5316\u4ee3\u7801\u903b\u8f91\n        while list1 and list2:\n            if list1.val &lt; list2.val:\n                cur.next = list1  # \u628a list1 \u52a0\u5230\u65b0\u94fe\u8868\u4e2d\n                list1 = list1.next\n            else:  # \u6ce8\uff1a\u76f8\u7b49\u7684\u60c5\u51b5\u52a0\u54ea\u4e2a\u8282\u70b9\u90fd\u662f\u53ef\u4ee5\u7684\n                cur.next = list2  # \u628a list2 \u52a0\u5230\u65b0\u94fe\u8868\u4e2d\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 or list2  # \u62fc\u63a5\u5269\u4f59\u94fe\u8868\n        return dummy.next\n</code></pre>"},{"location":"leetcode-hot100-100/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<pre><code>class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        dummy = ListNode()\n        cur = dummy\n        carry = 0\n        while l1 or l2: # \u4e5f\u53ef\u628acarry\u5224\u65ad\u52a0\u5728\u8fd9\u91cc\n            l1v = l1.val if l1 else 0\n            l2v = l2.val if l2 else 0\n            psum = carry + l1v + l2v\n            cur.next = ListNode(psum % 10)\n            carry = psum // 10\n            cur = cur.next\n            l1 = l1.next if l1 else l1\n            l2 = l2.next if l2 else l2\n        if carry != 0:\n            cur.next = ListNode(1)\n        return dummy.next\n</code></pre>"},{"location":"leetcode-hot100-100/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<p>\u601d\u8def\uff1a\u7b2c\u4e00\u6b21\u904d\u5386\u8bb0\u5f55\u8be5\u5220\u54ea\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u518d\u5220\u9664</p> <p>\u53ef\u4ee5\u9012\u5f52\uff0c\u4e5f\u53ef\u4ee5\u904d\u5386\uff08\u597d\u50cf\u9012\u5f52\u66f4\u65b9\u4fbf\u4e9b\uff0c\u9000\u6808\u65f6\u81ea\u7136\u662f\u5012\u5e8f\uff09</p> <pre><code>    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]:\n        def remove(node):\n            if node == None:\n                return 0, None\n            ith, nxt = remove(node.next)\n            node.next = nxt\n            if ith + 1 == n:\n                return ith + 1, nxt\n            else:\n                return ith + 1, node\n        _, ans = remove(head)\n        return ans\n</code></pre> <p>\u4f46\u5176\u5b9e\u53ef\u4ee5\u4f7f\u7528\u524d\u540e\u6307\u9488\u505a\uff1a</p> <pre><code>class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]:\n        # \u7531\u4e8e\u53ef\u80fd\u4f1a\u5220\u9664\u94fe\u8868\u5934\u90e8\uff0c\u7528\u54e8\u5175\u8282\u70b9\u7b80\u5316\u4ee3\u7801\n        left = right = dummy = ListNode(next=head)\n        for _ in range(n):\n            right = right.next  # \u53f3\u6307\u9488\u5148\u5411\u53f3\u8d70 n \u6b65\n        while right.next:\n            left = left.next\n            right = right.next  # \u5de6\u53f3\u6307\u9488\u4e00\u8d77\u8d70\n        left.next = left.next.next  # \u5de6\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\n        return dummy.next\n</code></pre>"},{"location":"leetcode-hot100-100/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u521d\u59cb\u5199\u6cd5</p> <pre><code>    def swapPairs(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        if not (head and head.next):\n            return head\n        prev = dummy = ListNode(next=head)\n        cur = head\n        while cur and cur.next:\n            nxt = cur.next\n            remain = nxt.next\n            prev.next = nxt\n            nxt.next = cur\n            cur.next = remain\n            prev = cur\n            cur = remain\n        return dummy.next\n</code></pre>"},{"location":"leetcode-hot100-100/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<p>\u9996\u5148\u975e\u5e38\u521d\u7ea7\u7684\u5199\u6cd5\uff1a</p> <pre><code>    def reverseKGroup(self, head: Optional[ListNode], k: int) -&gt; Optional[ListNode]:\n        dummy = prev = last = ListNode(next=head)\n\n        def reverse(prev, end):\n            before = prev\n            cur = first = prev.next\n            for _ in range(k):\n                nxt = cur.next\n                cur.next = prev\n                prev = cur\n                cur = nxt\n            first.next = cur\n            before.next = end\n\n        for _ in range(k):\n            last = last.next\n            if last == None:\n                return dummy.next\n\n        while True:\n            last_ = prev.next\n            reverse(prev, last)\n            last = last_\n            for _ in range(k):\n                prev = prev.next\n                last = last.next\n                if last == None:\n                     return dummy.next\n        return dummy.next\n</code></pre> <p>\u7136\u540e\u770b\u770bSOTA\u5199\u6cd5\uff1a</p> <pre><code>class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -&gt; Optional[ListNode]:\n        # \u7edf\u8ba1\u8282\u70b9\u4e2a\u6570\n        n = 0\n        cur = head\n        while cur:\n            n += 1\n            cur = cur.next\n\n        p0 = dummy = ListNode(next=head)\n        pre = None\n        cur = head\n\n        # k \u4e2a\u4e00\u7ec4\u5904\u7406\n        while n &gt;= k:\n            n -= k\n            for _ in range(k):  # \u540c 92 \u9898\n                nxt = cur.next\n                cur.next = pre  # \u6bcf\u6b21\u5faa\u73af\u53ea\u4fee\u6539\u4e00\u4e2a next\uff0c\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\n                pre = cur\n                cur = nxt\n\n            # \u89c1\u89c6\u9891\n            nxt = p0.next\n            nxt.next = cur\n            p0.next = pre\n            p0 = nxt\n        return dummy.next\n</code></pre>"},{"location":"leetcode-hot100-100/#138","title":"138. \u968f\u673a\u94fe\u8868\u7684\u590d\u5236","text":"<p>\u9996\u5148\u53ef\u4ee5\u7528hashmap</p> <pre><code>    def copyRandomList(self, head: 'Optional[Node]') -&gt; 'Optional[Node]':\n        new_old_mp = {None: None}\n        dummy = prev = Node(0)\n        ohead = head\n        while ohead:\n            prev.next = Node(ohead.val)\n            prev = prev.next\n            new_old_mp[ohead] = prev\n            ohead = ohead.next\n        while head:\n            new_old_mp[head].random = new_old_mp[head.random]\n            head = head.next\n        return dummy.next\n</code></pre> <p>\u4e5f\u6709\u4e0d\u7528hashmap\u7684\u795e\u5947\u505a\u6cd5...</p> <p></p>"},{"location":"leetcode-hot100-100/#148","title":"148. \u6392\u5e8f\u94fe\u8868","text":"<p>\u94fe\u8868\u53ea\u80fd\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\uff0c\u6240\u4ee5\u53ea\u6709...\u5192\u6ce1\u6392\u5e8f\uff1f</p> <p>\u4f46\u662f\u522b\u5fd8\u4e86\u53ef\u4ee5hashmap+\u6570\u7ec4\u6392\u5e8f\u554a\uff01</p> <pre><code>    def sortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        if head == None:\n            return None\n        nums = []\n        while head:\n            nums.append(head)\n            head = head.next\n        nums.sort(key=lambda x : x.val, reverse=False)\n        dummy = prev = ListNode()\n        for n in nums:\n            prev.next = n\n            prev = n\n        nums[-1].next = None\n        return dummy.next\n</code></pre> <p>\u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5f52\u5e76\u6392\u5e8f</p> <pre><code>class Solution:\n    # 876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\uff08\u5feb\u6162\u6307\u9488\uff09\n    def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            pre = slow  # \u8bb0\u5f55 slow \u7684\u524d\u4e00\u4e2a\u8282\u70b9\n            slow = slow.next\n            fast = fast.next.next\n        pre.next = None  # \u65ad\u5f00 slow \u7684\u524d\u4e00\u4e2a\u8282\u70b9\u548c slow \u7684\u8fde\u63a5\n        return slow\n\n    # 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\uff08\u53cc\u6307\u9488\uff09\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        cur = dummy = ListNode()  # \u7528\u54e8\u5175\u8282\u70b9\u7b80\u5316\u4ee3\u7801\u903b\u8f91\n        while list1 and list2:\n            if list1.val &lt; list2.val:\n                cur.next = list1  # \u628a list1 \u52a0\u5230\u65b0\u94fe\u8868\u4e2d\n                list1 = list1.next\n            else:  # \u6ce8\uff1a\u76f8\u7b49\u7684\u60c5\u51b5\u52a0\u54ea\u4e2a\u8282\u70b9\u90fd\u662f\u53ef\u4ee5\u7684\n                cur.next = list2  # \u628a list2 \u52a0\u5230\u65b0\u94fe\u8868\u4e2d\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 if list1 else list2  # \u62fc\u63a5\u5269\u4f59\u94fe\u8868\n        return dummy.next\n\n    def sortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        # \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u65e0\u9700\u6392\u5e8f\n        if head is None or head.next is None:\n            return head\n        # \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c\u5e76\u65ad\u5f00 head2 \u4e0e\u5176\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u63a5\n        # \u6bd4\u5982 head=[4,2,1,3]\uff0c\u90a3\u4e48 middleNode \u8c03\u7528\u7ed3\u675f\u540e head=[4,2] head2=[1,3]\n        head2 = self.middleNode(head)\n        # \u5206\u6cbb\n        head = self.sortList(head)\n        head2 = self.sortList(head2)\n        # \u5408\u5e76\n        return self.mergeTwoLists(head, head2)\n</code></pre>"},{"location":"leetcode-hot100-100/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":"<p>\u9996\u5148\u662f\u4e00\u4e2a\u6700\u7b28\u7684\u65b9\u6cd5</p> <pre><code>    def mergeKLists(self, lists: List[Optional[ListNode]]) -&gt; Optional[ListNode]:\n        dummy = prev = ListNode()\n        while any(lists):\n            def maxnode(in1, in2):\n                n1 = lists[in1]\n                n2 = lists[in2]\n                if n1 == None:\n                    return in2\n                elif n2 == None:\n                    return in1\n                elif n1.val &gt; n2.val:\n                    return in2\n                else:\n                    return in1\n            nxt_idx = reduce(maxnode, range(len(lists)))\n            nxt = lists[nxt_idx]\n            lists[nxt_idx] = nxt.next\n            if nxt.next == None:\n                lists.remove(None)\n            prev.next = nxt\n            prev = nxt\n        prev.nxt = None\n        return dummy.next\n</code></pre> <p>\u7136\u540e\u662f\u6700\u5c0f\u5806</p> <pre><code>ListNode.__lt__ = lambda a, b: a.val &lt; b.val  # \u8ba9\u5806\u53ef\u4ee5\u6bd4\u8f83\u8282\u70b9\u5927\u5c0f\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -&gt; Optional[ListNode]:\n        cur = dummy = ListNode()  # \u54e8\u5175\u8282\u70b9\uff0c\u4f5c\u4e3a\u5408\u5e76\u540e\u94fe\u8868\u5934\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        h = [head for head in lists if head]  # \u521d\u59cb\u628a\u6240\u6709\u94fe\u8868\u7684\u5934\u8282\u70b9\u5165\u5806\n        heapify(h)  # \u5806\u5316\n        while h:  # \u5faa\u73af\u76f4\u5230\u5806\u4e3a\u7a7a\n            node = heappop(h)  # \u5269\u4f59\u8282\u70b9\u4e2d\u7684\u6700\u5c0f\u8282\u70b9\n            if node.next:  # \u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e3a\u7a7a\n                heappush(h, node.next)  # \u4e0b\u4e00\u4e2a\u8282\u70b9\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u8282\u70b9\uff0c\u5165\u5806\n            cur.next = node  # \u5408\u5e76\u5230\u65b0\u94fe\u8868\u4e2d\n            cur = cur.next  # \u51c6\u5907\u5408\u5e76\u4e0b\u4e00\u4e2a\u8282\u70b9\n        return dummy.next  # \u54e8\u5175\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n</code></pre>"},{"location":"leetcode-hot100-100/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>\u57fa\u672c\u5b9e\u73b0\u7b80\u5355\uff0c\u4f46\u8981\u6c42<code>O(1)</code>\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c31\u6709\u70b9\u610f\u601d\u4e86...</p> <p>\u95ee\u9898\u5728\u4e8e\u9010\u51fa\u65f6\uff0c\u9700\u8981\u9010\u51fa\u8ddd\u4eca\u6700\u8fdc\u7684...</p> <p>\u8003\u8651\uff1ahashmap+linklist</p> <p>hashmap o1 \u67e5\u627e\uff0clinklist o1 \u79fb\u52a8</p> <p>\u5b9e\u73b0\u6280\u5de7\uff1a\u62bd\u51fa\u5b50\u51fd\u6570</p> <p>\u8c46\u5305\u6539\u5bf9\u7684\uff1a</p> <pre><code>class Node:\n    def __init__(self, key: int = 0, val: int = 0, nxt: Optional['Node'] = None, pre: Optional['Node'] = None) -&gt; 'Node':\n        self.key = key\n        self.val = val\n        self.nxt = nxt\n        self.pre = pre\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        # \u521d\u59cb\u5316\u865a\u62df\u5934\u8282\u70b9\u548c\u5c3e\u8282\u70b9\n        self.start = Node()\n        self.end = Node()\n        self.start.nxt = self.end\n        self.end.pre = self.start\n        self.map = {}\n        self.cap = capacity\n\n    def get(self, key: int) -&gt; int:\n        if key in self.map:\n            # \u82e5 key \u5b58\u5728\uff0c\u5c06\u5bf9\u5e94\u7684\u8282\u70b9\u79fb\u52a8\u5230\u94fe\u8868\u5c3e\u90e8\n            node = self.map[key]\n            self._move_to_end(node)\n            return node.val\n        return -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        if key in self.map:\n            # \u82e5 key \u5df2\u5b58\u5728\uff0c\u66f4\u65b0\u8282\u70b9\u7684\u503c\uff0c\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u94fe\u8868\u5c3e\u90e8\n            node = self.map[key]\n            node.val = value\n            self._move_to_end(node)\n        else:\n            if len(self.map) == self.cap:\n                # \u82e5\u7f13\u5b58\u5df2\u6ee1\uff0c\u5220\u9664\u94fe\u8868\u5934\u90e8\u7684\u8282\u70b9\n                self._remove_start()\n            # \u521b\u5efa\u65b0\u8282\u70b9\u5e76\u6dfb\u52a0\u5230\u94fe\u8868\u5c3e\u90e8\n            node = Node(key, value)\n            self._add_to_end(node)\n            self.map[key] = node\n\n    def _move_to_end(self, node: Node) -&gt; None:\n        # \u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u9664\u8282\u70b9\n        self._remove_node(node)\n        # \u5c06\u8282\u70b9\u6dfb\u52a0\u5230\u94fe\u8868\u5c3e\u90e8\n        self._add_to_end(node)\n\n    def _remove_start(self) -&gt; None:\n        # \u5220\u9664\u94fe\u8868\u5934\u90e8\u7684\u8282\u70b9\n        node = self.start.nxt\n        self._remove_node(node)\n        del self.map[node.key]\n\n    def _remove_node(self, node: Node) -&gt; None:\n        # \u79fb\u9664\u6307\u5b9a\u8282\u70b9\n        node.pre.nxt = node.nxt\n        node.nxt.pre = node.pre\n\n    def _add_to_end(self, node: Node) -&gt; None:\n        # \u5c06\u8282\u70b9\u6dfb\u52a0\u5230\u94fe\u8868\u5c3e\u90e8\n        node.pre = self.end.pre\n        node.nxt = self.end\n        self.end.pre.nxt = node\n        self.end.pre = node\n</code></pre> <p>\u66f4\u597d\u7684\u7248\u672c\uff1a</p> <pre><code>class Node:\n    # \u63d0\u9ad8\u8bbf\u95ee\u5c5e\u6027\u7684\u901f\u5ea6\uff0c\u5e76\u8282\u7701\u5185\u5b58\n    __slots__ = 'prev', 'next', 'key', 'value'\n\n    def __init__(self, key=0, value=0):\n        self.key = key\n        self.value = value\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dummy = Node()  # \u54e8\u5175\u8282\u70b9\n        self.dummy.prev = self.dummy\n        self.dummy.next = self.dummy\n        self.key_to_node = dict()\n\n    # \u83b7\u53d6 key \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u540c\u65f6\u628a\u8be5\u8282\u70b9\u79fb\u5230\u94fe\u8868\u5934\u90e8\n    def get_node(self, key: int) -&gt; Optional[Node]:\n        if key not in self.key_to_node:  # \u6ca1\u6709\u8fd9\u672c\u4e66\n            return None\n        node = self.key_to_node[key]  # \u6709\u8fd9\u672c\u4e66\n        self.remove(node)  # \u628a\u8fd9\u672c\u4e66\u62bd\u51fa\u6765\n        self.push_front(node)  # \u653e\u5728\u6700\u4e0a\u9762\n        return node\n\n    def get(self, key: int) -&gt; int:\n        node = self.get_node(key)\n        return node.value if node else -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        node = self.get_node(key)\n        if node:  # \u6709\u8fd9\u672c\u4e66\n            node.value = value  # \u66f4\u65b0 value\n            return\n        self.key_to_node[key] = node = Node(key, value)  # \u65b0\u4e66\n        self.push_front(node)  # \u653e\u5728\u6700\u4e0a\u9762\n        if len(self.key_to_node) &gt; self.capacity:  # \u4e66\u592a\u591a\u4e86\n            back_node = self.dummy.prev\n            del self.key_to_node[back_node.key]\n            self.remove(back_node)  # \u53bb\u6389\u6700\u540e\u4e00\u672c\u4e66\n\n    # \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff08\u62bd\u51fa\u4e00\u672c\u4e66\uff09\n    def remove(self, x: Node) -&gt; None:\n        x.prev.next = x.next\n        x.next.prev = x.prev\n\n    # \u5728\u94fe\u8868\u5934\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\uff08\u628a\u4e00\u672c\u4e66\u653e\u5728\u6700\u4e0a\u9762\uff09\n    def push_front(self, x: Node) -&gt; None:\n        x.prev = self.dummy\n        x.next = self.dummy.next\n        x.prev.next = x\n        x.next.prev = x\n</code></pre>"},{"location":"leetcode-hot100-12/","title":"Leetcode hot100 12","text":"<p>2024.11.22</p> <p>\u90e8\u5206\u4ee3\u7801\u6765\u81ea\u5b98\u65b9\u9898\u89e3</p>"},{"location":"leetcode-hot100-12/#_1","title":"\u54c8\u5e0c","text":""},{"location":"leetcode-hot100-12/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<p>\u66b4\u529b\u505a\u6cd5\uff1a<code>O(n^2)</code> \u4e24\u91cd\u5faa\u73af\u904d\u5386\u6240\u6709\u7ec4\u5408</p> <p>\u4f18\u5316\uff1a</p> <p>\u8003\u8651\u5185\u5c42\u5faa\u73af\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u67d0\u4e2a\u786e\u5b9a\u6307 <code>target - num[i]</code></p> <p>\u53ef\u4ee5\u628a\u4e24\u5c42\u5faa\u73af\u7684\u904d\u5386\u65b9\u5411\u7edf\u4e00\uff0c\u518d\u628a\u7b2c\u4e8c\u5c42\u5faa\u73af\u7684\u904d\u5386\u7528\u54c8\u5e0c\u67e5\u8868\u66ff\u4ee3\uff08\u7b2c\u4e00\u6b21\u5faa\u73af\u65f6\u5df2\u6536\u96c6\u4e86\u6240\u6709\u4fe1\u606f\uff09</p>"},{"location":"leetcode-hot100-12/#49","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<ol> <li>\u5982\u4f55\u5224\u65ad\u5f02\u4f4d\u8bcd\uff1f -&gt; \u6392\u5e8f\uff08\u6216\u8005\u5b57\u6bcd\u8ba1\u6570\uff09</li> <li>\u5982\u4f55\u5206\u7ec4? -&gt; \u904d\u5386\uff0c\u5bf9 key \u54c8\u5e0c\u5f97\u5230\u5206\u7ec4</li> </ol> <pre><code>class Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            key = \"\".join(sorted(st))\n            mp[key].append(st)\n\n        return list(mp.values())\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            counts = [0] * 26\n            for ch in st:\n                counts[ord(ch) - ord(\"a\")] += 1\n            # \u9700\u8981\u5c06 list \u8f6c\u6362\u6210 tuple \u624d\u80fd\u8fdb\u884c\u54c8\u5e0c\n            mp[tuple(counts)].append(st)\n\n        return list(mp.values())\n</code></pre>"},{"location":"leetcode-hot100-12/#128","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002</p> <p>\u4e5f\u5c31\u662f\u7a7f\u9488\u5f15\u7ebf\u80fd\u8fbe\u5230\u7684\u6700\u957f\u957f\u5ea6</p> <p>\u6700\u521d\u601d\u8def\uff1a</p> <p>\u53ea\u8003\u8651\u6570\u7ec4\u7684\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u80fd\u5426\u6c42\u51fa\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u6700\u957f\u5e8f\u5217\u5462\uff1f</p> <p>\u8003\u8651\u5176\u4e2d\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570 <code>n</code>\uff0c\u4e0e\u4ed6\u76f8\u90bb\u7684\u6570\u80af\u5b9a\u4e3a <code>n+1</code> <code>n-1</code></p> <p>\u5982\u679c\u5728\u6269\u5c55\u533a\u95f4\u65f6\u6709\u4e00\u4e2a\u5927\u54c8\u5e0c\u8868\uff0ckey \u4e3a\u533a\u95f4\u7aef\u70b9\uff0cvalue \u4e3a\u8be5\u533a\u95f4\u957f\u5ea6\uff08\u53ef\u4ee5\u4e0d\u7528\u8bb0\u5f55\u7aef\u70b9\u4e0b\u6807\uff01\uff09</p> <p>\u6bcf\u6b21\u6269\u5c55\u4e00\u4e2a\u6570\u65f6\uff0c\u5c31\u80fd\u77e5\u9053\u662f\u5426\u53ef\u4ee5\u52a0\u5165\u5df2\u6709\u533a\u95f4\u94fe\u4e2d\u4e86</p> <pre><code>class Solution(object):\n    def longestConsecutive(self, nums):\n        hash_dict = dict()\n\n        max_length = 0\n        for num in nums:\n            if num not in hash_dict:\n                left = hash_dict.get(num - 1, 0)\n                right = hash_dict.get(num + 1, 0)\n\n                cur_length = 1 + left + right\n                if cur_length &gt; max_length:\n                    max_length = cur_length\n\n                hash_dict[num] = cur_length\n                hash_dict[num - left] = cur_length\n                hash_dict[num + right] = cur_length\n\n        return max_length\n</code></pre> <p>\u4f46\u5982\u679c\u80fd\u7531 <code>n</code> \u77e5\u9053 <code>n-1</code>\uff0c\u81ea\u7136\u4e5f\u80fd\u77e5\u9053 <code>n-2</code> ...</p> <p>\u6240\u4ee5\u624b\u52a8\u5bf9\u6bcf\u4e2a\u53ef\u80fd\u7684\u533a\u95f4\u7a7f\u9488\u5f15\u7ebf\u5373\u53ef\uff01</p> <pre><code>class Solution:\n    def longestConsecutive(self, nums: List[int]) -&gt; int:\n        longest_streak = 0\n        num_set = set(nums)\n\n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n\n                longest_streak = max(longest_streak, current_streak)\n\n        return longest_streak\n</code></pre>"},{"location":"leetcode-hot100-12/#_2","title":"\u53cc\u6307\u9488","text":""},{"location":"leetcode-hot100-12/#283","title":"283. \u79fb\u52a8\u96f6","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 <code>0</code> \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p>\u7b2c\u4e00\u4e2a\u60f3\u6cd5\uff1a\u5192\u6ce1\u6392\u5e8f</p> <p>\u4f46\u662f\u5192\u6ce1\u65f6\u4e5f\u6709\u5f88\u591a\u591a\u4f59\u52a8\u4f5c</p> <p>\u5b9e\u9645\u4e0a\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u7ef4\u6301\u6027\u8d28\uff08\u4e0e\u5192\u6ce1\u6392\u5e8f\u76f8\u540c\uff09</p> <p>\u4f46\u4e3a\u4e86\u7ef4\u6301\u6027\u8d28\u53d8\u5316\u6570\u7ec4\u65f6\uff0c\u4e0d\u7528\u50cf\u5192\u6ce1\u4e00\u6837\u6328\u4e2a\u6bd4\u8f83\uff0c\u800c\u662f\u76f4\u63a5\u9009\u62e9\u4e00\u4e2a\u975e0\u7684\u4ea4\u6362\uff08\u4f7f\u7528\u53e6\u5916\u4e00\u4e2a\u6307\u9488\u5373\u53ef\uff09</p> <p>\u56e0\u6b64\u662f \u53cc\u6307\u9488</p> <pre><code>class Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:\n        n = len(nums)\n        left = right = 0\n        while right &lt; n:\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n</code></pre>"},{"location":"leetcode-hot100-12/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u66b4\u529b\u89e3\u6cd5\uff1a\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u5bb9\u91cf\u7ec4\u5408 <code>O(n^2)</code></p> <p>\u4f18\u5316\uff1a\u8003\u8651\u54ea\u91cc\u6709\u5197\u4f59\u8ba1\u7b97\uff1f-&gt; \u5982\u679c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u540c\u65f6\u51cf\u5c0f\uff0c\u5bb9\u91cf\u4e0d\u53ef\u80fd\u6700\u5927\u3002\u800c\u4e14\u9ad8\u5ea6\u53d6\u51b3\u4e8e\u6700\u4f4e\u5899\u3002</p> <p>\u8003\u8651\u4e00\u79cd\u6ca1\u6709\u5197\u4f59\u7684\u904d\u5386\u987a\u5e8f\u3002</p> <p>\u8003\u8651\u5230\u76ee\u6807\u662f\u6c42\u6781\u503c\u3002\u6211\u4eec\u7684\u987a\u5e8f\u6700\u597d\u80fd\u907f\u514d\u660e\u663e\u7684\u9012\u51cf</p> <p>\u8003\u8651\u5bbd\u5ea6\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff0c\u5219\u6bcf\u6b21\u51cf\u5c0f\u5bbd\u5ea6\u90fd\u8981\u589e\u52a0\u9ad8\u5ea6...</p> <p>\u6240\u4ee5\u53cc\u6307\u9488\u5373\u53ef\uff0c\u6bcf\u6b21\u79fb\u52a8\u6307\u5411\u8f83\u4f4e\u5899\u7684\u6307\u9488 <code>O(n)</code></p> <pre><code>class Solution:\n    def maxArea(self, height: List[int]) -&gt; int:\n        l, r = 0, len(height) - 1\n        ans = 0\n        while l &lt; r:\n            area = min(height[l], height[r]) * (r - l)\n            ans = max(ans, area)\n            if height[l] &lt;= height[r]:\n                l += 1\n            else:\n                r -= 1\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 <code>[nums[i], nums[j], nums[k]]</code> \u6ee1\u8db3 <code>i != j</code>\u3001<code>i != k</code> \u4e14 <code>j != k</code> \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 <code>nums[i] + nums[j] + nums[k] == 0</code> \u3002\u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a <code>0</code> \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <ol> <li>\u8003\u8651\u5982\u679c\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u5c31\u6210\u4e86\u300c\u4e24\u6570\u4e4b\u548c\u300d\u95ee\u9898\u3002<code>O(n^2)</code></li> <li>\u6b64\u65f6\u7684\u4e24\u91cd\u904d\u5386\u987a\u5e8f\u5982\u679c\u518d\u4e00\u81f4\u5316\uff1f -&gt; \u4f46\u4e5f\u6ca1\u529e\u6cd5\u77e5\u9053\u7b2c\u4e09\u4e2a\u6570\u662f\u4ec0\u4e48...</li> <li>\u8003\u8651\u5230\u4e09\u6570\u4e4b\u548c\u4e00\u5b9a\u4e3a 0\uff0c\u540c\u65f6\u8fd8\u6709 \u4e0d\u91cd\u590d \u7684\u8981\u6c42</li> <li>\u4e0d\u91cd\u590d -&gt; \u6392\u5e8f\uff0c\u7136\u540e\u5185\u5c42\u5faa\u73af\u7528\u53cc\u6307\u9488\uff08\u8fd8\u662f\u7b80\u5316\u904d\u5386\uff09</li> <li>\u4e3a\u4ec0\u4e48\u300c\u4e24\u6570\u4e4b\u548c\u300d\u4e0d\u7528\u53cc\u6307\u9488\uff1f-&gt; \u6392\u5e8f\u8017\u65f6\u592a\u957f</li> </ol> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        n = len(nums)\n        nums.sort()\n        ans = list()\n\n        # \u679a\u4e3e a\n        for first in range(n):\n            # \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n            if first &gt; 0 and nums[first] == nums[first - 1]:\n                continue\n            # c \u5bf9\u5e94\u7684\u6307\u9488\u521d\u59cb\u6307\u5411\u6570\u7ec4\u7684\u6700\u53f3\u7aef\n            third = n - 1\n            target = -nums[first]\n            # \u679a\u4e3e b\n            for second in range(first + 1, n):\n                # \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n                if second &gt; first + 1 and nums[second] == nums[second - 1]:\n                    continue\n                # \u9700\u8981\u4fdd\u8bc1 b \u7684\u6307\u9488\u5728 c \u7684\u6307\u9488\u7684\u5de6\u4fa7\n                while second &lt; third and nums[second] + nums[third] &gt; target:\n                    third -= 1\n                # \u5982\u679c\u6307\u9488\u91cd\u5408\uff0c\u968f\u7740 b \u540e\u7eed\u7684\u589e\u52a0\n                # \u5c31\u4e0d\u4f1a\u6709\u6ee1\u8db3 a+b+c=0 \u5e76\u4e14 b&lt;c \u7684 c \u4e86\uff0c\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\n                if second == third:\n                    break\n                if nums[second] + nums[third] == target:\n                    ans.append([nums[first], nums[second], nums[third]])\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#42","title":"42. \u63a5\u96e8\u6c34","text":"<ol> <li>\u66b4\u529b\u601d\u8def\u663e\u7136\u8d85\u65f6\uff08\u6bcf\u4e00\u5c42\u5206\u522b\u904d\u5386\uff09</li> <li>\u8003\u8651\uff1a</li> <li>\u4ec0\u4e48\u65f6\u5019\u80fd\u63a5\u5230\u96e8\u6c34 -&gt; \u51f9\u5f62   </li> <li>\u4ec0\u4e48\u662f\u51f9 -&gt; \u4e24\u4fa7\u5899\u4e2d\u8f83\u77ee\u4fa7\u4e3a\u5355\u4fa7\u6781\u503c\uff08\u4ece\u6b64\u671b\u53bb\uff0c\u4e00\u9a6c\u5e73\u5ddd</li> </ol> <p>\u6240\u4ee5</p> <p></p> <pre><code>class Solution:\n    def trap(self, height: List[int]) -&gt; int:\n        if not height:\n            return 0\n\n        n = len(height)\n        leftMax = [height[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            leftMax[i] = max(leftMax[i - 1], height[i])\n\n        rightMax = [0] * (n - 1) + [height[n - 1]]\n        for i in range(n - 2, -1, -1):\n            rightMax[i] = max(rightMax[i + 1], height[i])\n\n        ans = sum(min(leftMax[i], rightMax[i]) - height[i] for i in range(n))\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#_3","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"leetcode-hot100-12/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f \u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u6ed1\u52a8\u7a97\u53e3\uff0c\u6709\u91cd\u590d\u7684\u5c31\u6536\u7f29\uff08\u907f\u514d\u904d\u5386\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u4e32</p> <pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        l = 0\n        res = 0\n        cs = set()\n        for i, c in enumerate(s):\n            if c in cs:\n                while c in cs:\n                    cs.remove(s[l])\n                    l += 1\n            cs.add(c)\n            res = max(res, i - l + 1)\n        return res\n</code></pre>"},{"location":"leetcode-hot100-12/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>p</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6240\u6709 <code>p</code> \u7684 \u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p> <p>\u7b80\u5355\u66b4\u529b\u505a\u6cd5\uff1a<code>O(nlogn + nmlogm)</code></p> <pre><code>class Solution:\n    def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n        res = []\n        ss = sorted(p)\n        for i in range(0, len(s) - len(p) + 1):\n            sub = s[i: i + len(p)]\n            if sorted(sub) == ss:\n                res.append(i)\n        return res \n</code></pre> <p>\u4f46\u8003\u8651\u6ed1\u52a8\u7a97\u53e3\uff0c\u6e10\u53d8\u8ba1\u7b97 \u00b7<code>O(m+(n\u2212m)\u03a3)</code></p> <pre><code>class Solution:\n    def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n        s_len, p_len = len(s), len(p)\n\n        if s_len &lt; p_len:\n            return []\n\n        ans = []\n        s_count = [0] * 26\n        p_count = [0] * 26\n        for i in range(p_len):\n            s_count[ord(s[i]) - 97] += 1\n            p_count[ord(p[i]) - 97] += 1\n\n        if s_count == p_count:\n            ans.append(0)\n\n        for i in range(s_len - p_len):\n            s_count[ord(s[i]) - 97] -= 1\n            s_count[ord(s[i + p_len]) - 97] += 1\n\n            if s_count == p_count:\n                ans.append(i + 1)\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#_4","title":"\u5b50\u4e32","text":""},{"location":"leetcode-hot100-12/#560-k","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de \u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a <code>k</code> \u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570 \u3002</p> <p>\u66b4\u529b\u89e3\u6cd5\uff1a<code>O(n^2)</code></p> <p>\u4f46\u662f\u8003\u8651... <code>sum(a...b) = sum(0... b) - sum(0... a) = k</code></p> <p>\u628a\u6bcf\u4e2a\u6570<code>a</code>\u6539\u4e3a <code>sum(0... a)</code>\uff0c\u8fd9\u4e0d\u5c31\u6210\u4e86\u300c\u4e24\u6570\u4e4b\u548c\u300d\u5417\uff1f</p> <p>\u6f02\u4eae\u7684\u95ee\u9898\u8f6c\u5316</p> <pre><code>from collections import defaultdict\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -&gt; int:\n        mp = defaultdict(int)\n        mp[0] = 1\n        prsum = 0\n        res = 0\n        for n in nums:\n            prsum += n\n            res += mp[prsum - k]\n            mp[prsum] += 1\n        return res \n</code></pre>"},{"location":"leetcode-hot100-12/#239","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":"<p>\u4e00\u5f00\u59cb\u601d\u8def\uff1a</p> <p>\u6709\u6ca1\u6709\u8fd9\u6837\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u589e\u5220\u90fd\u5feb\uff0c\u800c\u4e14\u80fd\u6c42\u6700\u503c\uff1f<code>O(nlogn)</code></p> <p>\u5f53\u7136\u6709\uff0c\u4f46\u524d\u63d0\u662f\u4f60\u77e5\u9053 api </p> <p>\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u5143\u7d20\u548c\u4e00\u4e2a\u53ef\u6bd4\u8f83\u7684\u952e\uff08\u5982\u6570\u5b57\uff09\u7ec4\u5408\u6210\u5143\u7ec4\uff0c\u7136\u540e\u5c06\u5143\u7ec4\u6dfb\u52a0\u5230\u5806\u4e2d\u3002<code>heapq</code> \u6a21\u5757\u4f1a\u9996\u5148\u6bd4\u8f83\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u6216\u8005 \u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u7c7b\u4e2d\u5b9e\u73b0 <code>__lt__</code>\uff08\u5c0f\u4e8e\uff09\u65b9\u6cd5\uff0c<code>heapq</code> \u6a21\u5757\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u8fdb\u884c\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u3002</p> <pre><code>class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\n        n = len(nums)\n        # \u6ce8\u610f Python \u9ed8\u8ba4\u7684\u4f18\u5148\u961f\u5217\u662f\u5c0f\u6839\u5806\n        q = [(-nums[i], i) for i in range(k)]\n        heapq.heapify(q)\n\n        ans = [-q[0][0]]\n        for i in range(k, n):\n            heapq.heappush(q, (-nums[i], i))\n            while q[0][1] &lt;= i - k:\n                heapq.heappop(q)\n            ans.append(-q[0][0])\n\n        return ans\n</code></pre> <p><code>O(n)</code> \u7684\u4f18\u5316\uff1f\u4f60\u6ca1\u770b\u9519...</p> <p>\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6c42\u51fa\u7684\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5f53\u524d\u7684\u6ed1\u52a8\u7a97\u53e3\u4e2d\u6709\u4e24\u4e2a\u4e0b\u6807 i \u548c j\uff0c\u5176\u4e2d i \u5728 j \u7684\u5de6\u4fa7\uff08i&lt;j\uff09\uff0c\u5e76\u4e14 i \u5bf9\u5e94\u7684\u5143\u7d20\u4e0d\u5927\u4e8e j \u5bf9\u5e94\u7684\u5143\u7d20\uff08nums[i]\u2264nums[j]\uff09\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f</p> <p>\u5f53\u6ed1\u52a8\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u65f6\uff0c\u53ea\u8981 i \u8fd8\u5728\u7a97\u53e3\u4e2d\uff0c\u90a3\u4e48 j \u4e00\u5b9a\u4e5f\u8fd8\u5728\u7a97\u53e3\u4e2d\uff0c\u8fd9\u662f i \u5728 j \u7684\u5de6\u4fa7\u6240\u4fdd\u8bc1\u7684\u3002\u56e0\u6b64\uff0c\u7531\u4e8e nums[j] \u7684\u5b58\u5728\uff0cnums[i] \u4e00\u5b9a\u4e0d\u4f1a\u662f\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 nums[i] \u6c38\u4e45\u5730\u79fb\u9664\u3002</p> <p>(\u6df1\u5165\u6ed1\u52a8\u8fc7\u7a0b\u5185\u90e8</p> <p>\u5373\u7ef4\u62a4\u4e86\u987a\u5e8f\uff0c\u4e5f\u7ef4\u62a4\u4e86\u6781\u503c\uff0c\u5999\u54c9\uff08\u5173\u952e\u5728\u610f\u8bc6\u5230\uff1a\u4e0d\u662f\u6781\u503c\u7684\u53ef\u4ee5\u65e9\u65e9\u4e22\u6389\uff0c\u800c\u4e0d\u662f\u7b49\u6ed1\u8fc7\u540e\u518d\u4e22</p> <pre><code>class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\n        n = len(nums)\n        q = collections.deque()\n        for i in range(k):\n            while q and nums[i] &gt;= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n        # \u586b\u5145\u521d\u59cb\u7a97\u53e3\n\n        ans = [nums[q[0]]]\n        for i in range(k, n):\n            while q and nums[i] &gt;= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            while q[0] &lt;= i - k:\n                q.popleft()\n            ans.append(nums[q[0]])\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#76","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>t</code> \u3002\u8fd4\u56de <code>s</code> \u4e2d\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c <code>s</code> \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code> \u3002</p> <p>\u4e00\u5f00\u59cb\u5c31\u610f\u8bc6\u5230\uff0c\u5178\u578b\u7684\u6ed1\u52a8\u7a97\u53e3</p> <p>\u4f46\u5173\u952e\u5728\u4e8e\u9009\u62e9\u600e\u6837\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5f53\u524d\u7a97\u53e3\u4fe1\u606f</p> <p>(\u5982\u679c\u7528\u539f\u751f dict\uff0c\u7684\u786e\u8fc7\u4e8e\u7e41\u7410...</p> <pre><code>class Solution:\n    def minWindow(self, s: str, t: str) -&gt; str:\n        ans_left, ans_right = -1, len(s)\n        cnt_s = Counter()  # s \u5b50\u4e32\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n        cnt_t = Counter(t)  # t \u4e2d\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n\n        left = 0\n        for right, c in enumerate(s):  # \u79fb\u52a8\u5b50\u4e32\u53f3\u7aef\u70b9\n            cnt_s[c] += 1  # \u53f3\u7aef\u70b9\u5b57\u6bcd\u79fb\u5165\u5b50\u4e32\n            while cnt_s &gt;= cnt_t:  # \u6db5\u76d6\n                if right - left &lt; ans_right - ans_left:  # \u627e\u5230\u66f4\u77ed\u7684\u5b50\u4e32\n                    ans_left, ans_right = left, right  # \u8bb0\u5f55\u6b64\u65f6\u7684\u5de6\u53f3\u7aef\u70b9\n                cnt_s[s[left]] -= 1  # \u5de6\u7aef\u70b9\u5b57\u6bcd\u79fb\u51fa\u5b50\u4e32\n                left += 1\n        return \"\" if ans_left &lt; 0 else s[ans_left: ans_right + 1]\n</code></pre>"},{"location":"leetcode-hot100-25/","title":"Leetcode hot100 25","text":"<p>2024.12.1</p>"},{"location":"leetcode-hot100-25/#_1","title":"\u52a8\u6001\u89c4\u5212\u57fa\u672c\u77e5\u8bc6","text":"<p>\u6709\u8da3\u7684\u65b9\u6cd5\uff1a</p> <ul> <li><code>10^7</code> \u8ba1\u7b97\u4e3a 1s</li> </ul> <p>\u76f8\u5173\u8d44\u6599</p> <ol> <li>\u7b97\u6cd5\u901a\u5173\u624b\u518c</li> <li>ntnu</li> <li>hello\u7b97\u6cd5</li> <li>oi wiki</li> <li>\u80cc\u5305\u95ee\u9898</li> </ol> <p>dynamic programming = divide-and-conquer method + memoization</p> <pre><code>1. \u628a\u539f\u554f\u984c\u905e\u8ff4\u5206\u5272\u6210\u8a31\u591a\u66f4\u5c0f\u7684\u554f\u984c\u3002\uff08recurrence\uff09\n   1-1. \u5b50\u554f\u984c\u8207\u539f\u554f\u984c\u7684\u6c42\u89e3\u65b9\u5f0f\u7686\u985e\u4f3c\u3002\uff08optimal sub-structure\uff09\n   1-2. \u5b50\u554f\u984c\u6703\u4e00\u800c\u518d\u3001\u518d\u800c\u4e09\u7684\u51fa\u73fe\u3002\uff08overlapping sub-problems\uff09\n2. \u8a2d\u8a08\u8a08\u7b97\u904e\u7a0b\uff1a\n   2-1. \u78ba\u8a8d\u6bcf\u500b\u554f\u984c\u9700\u8981\u54ea\u4e9b\u5b50\u554f\u984c\u4f86\u8a08\u7b97\u7b54\u6848\u3002\uff08recurrence\uff09\n   2-2. \u78ba\u8a8d\u7e3d\u5171\u6709\u54ea\u4e9b\u554f\u984c\u3002\uff08state space\uff09\n   2-3. \u628a\u554f\u984c\u4e00\u4e00\u5c0d\u61c9\u5230\u8868\u683c\u3002\uff08lookup table\uff09\n   2-4. \u6c7a\u5b9a\u554f\u984c\u7684\u8a08\u7b97\u9806\u5e8f\u3002\uff08computational sequence\uff09\n   2-5. \u78ba\u8a8d\u521d\u59cb\u503c\u3001\u8a08\u7b97\u7bc4\u570d\u3002\uff08initial states / boundary\uff09\n3. \u5be6\u4f5c\uff0c\u4e3b\u8981\u6709\u5169\u7a2e\u65b9\u5f0f\uff1a\n   3-1. top-down\n   3-2. bottom-up\n</code></pre> <p>\u70ba\u4ec0\u9ebc\u5206\u5272\u554f\u984c\u4e4b\u5f8c\uff0c\u5c31\u5bb9\u6613\u8a08\u7b97\u7b54\u6848\u5462\uff1f\u56e0\u70ba\u5206\u5272\u554f\u984c\u6642\uff0c\u540c\u6642\u4e5f\u5206\u985e\u4e86\u9019\u500b\u554f\u984c\u7684\u6240\u6709\u53ef\u80fd\u7b54\u6848\u3002\u5206\u985e\u4f7f\u5f97\u7b54\u6848\u7684\u898f\u5f8b\u8b8a\u5f97\u55ae\u7d14\uff0c\u65bc\u662f\u66f4\u5bb9\u6613\u6c42\u5f97\u7b54\u6848\u3002</p>"},{"location":"leetcode-hot100-25/#_2","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-hot100-25/#70","title":"70. \u722c\u697c\u68af","text":"<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 <code>n</code> \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p> <p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c <code>1</code> \u6216 <code>2</code> \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p> <p>\u8ba1\u6570\u95ee\u9898\uff0c\u9012\u5f52\u5206\u89e3\u3002\u8003\u8651\u4f9d\u8d56\u5173\u7cfb\uff0c\u6bcf\u6b21\u53ea\u4fdd\u5b58\u4e24\u4e2a\u72b6\u6001\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6<code>O(n)</code></p> <pre><code>class Solution:\n    def climbStairs(self, n: int) -&gt; int:\n        if n == 1:\n            return 1\n        a = 1\n        b = 2\n        for _ in range(n - 2):\n            c = b + a\n            a = b\n            b = c\n        return b \n</code></pre> <p>\u8003\u8651\u5230\u9012\u63a8\u5f0f\u9f50\u6b21\u7ebf\u6027\u7684\uff0c\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u77e9\u9635\u4e58\u6cd5\uff0c\u8fdb\u800c\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u628a\u590d\u6742\u5ea6\u964d\u5230 <code>O(log n)</code> (\u975e\u9f50\u6b21\u5f0f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53d8\u6362\u8f6c\u5316\u4e3a\u9f50\u6b21\u9012\u63a8\u95ee\u9898)</p> <p>\u5feb\u901f\u5e42\u601d\u8def\uff1a</p> <p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u901a\u9879\u516c\u5f0f</p>"},{"location":"leetcode-hot100-25/#118","title":"118. \u6768\u8f89\u4e09\u89d2","text":"<pre><code>class Solution:\n    def generate(self, numRows: int) -&gt; List[List[int]]:\n        res = []\n        for i in range(numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[-1][j - 1] + res[-1][j])\n            res.append(row)\n        return res\n</code></pre>"},{"location":"leetcode-hot100-25/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u9012\u63a8\u5173\u7cfb\uff1a\u5077\u524d N \u5bb6\u6240\u5f97\u6700\u5927\u91d1\u989d = max(\u4ed6\u7684\u91d1\u989d + \u524d N-2 \u5bb6\u91d1\u989d\uff0c\u524d N-1\u5bb6\u91d1\u989d)</p> <p>\u901a\u8fc7\u5077\u7b2cN\u5bb6\u4e0e\u5426\u5212\u5206\u5b50\u95ee\u9898</p> <pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        first = 0\n        second = 0\n        for i in nums:\n            first, second = second, first + i\n            second = max(first, second)\n        return second\n</code></pre> <p>\u6280\u5de7\uff1a</p> <ol> <li>\u518d\u5de6\u4fa7\u591a\u52a0\u4e24\u5bb6\u94b1\u4e3a0\u7684\u623f\u5c4b\uff0c\u4e0d\u5f71\u54cd\u7ed3\u679c\u4e14\u7b80\u5316\u8ba1\u7b97</li> <li>python\u4e2d\u53ef\u4ee5\u5e76\u884c\u8d4b\u503c</li> </ol> <p>\u6211\u7684\u65e7\u89e3\u6cd5\u4e3a\uff1a</p> <pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        mh = 0 # with\n        mt = 0 # without\n        for i in nums:\n            nmt = mh\n            nmh = mt + i\n            mt = nmt\n            mh = max(nmt, nmh)\n        return mh\n</code></pre> <p>\u8be5\u89e3\u6cd5\u4e2d\uff0c\u5b50\u95ee\u9898\u95f4\u9012\u63a8\u5173\u7cfb\u4e0d\u5982\u65b0\u89e3\u6cd5\u6e05\u6670</p>"},{"location":"leetcode-hot100-25/#279","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u8fd4\u56de \u548c\u4e3a <code>n</code> \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf \u3002</p> <p>\u672c\u9898\u5b9e\u9645\u4e0a\u662f\u627e\u786c\u5e01\u7684\u53d8\u4f53</p> <p>\u4f46\u201c\u786c\u5e01\u9762\u989d\u201d\u9700\u8981\u6839\u636en\u63a8\u65ad\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n sqrt n)</code></p> <pre><code>class Solution:\n    def numSquares(self, n: int) -&gt; int:\n        dp = [0]*(n+1)\n        for i in range(1, n + 1):\n            if i ** 0.5 % 1 == 0:\n                dp[i] = 1\n            else:\n                dp[i] = 1+min([dp[i-j*j] for j in range(1,int(i**0.5)+1)])\n        return dp[-1]\n</code></pre>"},{"location":"leetcode-hot100-25/#322","title":"322. \u96f6\u94b1\u5151\u6362","text":"<p>\u7ecf\u5178\u627e\u786c\u5e01 \u80cc\u5305\u95ee\u9898</p> <pre><code>class Solution:\n    def coinChange(self, coins: List[int], amount: int) -&gt; int:\n        dp = [0] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            inds = [dp[i - coin] for coin in coins if coin &lt;= i and dp[i - coin] != -1]\n            if inds == []:\n                dp[i] = -1\n            else:\n                dp[i] = min(inds) + 1\n        return dp[-1]\n</code></pre>"},{"location":"leetcode-hot100-25/#139","title":"139. \u5355\u8bcd\u62c6\u5206","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 <code>wordDict</code> \u4f5c\u4e3a\u5b57\u5178\u3002\u5982\u679c\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u62fc\u63a5\u51fa <code>s</code> \u5219\u8fd4\u56de <code>true</code>\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u6c42\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u5e76\u4e14\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <ol> <li>\u9996\u5148\u8003\u8651 \u8fd9\u4e5f\u662f\u4e00\u4e2a\u627e\u786c\u5e01\u95ee\u9898</li> </ol> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        @cache\n        def dfs(s: str) -&gt; bool:\n            if all(c == '_' for c in s):\n                return True\n            words = [word for word in wordDict if word in s]\n            if words == []:\n                return False\n            else:\n                return any([dfs(s.replace(word, \"_\", 1)) for word in words])    \n        return dfs(s)\n</code></pre> <p>\u4f46\u662f\u8d85\u65f6\u3002</p> <p>\u8003\u8651\u5230\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u90e8\u5206\u4e00\u5b9a\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u8fdb\u884c\u4f18\u5316\u3002\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n^2)</code></p> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        max_len = max(map(len, wordDict))  # \u7528\u4e8e\u9650\u5236\u4e0b\u9762 j \u7684\u5faa\u73af\u6b21\u6570\n        words = set(wordDict)  # \u4fbf\u4e8e\u5feb\u901f\u5224\u65ad s[j:i] in words\n\n        @cache  # \u7f13\u5b58\u88c5\u9970\u5668\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97 dfs \u7684\u7ed3\u679c\uff08\u8bb0\u5fc6\u5316\uff09\n        def dfs(i: int) -&gt; bool:\n            if i == 0:  # \u6210\u529f\u62c6\u5206\uff01\n                return True\n            return any(s[j:i] in words and dfs(j)\n                       for j in range(i - 1, max(i - max_len - 1, -1), -1))\n\n        return dfs(len(s))\n</code></pre>"},{"location":"leetcode-hot100-25/#300","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u4f9d\u7136\u8003\u8651\u5b89\u88c5\u6570\u7ec4\u957f\u5ea6\u9012\u5f52\uff0c\u9700\u8981\u4fdd\u5b58\u6700\u957f\u957f\u5ea6\u548c\u5f53\u524d\u6700\u5927\u503c\u3002\u600e\u4e48\u6301\u6709\u6700\u5927\u503c\uff0c\u6b64\u65f6\u6211\u6309\u4e4b\u524d\u7684 with/without \u9012\u5f52\u601d\u8def\u6765\u505a\u7684</p> <pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        dp1 = [0] * len(nums) # with\n        dp2 = [0] * len(nums) # all\n        dp1[0] = 1\n        dp2[0] = 1\n        for i in range(1, len(nums)):\n            prev = 0\n            for j in range(0, i):\n                if nums[j] &lt; nums[i]:\n                    prev = max(dp1[j], prev)\n            dp1[i] = prev + 1\n            dp2[i] = max(dp2[i - 1], dp1[i])\n        return dp2[-1]\n</code></pre> <p>\u4e8b\u5b9e\u4e0a\uff0c\u95ee\u9898\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f6c\u6362\uff0c\u5148\u6c42\u5305\u542b\u6700\u540e\u4e00\u4e2a\u6570\u7684\u6700\u5927\u503c\uff0c\u518dmax\u4e00\u4e0b</p> <pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        dp = []\n        for i in range(len(nums)):\n            dp.append(1)\n            for j in range(i):\n                if nums[i] &gt; nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n</code></pre> <p>\u4f46\u662f\u4e5f\u6709\u4e00\u4e2a\u8d2a\u5fc3\u505a\u6cd5\uff1a\u4f7f\u5f97\u6bcf\u6b21\u52a0\u4e0a\u7684\u6570\u5c3d\u53ef\u80fd\u5c0f...<code>O(n log n)</code></p> <p>https://writings.sh/post/longest-increasing-subsequence-revisited</p> <p>\u4e0d\u8fc7\u4e00\u5f00\u59cb\u5e76\u6ca1\u6709\u60f3\u5230\u8d2a\u5fc3\u7b56\u7565...</p>"},{"location":"leetcode-hot100-25/#152","title":"152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed \u5b50\u6570\u7ec4</p> <p>\uff08\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u56e0\u4e3a\u542b\u6709\u8d1f\u6570\uff0c\u6240\u4ee5\u4e58\u79ef\u7f3a\u4e4f\u5355\u8c03\u6027\uff0c\u96be\u4ee5\u5212\u5206\u5b50\u95ee\u9898\u3002\u4e00\u5f00\u59cb\u4f3c\u4e4e\u53ea\u6709 <code>O(n^2)</code>\u7684\u66b4\u529b\u505a\u6cd5\u3002</p> <p>\u4f46\u662f\u7ec6\u7ec6\u8003\u8651\uff0c\u4e58\u6cd5\u7ed3\u679c\u7684\u7b26\u53f7\u867d\u7136\u53d8\u5316\uff0c\u4f46\u6570\u503c\u5374\u4e00\u76f4\u589e\u5927\u3002\u5982\u679c\u540c\u65f6\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u5c31\u6709\u529e\u6cd5\u7528\u52a8\u6001\u89c4\u5212\u4e86\u3002</p> <pre><code>class Solution:\n    def maxProduct(self, nums: List[int]) -&gt; int:\n        ans = -inf  # \u6ce8\u610f\u7b54\u6848\u53ef\u80fd\u662f\u8d1f\u6570\n        f_max = f_min = 1\n        for x in nums:\n            f_max, f_min = max(f_max * x, f_min * x, x), \\\n                           min(f_max * x, f_min * x, x)\n            ans = max(ans, f_max)\n        return ans\n</code></pre> <p>\u8fd9\u91cc\u4e5f\u6ce8\u610f\uff1a\u52a8\u6001\u89c4\u5212\u4e0d\u4e00\u5b9a\u8981\u76f4\u63a5\u6c42\u51fa\u6700\u7ec8\u7ed3\u679c\uff0c\u53ef\u4ee5\u53ea\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u7a0b\u5e8f</p>"},{"location":"leetcode-hot100-25/#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570 \u7684 \u975e\u7a7a \u6570\u7ec4 <code>nums</code> \u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u95ee\u9898\u8f6c\u6362\uff1a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5b50\u96c6\uff0c\u548c\u4e3a sum / 2\u3002</p> <p>01\u80cc\u5305\u95ee\u9898\uff0c\u540c\u65f6\u5bf9\u6570\u7ec4\u957f\u5ea6\u548c\u603b\u548c\u9012\u5f52</p> <pre><code>class Solution:\n    def canPartition(self, nums: List[int]) -&gt; bool:\n        # 1. \u8f6c\u5316\u95ee\u9898\n        # 2. 01\u80cc\u5305\n        @cache\n        def dfs(i: int, j: int) -&gt; bool:\n            if i &lt; 0:\n                return j == 0\n            return j &gt;= nums[i] and dfs(i - 1, j - nums[i]) or dfs(i - 1, j)\n\n        s = sum(nums)\n        return s % 2 == 0 and dfs(len(nums) - 1, s // 2)\n</code></pre>"},{"location":"leetcode-hot100-25/#32","title":"32. \u6700\u957f\u6709\u6548\u62ec\u53f7","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b <code>'('</code> \u548c <code>')'</code> \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u62ec\u53f7\u5339\u914d\u5c31\u53ef\u4ee5\u3002\u6bcf\u6b21\u6709\u5339\u914d\u5230\u7684\uff0c\u5219\u66f4\u65b0\u957f\u5ea6\u3002</p> <pre><code>class Solution:\n    def longestValidParentheses(self, s: str) -&gt; int:\n        res = 0\n        stk = []\n        for i in range(0, len(s)):\n            if s[i] == '(':\n                stk.append(i + 1)\n            else:\n                if len(stk) != 0 and stk[-1] &gt; 0:\n                    stk.pop()\n                    if len(stk) == 0:\n                        length = i + 1\n                    else:\n                        length = i - abs(stk[-1]) + 1\n                    res = max(res, length)\n                else:\n                    stk.append(-(i + 1))\n        return res\n</code></pre>"},{"location":"leetcode-hot100-25/#_3","title":"\u591a\u7ef4\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-hot100-25/#62","title":"62. \u4e0d\u540c\u8def\u5f84","text":"<p>\u7ecf\u5178\u9012\u63a8</p> <pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        dp = [[0] * m] * n\n        for i in range(0, n):\n            dp[i][0] = 1\n        for i in range(0, m):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n        return dp[n - 1][m - 1]\n</code></pre>"},{"location":"leetcode-hot100-25/#64","title":"64. \u6700\u5c0f\u8def\u5f84\u548c","text":"<pre><code>class Solution:\n    def minPathSum(self, grid: List[List[int]]) -&gt; int:\n        c = len(grid)\n        r = len(grid[0])\n        # dp = [[0] * r] * c  # shallow copy!!!\n        dp = [[0] * r for _ in range(c)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, c):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for i in range(1, r):\n            dp[0][i] = dp[0][i-1] + grid[0][i]\n        for i in range(1, c):\n            for j in range(1, r):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[c - 1][r - 1]\n</code></pre>"},{"location":"leetcode-hot100-25/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6700\u957f\u7684 \u56de\u6587\u5b50\u4e32\u3002</p> <p>\u601d\u8def\uff1a\u4ecekernel\u5f00\u59cb\u62d3\u5c55</p> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        maxl = 1\n        start = 0\n        # one kernel\n        for i in range(len(s)):\n            for j in range(1, min(i + 1, len(s) - i)):\n                if s[i + j] == s[i - j]:\n                    if 1 + 2 * j &gt; maxl:\n                        start = i - j\n                        maxl = 1 + 2 * j\n                else:\n                    break\n\n\n        # two kernel\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                if 2 &gt; maxl:\n                    start = i\n                    maxl = 2\n                for j in range(1, min(i+1, len(s)-i-1)):\n                    if s[i + j + 1] == s[i - j]:\n                        if 2 + 2 * j &gt; maxl:\n                            start = i - j\n                            maxl = 2 + 2 * j\n                    else:\n                        break\n        return s[start:start + maxl]\n</code></pre> <p>\u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u52a8\u6001\u89c4\u5212\uff1a</p> <p></p>"},{"location":"leetcode-hot100-25/#1143","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u540c\u65f6\u5bf9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u505a\u9012\u5f52...</p> <pre><code>class Solution:\n    # \u4e0b\u6807\u8fd0\u7b97\u597d\u590d\u6742\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        if set(text1).isdisjoint(set(text2)):\n            return 0\n        dp = [[0 for _ in range(len(text1))] for _ in range(len(text2))] \n        for i in range(len(text2)):\n            dp[i][0] = 1 if text2[i] == text1[0] else 0\n        for i in range(len(text1)):\n            dp[0][i] = 1 if text2[0] == text1[i] else 0\n        for i in range(len(text2)):\n            for j in range(len(text1)):\n                c = text2[i] \n                l = 0\n                for k in reversed(range(0, j + 1)):\n                    if k == 0 or i == 0:\n                        prev = 0\n                    else:\n                        prev = dp[i-1][k-1]\n                    if text1[k] == c:\n                        l = prev + 1\n                        break\n                dp[i][j] = max(l, dp[i-1][j])\n        return dp[-1][-1]\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3\uff1a</p> <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n</code></pre>"},{"location":"leetcode-hot100-25/#72","title":"72. \u7f16\u8f91\u8ddd\u79bb","text":"<p>\u7ecf\u5178\u95ee\u9898</p> <pre><code>class Solution:\n    def minDistance(self, word1: str, word2: str) -&gt; int:\n        if len(word1) == 0 or len(word2) == 0:\n            return max(len(word1), len(word2))\n        # \u591a\u52a0\u4e00\u4e2a\u7ef4\u5ea6\n        dp = [[0 for _ in range(len(word1) + 1)] for _ in range(len(word2) + 1)]\n        for i in range(len(word2) + 1):\n            dp[i][0] = i\n        for i in range(len(word1) + 1):\n            dp[0][i] = i     \n        for i in range(1, len(word2) + 1):\n            for j in range(1, len(word1) + 1):\n                if word1[j - 1] != word2[i - 1]:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1])\n        return dp[-1][-1]\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution:\n    def minDistance(self, word1: str, word2: str) -&gt; int:\n        n = len(word1)\n        m = len(word2)\n\n        # \u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u7a7a\u4e32\n        if n * m == 0:\n            return n + m\n\n        # DP \u6570\u7ec4\n        D = [ [0] * (m + 1) for _ in range(n + 1)]\n\n        # \u8fb9\u754c\u72b6\u6001\u521d\u59cb\u5316\n        for i in range(n + 1):\n            D[i][0] = i\n        for j in range(m + 1):\n            D[0][j] = j\n\n        # \u8ba1\u7b97\u6240\u6709 DP \u503c\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                left = D[i - 1][j] + 1\n                down = D[i][j - 1] + 1\n                left_down = D[i - 1][j - 1] \n                if word1[i - 1] != word2[j - 1]:\n                    left_down += 1\n                D[i][j] = min(left, down, left_down)\n\n        return D[n][m]\n</code></pre>"},{"location":"leetcode-hot100-50/","title":"Leetcode hot100 50","text":"<p>2025.2.9</p>"},{"location":"leetcode-hot100-50/#_1","title":"\u4e8c\u5206\u67e5\u627e","text":"<p>\u4e0b\u9762\u7ed9\u51fa\u4e00\u822c\u5f62\u5f0f\u7684\u4e8c\u5206\u67e5\u627e\uff1a</p> <pre><code>def bin_search(nums, target):\n    l, r = 0, len(nums) - 1\n    while l &lt;= r: # == \u4e0d\u53ef\u5220\u53bb\uff0c\u521d\u59cb\u72b6\u6001\u53ef\u80fd\u4e3a l == r\uff1b\u6216\u8005\u5047\u8bbe r \u5904\u6ee1\u8db3\uff0cl \u4e0d\u65ad\u903c\u8fd1\u521a\u521a\u9760\u8fd1 r ...\n        mid = l + (r - l) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] &lt; target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n</code></pre> <p>\u6269\u5c55\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u51fd\u6570\uff1a</p> <pre><code>def lower_bound(nums, target):\n    l, r = 0, len(nums) - 1\n    while l &lt;= r:\n        mid = l + (r - l) // 2\n        if nums[mid] &lt; target:\n            l = mid + 1\n        else: # include nums[mid] == target\n            r = mid - 1\n    return l\n</code></pre> <p><code>lower_bound</code> \u51fd\u6570\u7ed3\u675f\u65f6\uff0c<code>l</code>\uff0c<code>r</code>\u6307\u9488\u6ee1\u8db3 <code>r = l + 1</code> and <code>nums[r] &lt; target &lt; nums[l]</code></p> <p><code>lower_bound</code> \u51fd\u6570\u53ef\u62d3\u5c55\u4e3a\uff1a</p> <pre><code>'''\n    \u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u63d2\u5165\u4f4d\u7f6e\n    satisfy: \u5224\u65ad\u6761\u4ef6\u7684\u51fd\u6570\n'''\ndef lower_bound_general(nums, satisfy):\n    l, r = 0, len(nums) - 1\n    while l &lt;= r:\n        mid = l + (r - l) // 2\n        if not satisfy(nums[mid]):\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n\ndef lower_bound_general(nums, satisfy):\n    l, r = 0, len(nums) - 1\n    while l &lt;= r:\n        mid = l + (r - l) // 2\n        if satisfy(nums[mid]):\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n</code></pre> <p>\u5173\u952e\u5728\u4e8e\uff0c\u5047\u8bbe\u6570\u7ec4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u53f3\u4fa7\uff0c\u548c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5de6\u4fa7</p> <p>\u5982\u679c\u5728 <code>l == r</code> \u65f6\u505c\u6b62\u5faa\u73af\uff0c<code>l == r</code> \u53ef\u80fd\u5728\u5206\u754c\u7ebf\u5de6\uff0c\u4e5f\u53ef\u80fd\u5728\u5206\u89e3\u7ebf\u53f3\u3002\u56e0\u6b64\u518d\u5faa\u73af\u4e00\u6b21\uff0c\u8fd9\u5c06\u5bfc\u81f4<code>r</code>\uff0c<code>l</code>\u4ea4\u9519\uff0c\u4e14\u5206\u754c\u7ebf\u5728\u4e24\u8005\u4e4b\u95f4</p> <p>\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e09\u5206\uff0c\u4e09\u5206\u65f6\u5c31\u662f<code>bin_search</code>\u4e86</p> <p>python\u5e93\u4e2d\u4e5f\u6709\u4e8c\u5206\u67e5\u627emodule\uff1a https://docs.python.org/3/library/bisect.html</p>"},{"location":"leetcode-hot100-50/#35","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":"<p>\u82e5\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de\u63d2\u5165\u4f4d\u7f6e</p> <pre><code>class Solution:\n    def searchInsert(self, nums: List[int], target: int) -&gt; int:\n        l, r = 0, len(nums) - 1\n        while l &lt;= r: \n            mid = l + (r - l) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] &lt; target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l\n</code></pre>"},{"location":"leetcode-hot100-50/#74","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":"<p>\u4e24\u6b21\u4e8c\u5206\uff08\u6216\u901a\u8fc7\u53d6\u6a21\u8fd0\u7b97\u5408\u5e76\u4e3a\u4e00\u6b21\u4e8c\u5206\uff09</p> <pre><code>    def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        # search row\n        l = 0\n        r = len(matrix) - 1\n        while l &lt;= r:\n            mid = (l + r) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] &gt; target:\n                r = mid - 1\n            else:\n                l = mid + 1\n        row = matrix[r]\n        # search num\n        l = 0\n        r = len(row) - 1\n        while l &lt;= r:\n            mid = (l + r) // 2\n            if row[mid] == target:\n                return True\n            elif row[mid] &gt; target:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return False\n</code></pre> <pre><code>    def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = -1, m * n\n        while left + 1 &lt; right:\n            mid = (left + right) // 2\n            x = matrix[mid // n][mid % n]\n            if x == target:\n                return True\n            if x &lt; target:\n                left = mid\n            else:\n                right = mid\n        return False\n</code></pre>"},{"location":"leetcode-hot100-50/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<ol> <li>\u521d\u59cb\u60f3\u6cd5\uff0c\u5148\u627e\u5230\u4e00\u4e2a\uff0c\u7136\u540e\u5411\u4e24\u8fb9\u62d3\u5c55</li> </ol> <pre><code>    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        def findone():\n            l = 0\n            r = len(nums) - 1\n            while l &lt;= r:\n                mid = (l + r) // 2\n                if nums[mid] == target:\n                    return mid\n                elif nums[mid] &lt; target:\n                    l = l + 1\n                else:\n                    r = r - 1\n            return -1\n        pos = findone()\n        if pos == -1:\n            return [-1, -1]\n        l, r = pos, pos \n        while l - 1 &gt;= 0 and nums[l - 1] == target:\n            l = l - 1\n        while r + 1 &lt; len(nums) and nums[r + 1] == target:\n            r = r + 1\n        return [l, r]\n</code></pre> <ol> <li>\u4f46\u5176\u5b9e\u4e0d\u5fc5\u5982\u6b64</li> </ol> <pre><code>class Solution:\n    def lower_bound(self, nums: List[int], target: int) -&gt; int:\n        left, right = 0, len(nums) - 1 \n        while left &lt;= right:\n            mid = (left + right) // 2\n            if nums[mid] &gt;= target:\n                right = mid - 1\n            else:\n                left = mid + 1 \n        return left\n\n    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        start = self.lower_bound(nums, target)\n        if start == len(nums) or nums[start] != target:\n            return [-1, -1]\n        end = self.lower_bound(nums, target + 1) - 1\n        return [start, end]\n</code></pre>"},{"location":"leetcode-hot100-50/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0c<code>nums</code> \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 <code>k</code>\uff08<code>0 &lt;= k &lt; nums.length</code>\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>\uff08\u4e0b\u6807 \u4ece 0 \u5f00\u59cb \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c <code>[0,1,2,4,5,6,7]</code> \u5728\u4e0b\u6807 <code>3</code> \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a <code>[4,5,6,7,0,1,2]</code> \u3002</p> <p>\u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>target</code> \uff0c\u5982\u679c <code>nums</code> \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c <code>target</code> \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de <code>-1</code> \u3002</p> <pre><code>    def search(self, nums: List[int], target: int) -&gt; int:\n        # find rotate index\n        l = 0\n        r = len(nums) - 1\n        while l &lt;= r:\n            mid = (l + r) // 2\n            if nums[mid] &lt; nums[0]:\n                r = mid - 1\n            else: # small\n                l = mid + 1\n        rotate = l\n        l = 0\n        r = len(nums) - 1\n        while l &lt;= r:\n            mid = (l + r) // 2\n            if nums[(mid + rotate) % len(nums)] == target:\n                return (mid + rotate) % len(nums)\n            elif nums[(mid + rotate) % len(nums)] &gt; target:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return -1\n</code></pre>"},{"location":"leetcode-hot100-50/#153","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<pre><code>    def findMin(self, nums: List[int]) -&gt; int:\n        l = 0\n        r = len(nums) - 1\n        while l &lt;= r:\n            mid = (l + r) // 2\n            if nums[mid] &lt; nums[0]:\n                r = mid - 1\n            else:\n                l = mid + 1\n        if l == len(nums):\n            return nums[0]\n        else:\n            return nums[l]\n</code></pre>"},{"location":"leetcode-hot100-50/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":"<p>\u672c\u9898\u5c31\u4e0d\u662f\u51e1\u4eba\u80fd\u591f\u9a7e\u9a6d\u7684\u4e86</p>"},{"location":"leetcode-hot100-50/#_2","title":"\u6808","text":""},{"location":"leetcode-hot100-50/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<pre><code>    def isValid(self, s: str) -&gt; bool:\n        matchs = {\n            ')' :'(',\n            '}' :'{',\n            ']' :'[',\n            '(' :'x',\n            '{' :'x',\n            '[' :'x',\n        }\n        stack = []\n        for c in s:\n            if len(stack) == 0:\n                stack.append(c)\n            elif stack[-1] == matchs[c]:\n                stack.pop()\n            else:\n                stack.append(c)\n        return len(stack) == 0\n</code></pre>"},{"location":"leetcode-hot100-50/#155","title":"155. \u6700\u5c0f\u6808","text":"<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 <code>push</code> \uff0c<code>pop</code> \uff0c<code>top</code> \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002</p> <p>\u4e00\u4e2astack\uff0c\u4e00\u4e2a\u6392\u5e8f\u597d\u7684array\u5373\u53ef</p> <pre><code>class MinStack:\n\n    def __init__(self):\n        self.array = []\n        self.stack = []\n\n    def push(self, val: int) -&gt; None:\n        for i in range(len(self.array)):\n            if self.array[i] &gt; val:\n                self.array.insert(i, val)\n                break\n        if len(self.stack) == len(self.array):\n            self.array.append(val)\n        self.stack.append(val)\n\n    def pop(self) -&gt; None:\n        val = self.stack.pop()\n        self.array.remove(val)\n\n    def top(self) -&gt; int:\n        return self.stack[-1]\n\n    def getMin(self) -&gt; int:\n        return self.array[0]\n</code></pre> <p>\u4f46\u5176\u5b9e\u6709\u66f4\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u4fdd\u7559\u6700\u5c0f\u5143\u7d20\u5373\u53ef\uff1a</p> <pre><code>class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = [math.inf]\n\n    def push(self, x: int) -&gt; None:\n        self.stack.append(x)\n        self.min_stack.append(min(x, self.min_stack[-1]))\n\n    def pop(self) -&gt; None:\n        self.stack.pop()\n        self.min_stack.pop()\n\n    def top(self) -&gt; int:\n        return self.stack[-1]\n\n    def getMin(self) -&gt; int:\n        return self.min_stack[-1]\n</code></pre>"},{"location":"leetcode-hot100-50/#394","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801","text":"<p>\u9012\u5f52\u89e3\u7801\u3002\u7528\u6808\u5904\u7406\u62ec\u53f7\u5339\u914d\u95ee\u9898\u3002</p> <pre><code>    def decodeString(self, s: str) -&gt; str:\n        res = \"\"\n        i = 0\n        while i &lt; len(s):\n            if s[i].isdigit():\n                # num\n                num = \"\"\n                while s[i] != '[':\n                    num += s[i]\n                    i += 1\n                # repeat\n                i += 1\n                inners = \"\"\n                cl_sk = ['[']\n                while len(cl_sk) != 0:\n                    if s[i] == '[':\n                        cl_sk.append('[')\n                        inners += s[i]\n                    elif s[i] == ']':\n                        cl_sk.pop()\n                        if len(cl_sk) != 0:\n                            inners += s[i]\n                    else:\n                        inners += s[i]\n                    i += 1 \n                res += int(num) * self.decodeString(inners)\n            else:\n                res += s[i]\n                i += 1\n        return res\n</code></pre>"},{"location":"leetcode-hot100-50/#739","title":"739. \u6bcf\u65e5\u6e29\u5ea6","text":"<p>\u4e0b\u4e00\u6b21\u66f4\u9ad8\u6e29\u5ea6\u3002\u5355\u8c03\u6808\u3002</p> <pre><code>    def dailyTemperatures(self, temperatures: List[int]) -&gt; List[int]:\n        stk = []\n        higher = [0 for _ in range(len(temperatures))]\n        for i in range(len(temperatures)):\n            while len(stk) != 0 and temperatures[stk[-1]] &lt; temperatures[i]:\n                idx = stk.pop()\n                higher[idx] = i - idx\n            stk.append(i)\n        for i in stk:\n            higher[i] = 0\n        return higher\n</code></pre>"},{"location":"leetcode-hot100-50/#84","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62","text":"<p>\u66b4\u529b\u5f88\u5bb9\u6613\u60f3\u5230\u3002\u4f46\u5355\u8c03\u6808\u7684\u7528\u6cd5\u771f\u662f\u795e\u6765\u4e00\u7b14\u3002\u5173\u952e\u5728\u4e8e\u5224\u65ad\u6e05\u695a\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u8ba1\u7b97\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u3002</p> <pre><code>class Solution:\n    def largestRectangleArea(self, heights: List[int]) -&gt; int:\n        stack = []\n        heights = [0] + heights + [0]\n        res = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] &gt; heights[i]:\n                tmp = stack.pop()\n                res = max(res, (i - stack[-1] - 1) * heights[tmp])\n            stack.append(i)\n        return res\n</code></pre>"},{"location":"leetcode-hot100-50/#_3","title":"\u5806","text":"<p>\u9996\u5148\uff0c\u5806\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>class MinHeap:\n    def __init__(self, arr=None):\n        if arr is None:\n            self.heap = []\n        else:\n            self.heap = arr\n            self._heapify()\n\n    def _left(self, i):\n        return 2 * i + 1\n\n    def _right(self, i):\n        return 2 * i + 2\n\n    def _parent(self, i):\n        return (i - 1) // 2\n\n    def _swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n\n    def _heapify_down(self, i):\n        left, right = self._left(i), self._right(i)\n        smallest = i\n        if left &lt; len(self.heap) and self.heap[left] &lt; self.heap[smallest]:\n            smallest = left\n        if right &lt; len(self.heap) and self.heap[right] &lt; self.heap[smallest]:\n            smallest = right\n        if smallest != i:\n            self._swap(i, smallest)\n            self._heapify_down(smallest)\n\n    def _heapify(self):\n        for i in range(len(self.heap) // 2 - 1, -1, -1):\n            self._heapify_down(i)\n\n    def push(self, item):\n        self.heap.append(item)\n        i = len(self.heap) - 1\n        while i &gt; 0 and self.heap[self._parent(i)] &gt; self.heap[i]:\n            self._swap(i, self._parent(i))\n            i = self._parent(i)\n\n    def pop(self):\n        if not self.heap:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        root = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapify_down(0)\n        return root\n\n    def peek(self):\n        return self.heap[0] if self.heap else None\n</code></pre>"},{"location":"leetcode-hot100-50/#215-k","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","text":"<p>\u57fa\u672c\u5feb\u6392\uff1a</p> <pre><code>class Solution:\n    def findKthLargest(self, nums, k):\n        def quickselect(l, r):\n            def partition(piv_idx):\n                nums[r], nums[piv_idx] = nums[piv_idx], nums[r]\n                lt = l\n                for i in range(l, r):\n                    if nums[i] &gt; nums[r]:\n                        nums[lt], nums[i] = nums[i], nums[lt]\n                        lt += 1\n                nums[r], nums[lt] = nums[lt], nums[r]\n                return lt\n\n            piv_idx = partition(random.randint(l, r))\n\n            if piv_idx == k - 1:\n                return nums[piv_idx]\n            elif k &lt;= piv_idx:\n                return quickselect(l, piv_idx - 1)\n            else:\n                return quickselect(piv_idx + 1, r)\n\n        return quickselect(0, len(nums) - 1)\n</code></pre> <p>\u5feb\u901f\u9009\u62e9\u3002\uff08\u91c7\u53d6\u4e09\u8def\u5212\u5206\uff0c\u5904\u7406\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5\uff09</p> <pre><code>class Solution:\n    def findKthLargest(self, nums, k):\n        def quickselect(l, r):\n            def three_way_partition(piv_idx):\n                nums[r], nums[piv_idx] = nums[piv_idx], nums[r]\n                pivot = nums[r]\n                i = l\n                lt = l\n                gt = r\n                while i &lt; gt:\n                    if nums[i] &gt; pivot:\n                        nums[i], nums[lt] = nums[lt], nums[i]\n                        i += 1\n                        lt += 1\n                    elif nums[i] &lt; pivot:\n                        gt -= 1\n                        nums[i], nums[gt] = nums[gt], nums[i]\n                    else:\n                        i += 1\n                nums[gt], nums[r] = nums[r], nums[gt]\n                return lt, gt\n\n            piv_idx = random.randint(l, r)\n            lt, gt = three_way_partition(piv_idx)\n            if lt &lt;= k - 1 &lt;= gt:\n                return nums[lt]\n            elif k - 1 &lt; lt:\n                return quickselect(l, lt - 1)\n            else:\n                return quickselect(gt + 1, r)\n\n        return quickselect(0, len(nums) - 1)\n</code></pre> <pre><code>def findKthLargest(nums, k):\n    def quickSelect(left, right, k_smallest):\n        if left == right:\n            return nums[left]\n\n        # \u968f\u673a\u9009\u62e9\u57fa\u51c6\u5143\u7d20\n        pivot_index = random.randint(left, right)\n        pivot = nums[pivot_index]\n\n        # \u521d\u59cb\u5316\u4e09\u4e2a\u6307\u9488\n        lt = left  # \u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u533a\u57df\u7684\u53f3\u8fb9\u754c\n        gt = right  # \u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u533a\u57df\u7684\u5de6\u8fb9\u754c\n        i = left  # \u5f53\u524d\u904d\u5386\u7684\u5143\u7d20\u7684\u7d22\u5f15\n\n        while i &lt;= gt:\n            if nums[i] &lt; pivot:\n                # \u5c06\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u4ea4\u6362\u5230\u5de6\u8fb9\n                nums[lt], nums[i] = nums[i], nums[lt]\n                lt += 1\n                i += 1\n            elif nums[i] &gt; pivot:\n                # \u5c06\u5927\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u4ea4\u6362\u5230\u53f3\u8fb9\n                nums[i], nums[gt] = nums[gt], nums[i]\n                gt -= 1\n            else:\n                # \u7b49\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u4fdd\u6301\u5728\u4e2d\u95f4\n                i += 1\n\n        # \u6839\u636e k_smallest \u4e0e\u5c0f\u4e8e\u3001\u7b49\u4e8e\u57fa\u51c6\u5143\u7d20\u533a\u57df\u7684\u4f4d\u7f6e\u5173\u7cfb\u7ee7\u7eed\u67e5\u627e\n        if k_smallest &lt; lt:\n            return quickSelect(left, lt - 1, k_smallest)\n        elif k_smallest &lt;= gt:\n            return nums[k_smallest]\n        else:\n            return quickSelect(gt + 1, right, k_smallest)\n\n    # \u7b2c k \u5927\u7684\u5143\u7d20\u5c31\u662f\u7b2c n - k \u5c0f\u7684\u5143\u7d20\n    return quickSelect(0, len(nums) - 1, len(nums) - k)\n</code></pre> <p>\u540c\u65f6\u4e5f\u6709\u7b80\u5355\u7684\u975e\u539f\u5730\u5b9e\u73b0\uff1a</p> <pre><code>class Solution:\n    def findKthLargest(self, nums, k):\n        def quick_select(nums, k):\n            # \u968f\u673a\u9009\u62e9\u57fa\u51c6\u6570\n            pivot = random.choice(nums)\n            big, equal, small = [], [], []\n            # \u5c06\u5927\u4e8e\u3001\u5c0f\u4e8e\u3001\u7b49\u4e8e pivot \u7684\u5143\u7d20\u5212\u5206\u81f3 big, small, equal \u4e2d\n            for num in nums:\n                if num &gt; pivot:\n                    big.append(num)\n                elif num &lt; pivot:\n                    small.append(num)\n                else:\n                    equal.append(num)\n            if k &lt;= len(big):\n                # \u7b2c k \u5927\u5143\u7d20\u5728 big \u4e2d\uff0c\u9012\u5f52\u5212\u5206\n                return quick_select(big, k)\n            if len(nums) - len(small) &lt; k:\n                # \u7b2c k \u5927\u5143\u7d20\u5728 small \u4e2d\uff0c\u9012\u5f52\u5212\u5206\n                return quick_select(small, k - len(nums) + len(small))\n            # \u7b2c k \u5927\u5143\u7d20\u5728 equal \u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de pivot\n            return pivot\n\n        return quick_select(nums, k)\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u6700\u5c0f\u5806\uff1a</p> <pre><code>def findKthLargest(nums, k):\n    # \u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u53ea\u7ef4\u62a4 k \u4e2a\u6700\u5927\u7684\u5143\u7d20\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) &gt; k:\n            heapq.heappop(heap)\n    return heap[0]\n</code></pre>"},{"location":"leetcode-hot100-50/#347-k","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20","text":"<p>\u5b9e\u73b0\u4e00\u4e2a\u5806\u5373\u53ef</p> <pre><code>class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:\n        kk = k # alert!!!!\n        freq = {}\n        for n in nums:\n            if not n in freq:\n                freq[n] = 0\n            freq[n] += 1\n        rev = {}\n        for k, v in freq.items():\n            if not v in rev:\n                rev[v] = []\n            rev[v].append(k)\n\n        freqs = list(freq.values()) \n        # parent of k = (k - 1) / 2\n        # left son = 2k + 1; right son = 2k + 2\n        def heapfy(hp: List[int], i: int):\n            cur = i\n            while True:\n                ls = 2 * cur + 1\n                rs = 2 * cur + 2\n                if ls &gt;= len(hp):\n                    break\n                if rs &gt;= len(hp):\n                    if hp[ls] &gt; hp[cur]:\n                        hp[ls], hp[cur] = hp[cur], hp[ls]\n                        cur = ls\n                        continue\n                else:\n                    son = ls\n                    maxv = hp[ls]\n                    if hp[rs] &gt; hp[ls]:\n                        son = rs\n                        maxv = hp[rs] \n                    else:\n                        son = ls\n                        maxv = hp[ls] \n                    if maxv &gt; hp[cur]:\n                        hp[son], hp[cur] = hp[cur], hp[son]\n                        cur = son\n                        continue\n                break\n        def build_heap(hp: List[int]):\n            for i in reversed(range(0, int(len(hp) / 2))):\n                heapfy(hp, i)\n        def pop(hp: List[int]) -&gt; int:\n            hp[0], hp[len(hp) - 1] = hp[len(hp) - 1] , hp[0]\n            ret = hp.pop()\n            heapfy(hp, 0)\n            return ret\n\n        build_heap(freqs)\n\n        res = []\n        for _ in range(kk):\n            freq = pop(freqs)\n            ele = rev[freq].pop()\n            res.append(ele)\n        return res\n</code></pre> <p>\u4f18\u5316\u4e3a\uff1a</p> <pre><code>import heapq\nfrom collections import Counter\ndef topKFrequent(nums, k):\n    # \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u9891\u7387\n    count = Counter(nums)\n    # \u521d\u59cb\u5316\u6700\u5c0f\u5806\n    heap = []\n    for num, freq in count.items():\n        # \u5c06\u5143\u7d20\u53ca\u5176\u9891\u7387\u52a0\u5165\u5806\u4e2d\n        heapq.heappush(heap, (freq, num))\n        if len(heap) &gt; k:\n            # \u5f53\u5806\u7684\u5927\u5c0f\u8d85\u8fc7 k \u65f6\uff0c\u5f39\u51fa\u5806\u9876\u5143\u7d20\n            heapq.heappop(heap)\n    # \u53d6\u51fa\u5806\u4e2d\u7684\u5143\u7d20\n    return [item[1] for item in heap]\n</code></pre> <p>\u6392\u5e8f\u4e5f\u4e0d\u4f1a\u5bf9\u590d\u6742\u5ea6\u5f71\u54cd\u592a\u591a\uff1a</p> <pre><code>def topKFrequent(nums, k):\n    # \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u9891\u7387\n    count = Counter(nums)\n    # \u6309\u7167\u9891\u7387\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\n    sorted_items = sorted(count.items(), key=lambda item: item[1], reverse=True)\n    # \u53d6\u51fa\u524d k \u4e2a\u5143\u7d20\n    return [item[0] for item in sorted_items[:k]]\n</code></pre> <p>\u66f4\u4f18\u5316\u7684\u662f\u6876\u6392\u5e8f\uff1a\uff08\u9891\u7387\u8303\u56f4\u5df2\u77e5\uff09</p> <pre><code>def topKFrequent(nums, k):\n    # \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u9891\u7387\n    count = Counter(nums)\n    # \u521b\u5efa\u6876\uff0c\u6876\u7684\u7d22\u5f15\u8868\u793a\u9891\u7387\uff0c\u6876\u4e2d\u5b58\u50a8\u5bf9\u5e94\u9891\u7387\u7684\u5143\u7d20\n    buckets = [[] for _ in range(len(nums) + 1)]\n    for num, freq in count.items():\n        buckets[freq].append(num)\n    # \u4ece\u9891\u7387\u9ad8\u7684\u6876\u5f00\u59cb\u53d6\u51fa\u5143\u7d20\n    result = []\n    for i in range(len(buckets) - 1, -1, -1):\n        if buckets[i]:\n            result.extend(buckets[i])\n            if len(result) &gt;= k:\n                break\n    return result[:k]\n</code></pre>"},{"location":"leetcode-hot100-50/#295","title":"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","text":"<p>\u7ef4\u62a4\u4e24\u4e2a\u5806\u5373\u53ef</p> <pre><code>class MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []        \n\n    def addNum(self, num: int) -&gt; None:\n        if len(self.min_heap) == 0 or self.min_heap[0] &lt; num:\n            heapq.heappush(self.min_heap, num)\n        else:\n            heapq.heappush(self.max_heap, -num)\n        while len(self.min_heap) &lt; len(self.max_heap):\n            maxh = -self.max_heap[0]\n            heapq.heappop(self.max_heap)\n            heapq.heappush(self.min_heap, maxh)\n        while len(self.min_heap) &gt; len(self.max_heap) + 1:\n            minh = self.min_heap[0]\n            heapq.heappop(self.min_heap)\n            heapq.heappush(self.max_heap, -minh)\n\n    def findMedian(self) -&gt; float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (self.min_heap[0] - self.max_heap[0])/ 2\n        else:\n            return self.min_heap[0]\n</code></pre>"},{"location":"leetcode-hot100-50/#_4","title":"\u8d2a\u5fc3","text":""},{"location":"leetcode-hot100-50/#121","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>prices</code> \uff0c\u5b83\u7684\u7b2c <code>i</code> \u4e2a\u5143\u7d20 <code>prices[i]</code> \u8868\u793a\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de <code>0</code> </p> <p>\u5c31\u662f\u6c42\u6700\u5927\u7684\u4e24\u5929\u5dee</p> <pre><code>    def maxProfit(self, prices: List[int]) -&gt; int:\n        if prices == []:\n            return 0\n        min_p = prices[0]\n        benifits = [0]\n        for p in prices[1:]:\n            min_p = min(min_p, p)\n            benifits.append(p - min_p)\n        return max(benifits)\n</code></pre>"},{"location":"leetcode-hot100-50/#55","title":"55. \u8df3\u8dc3\u6e38\u620f","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684 \u7b2c\u4e00\u4e2a\u4e0b\u6807 \u3002\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p> <p>\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u4e0d\u65ad\u62d3\u5c55farest\u6307\u9488...</p> <pre><code>    def canJump(self, nums: List[int]) -&gt; bool:\n        farest = 0\n        for i, step in enumerate(nums):\n            if farest &lt; i:\n                return False\n            farest = max(farest, i + step)\n        return True\n</code></pre>"},{"location":"leetcode-hot100-50/#45-ii","title":"45. \u8df3\u8dc3\u6e38\u620f II","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684 0 \u7d22\u5f15\u6574\u6570\u6570\u7ec4 <code>nums</code>\u3002\u521d\u59cb\u4f4d\u7f6e\u4e3a <code>nums[0]</code>\u3002</p> <p>\u6bcf\u4e2a\u5143\u7d20 <code>nums[i]</code> \u8868\u793a\u4ece\u7d22\u5f15 <code>i</code> \u5411\u540e\u8df3\u8f6c\u7684\u6700\u5927\u957f\u5ea6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4f60\u5728 <code>nums[i]</code> \u5904\uff0c\u4f60\u53ef\u4ee5\u8df3\u8f6c\u5230\u4efb\u610f <code>nums[i + j]</code> \u5904:</p> <ul> <li><code>0 &lt;= j &lt;= nums[i]</code> </li> <li><code>i + j &lt; n</code></li> </ul> <p>\u8fd4\u56de\u5230\u8fbe <code>nums[n - 1]</code> \u7684\u6700\u5c0f\u8df3\u8dc3\u6b21\u6570\u3002\u751f\u6210\u7684\u6d4b\u8bd5\u7528\u4f8b\u53ef\u4ee5\u5230\u8fbe <code>nums[n - 1]</code>\u3002</p> <p>\u904d\u5386\u6570\u7ec4\u65f6\u4e0d\u65ad\u66f4\u65b0\u5230\u8fbe\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u6570\u5373\u53ef</p> <p>\u4e5f\u53ef\u4ee5...</p> <pre><code>    def jump(self, nums: List[int]) -&gt; int:\n        if len(nums) == 1:\n            return 0\n        cur = 0\n        farest = nums[0]\n        step = 1\n        while True:\n            if farest &gt;= len(nums) - 1:\n                return step\n            for i in range(cur, farest + 1):\n                if i + nums[i] &gt; farest:\n                    cur = i\n                    farest = i + nums[i] \n            step += 1\n</code></pre>"},{"location":"leetcode-hot100-50/#763","title":"763. \u5212\u5206\u5b57\u6bcd\u533a\u95f4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u3002\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5212\u5206\u4e3a\u5c3d\u53ef\u80fd\u591a\u7684\u7247\u6bb5\uff0c\u540c\u4e00\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\u3002</p> <p>\u6ce8\u610f\uff0c\u5212\u5206\u7ed3\u679c\u9700\u8981\u6ee1\u8db3\uff1a\u5c06\u6240\u6709\u5212\u5206\u7ed3\u679c\u6309\u987a\u5e8f\u8fde\u63a5\uff0c\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4ecd\u7136\u662f <code>s</code> \u3002</p> <p>\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7247\u6bb5\u7684\u957f\u5ea6\u7684\u5217\u8868\u3002</p> <p>\u4ece\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8d77\u4e0d\u65ad\u62d3\u5c55\u5373\u53ef</p> <pre><code>    def partitionLabels(self, s: str) -&gt; List[int]:\n        # smart! use a pre-compute table to avoid repeat computation\n        last = {}\n        for i, c in enumerate(s):\n            last[c] = i\n        res = []\n        start = 0\n        while start &lt; len(s):\n            end = last[s[start]]\n            scan = start + 1\n            while scan &lt; end:\n                end = max(last[s[scan]], end)\n                scan += 1\n            # res.append(s[start:end + 1])\n            res.append(end - start + 1)\n            start = end + 1\n        return res\n</code></pre>"},{"location":"leetcode-hot100-50/#_5","title":"\u6280\u5de7","text":""},{"location":"leetcode-hot100-50/#136","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002</p> <p>\u5f02\u6216</p> <pre><code>    def singleNumber(self, nums: List[int]) -&gt; int:\n        return reduce(lambda x, y: x ^ y, nums)\n</code></pre>"},{"location":"leetcode-hot100-50/#169","title":"169. \u591a\u6570\u5143\u7d20","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>nums</code> \uff0c\u8fd4\u56de\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570 \u5927\u4e8e <code>\u230a n/2 \u230b</code> \u7684\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002</p> <p>\u8fdb\u9636\uff1a\u5c1d\u8bd5\u8bbe\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u4e00\u4e2a\u975e\u5e38\u795e\u5947\u7684\u7b97\u6cd5\u2014\u2014Boyer-Moore \u6295\u7968\u7b97\u6cd5</p> <pre><code>    def majorityElement(self, nums: List[int]) -&gt; int:\n        count = 0\n        candidate = None\n\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n\n        return candidate\n</code></pre>"},{"location":"leetcode-hot100-50/#75","title":"75. \u989c\u8272\u5206\u7c7b","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3001\u5171 <code>n</code> \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u539f\u5730 \u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u6574\u6570 <code>0</code>\u3001 <code>1</code> \u548c <code>2</code> \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002</p> <ul> <li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f</li> </ul> <p>\u4e24\u6b21\u53cc\u6307\u9488</p> <pre><code>    def sortColors(self, nums: List[int]) -&gt; None:\n        n = len(nums)\n        ptr = 0\n        for i in range(n):\n            if nums[i] == 0:\n                nums[i], nums[ptr] = nums[ptr], nums[i]\n                ptr += 1\n        for i in range(ptr, n):\n            if nums[i] == 1:\n                nums[i], nums[ptr] = nums[ptr], nums[i]\n                ptr += 1\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5206\u4e09\u8def\uff08\u4e0b\u9762\u7684\u505a\u6cd5\u8f83\u4e3a\u9ebb\u70e6\uff0c\u4e0d\u5982\u4ece\u4e24\u8fb9\u6307\u9488\u9760\u8fd1\uff09</p> <pre><code>class Solution:\n    def sortColors(self, nums: List[int]) -&gt; None:\n        n = len(nums)\n        p0 = p1 = 0\n        for i in range(n):\n            if nums[i] == 1:\n                nums[i], nums[p1] = nums[p1], nums[i]\n                p1 += 1\n            elif nums[i] == 0:\n                nums[i], nums[p0] = nums[p0], nums[i]\n                if p0 &lt; p1:\n                    nums[i], nums[p1] = nums[p1], nums[i]\n                p0 += 1\n</code></pre>"},{"location":"leetcode-hot100-50/#31","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u6574\u6570\u6570\u7ec4\u7684\u4e00\u4e2a \u6392\u5217 \u5c31\u662f\u5c06\u5176\u6240\u6709\u6210\u5458\u4ee5\u5e8f\u5217\u6216\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u3002</p> <ul> <li>\u4f8b\u5982\uff0c<code>arr = [1,2,3]</code> \uff0c\u4ee5\u4e0b\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u89c6\u4f5c <code>arr</code> \u7684\u6392\u5217\uff1a<code>[1,2,3]</code>\u3001<code>[1,3,2]</code>\u3001<code>[3,1,2]</code>\u3001<code>[2,3,1]</code> \u3002</li> </ul> <p>\u6574\u6570\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u662f\u6307\u5176\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002\u66f4\u6b63\u5f0f\u5730\uff0c\u5982\u679c\u6570\u7ec4\u7684\u6240\u6709\u6392\u5217\u6839\u636e\u5176\u5b57\u5178\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u5c31\u662f\u5728\u8fd9\u4e2a\u6709\u5e8f\u5bb9\u5668\u4e2d\u6392\u5728\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u6392\u5217\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u91cd\u6392\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\uff0c\u5176\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5217\uff09\u3002</p> <ul> <li>\u4f8b\u5982\uff0c<code>arr = [1,2,3]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[1,3,2]</code> \u3002</li> <li>\u7c7b\u4f3c\u5730\uff0c<code>arr = [2,3,1]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[3,1,2]</code> \u3002</li> <li>\u800c <code>arr = [3,2,1]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[1,2,3]</code> \uff0c\u56e0\u4e3a <code>[3,2,1]</code> \u4e0d\u5b58\u5728\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa <code>nums</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u3002</p> <p>\u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p> <p>\u753b\u56fe\u641e\u6e05\u695a\u610f\u601d\uff1a</p> <p></p> <pre><code>    def nextPermutation(self, nums: List[int]) -&gt; None:\n        i = len(nums) - 2\n        # \u5bfb\u627e\u7b2c\u4e00\u5bf9\u9006\u5e8f\n        while i &gt;= 0 and nums[i] &gt;= nums[i + 1]:\n            i -= 1\n        # \u627e\u7b2c\u4e00\u4e2a\u6bd4nums[i]\u5927\u7684nums[j]\uff08\u6700\u5c0f\u7684\uff09\n        if i &gt;= 0:\n            j = len(nums) - 1\n            while j &gt;= 0 and nums[i] &gt;= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n        # \u987a\u5e8f\u53d8\u6362\n        left, right = i + 1, len(nums) - 1\n        while left &lt; right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n</code></pre>"},{"location":"leetcode-hot100-50/#287","title":"287. \u5bfb\u627e\u91cd\u590d\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <code>n + 1</code> \u4e2a\u6574\u6570\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u5176\u6570\u5b57\u90fd\u5728 <code>[1, n]</code> \u8303\u56f4\u5185\uff08\u5305\u62ec <code>1</code> \u548c <code>n</code>\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002</p> <p>\u5047\u8bbe <code>nums</code> \u53ea\u6709 \u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570 \uff0c\u8fd4\u56de \u8fd9\u4e2a\u91cd\u590d\u7684\u6570 \u3002</p> <p>\u4f60\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b \u4e0d\u4fee\u6539 \u6570\u7ec4 <code>nums</code> \u4e14\u53ea\u7528\u5e38\u91cf\u7ea7 <code>O(1)</code> \u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u8fdb\u9636<code>O(n)\u65f6\u95f4</code></p> <p>\u51fa\u4e86\u8fd9\u9898\u5c31\u7b49\u7740\u6302\u5427x</p> <p>\u63d0\u793a\uff1a\u8f6c\u5316\u4e3a\u5feb\u6162\u6307\u9488\u5224\u65ad\u662f\u5426\u6709\u73af</p> <pre><code>    def findDuplicate(self, nums: List[int]) -&gt; int:\n        slow = 0\n        fast = 0\n\n        while True:\n            # fast \u524d\u8fdb\u4e24\u6b21\uff0cslow \u524d\u8fdb\u4e00\u6b21\n            fast = nums[fast]\n            fast = nums[fast]\n            slow = nums[slow]\n            if slow == fast:\n                break\n\n        # ptr == slow \u65f6\u8bf4\u660e\u68c0\u6d4b\u5230\u91cd\u590d\u5143\u7d20\uff0c\u4e24\u4e2a\u91cd\u590d\u5143\u7d20\u540c\u65f6\u6307\u5411\u73af\u7684\u5165\u53e3\u3002\n        ptr = 0\n        while ptr != slow:\n            ptr = nums[ptr]\n            slow = nums[slow]\n\n        return ptr\n</code></pre>"},{"location":"leetcode-hot100-77/","title":"Leetcode hot100 77","text":"<p>2025.2.11</p> <p>\u90e8\u5206\u4ee3\u7801\u6765\u81ea\u5b98\u65b9\u9898\u89e3</p>"},{"location":"leetcode-hot100-77/#_1","title":"\u4e8c\u53c9\u6811","text":"<p>\u4e8c\u53c9\u6811\u9898\u76ee\u4e00\u822c\u901a\u8fc7\u904d\u5386\uff08dfs \u548c bfs\uff09\u5373\u53ef\u6c42\u89e3\u3002</p> <p>\u5176\u4e2d\u7565\u5fae\u6709\u8da3\u7684\u9898\u76ee\u6709\uff1a</p> <ol> <li>101. \u5bf9\u79f0\u4e8c\u53c9\u6811</li> <li>\u6ce8\u610f\u5bf9\u79f0\u548c\u76f8\u7b49\u7684\u533a\u522b</li> <li>98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>\u6ce8\u610f\u6bcf\u6b21\u9012\u5f52\u65f6\u9700\u8981\u5224\u65ad\u5b57\u8282\u70b9\u503c\u662f\u5426\u5904\u4e8e\u67d0\u4e2a\u8303\u56f4</li> <li>\u4ee5\u53ca\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u5c31\u662f\u6709\u5e8f\u7684</li> <li>199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe</li> <li>\u5c42\u5e8f\u904d\u5386\u9700\u8981bfs</li> <li>236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148</li> <li>\u5176\u4ed6\u7684LCA\u7b97\u6cd5</li> </ol>"},{"location":"leetcode-hot100-77/#_2","title":"\u56fe\u8bba","text":"<p>\u540c\u4e8c\u53c9\u6811\u7b97\u6cd5\uff0c\u56fe\u7b97\u6cd5\u4e00\u822c\u5747\u53ef\u4ee5\u6709DFS\u548cBFS\u53d8\u5316\u5f97\u5230\u3002</p> <p>\u6709\u4ee5\u4e0b\u91cd\u70b9\u7b97\u6cd5\uff1a</p> <ol> <li>\u904d\u5386\u76f8\u5173</li> <li>MST\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09</li> <li>\u6700\u77ed\u8def\u5f84</li> <li>\u6700\u5927\u6d41\u6700\u5c0f\u5272</li> </ol> <p>\u4e0b\u9762\u53ea\u6d89\u53ca\u5230\u904d\u5386\u76f8\u5173\u7684\u7b97\u6cd5\u3002</p> <p>\u904d\u5386\u7b97\u6cd5\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4ee5\u4e0b\uff1a</p> <pre><code>WhateverFirstSearch(s):\n    put s into the bag\n    while the bag is not empty\n        take v from the bag\n        if v is unmarked\n            mark v\n        for each edge vw\n            put w into the bag\n</code></pre> <p>bag\u4e3astack -&gt; DFS</p> <p>bag\u4e3aqueue -&gt; BFS</p> <p>bag\u4e3a\u4f18\u5148\u961f\u5217 -&gt; \u67d0\u4e9b\u9002\u7528\u4e8e\u8d2a\u5fc3\u7b97\u6cd5\u7684\u6700\u4f18\u95ee\u9898\uff08\u5982Dijkstra\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\uff09</p> <p>\u4e0b\u9762\u4e24\u9898\u904d\u5386+\u6807\u8bb0\u5373\u53ef\u6c42\u89e3\uff1a</p> <p>200. \u5c9b\u5c7f\u6570\u91cf</p> <p>994. \u8150\u70c2\u7684\u6a58\u5b50</p> <p>\u4e0b\u9762\u4e00\u9898\u5b9e\u9645\u4e3a\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u6709\u73af\u3002\u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u3002</p> <p>207. \u8bfe\u7a0b\u8868</p> <p>\u4ee5\u53ca\u4e00\u4e2a\u5b9e\u73b0trie\u6811\u7684\u9898\uff1a 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)</p>"},{"location":"leetcode-hot100-77/#_3","title":"\u56de\u6eaf","text":"<p>\u56de\u6eaf\u7b97\u6cd5\u5373\u662f\u9012\u5f52\u904d\u5386\u65f6\u5bf9\u5168\u5c40\u72b6\u6001\u4e5f\u4e0d\u65ad\u4fee\u6539\uff0c\u4ee5\u7a77\u5c3d\u6240\u6709\u60c5\u51b5\u3002</p>"},{"location":"leetcode-hot100-77/#131","title":"131. \u5206\u5272\u56de\u6587\u4e32","text":"<p>\u53ef\u4ee5\u52a8\u6001\u89c4\u5212\u9884\u5904\u7406</p>"},{"location":"leetcode-hot100-77/#79","title":"79. \u5355\u8bcd\u641c\u7d22","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a <code>m x n</code> \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c <code>board</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd <code>word</code> \u3002\u5982\u679c <code>word</code> \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u5178\u578b\u7684\u56de\u6eaf\u505a\u6cd5\u53ef\u53c2\u8003\u672c\u9898\u3002</p> <pre><code>class Solution:\n    def exist(self, board: List[List[str]], word: str) -&gt; bool:\n        found = False\n        path = []\n\n        def backtrack(c, i, j):\n            nonlocal found\n            if board[i][j] != word[c]:\n                return\n            if c == len(word) - 1:\n                found = True\n                return\n            path.append((i, j))\n            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n            for di, dj in directions:\n                ni = i + di\n                nj = j + dj\n                if 0  &lt;= ni &lt; len(board) and 0 &lt;= nj &lt; len(board[0]):\n                    if not (ni, nj) in path:\n                        backtrack(c + 1, ni, nj)\n            path.pop()\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                backtrack(0, i, j)\n                if found:\n                    return True\n        return False\n</code></pre>"},{"location":"leetcode-hot100-77/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<p>\u672c\u9898\u6709\u4e00\u79cd\u7b80\u4fbf\u505a\u6cd5</p> <pre><code>class Solution:\n    def letterCombinations(self, digits: str) -&gt; List[str]:\n        if not digits:\n            return []\n        phoneMap = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n        return list(map(''.join, product(*(phoneMap[digit] for digit in digits))))\n</code></pre>"},{"location":"leetcode-tencent/","title":"Leetcode tencent","text":"<ol> <li>\u6700\u957f\u6709\u6548\u62ec\u53f7</li> <li>\u4e24\u6570\u76f8\u52a0</li> <li>\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32</li> <li>\u96f6\u94b1\u5151\u6362</li> <li> <p>\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570</p> </li> <li> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6392\u5e8f\u6570\u7ec4</p> </li> <li>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4</li> </ol>"},{"location":"leetcode-tencent/#546","title":"546. \u79fb\u9664\u76d2\u5b50","text":"<p>\u8fd9\u9898\u5728 Codeforces \u4e0a\u6709 2400 \u5206 CF1107E\uff0c\u6362\u7b97\u6210\u529b\u6263\u96be\u5ea6\u5206\u7684\u8bdd\u81f3\u5c11\u6709 3000\u3002</p> <p>https://codeforces.com/problemset/problem/1107/E</p> <p>\u672c\u9898\u53ef\u4ee5\u4f7f\u7528\u4e09\u7ef4\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u5b9a\u4e49\u72b6\u6001 <code>dp[i][j][k]</code> \u8868\u793a\u5728\u533a\u95f4 <code>[i, j]</code> \u5185\uff0c\u4e14\u5728 <code>boxes[i]</code> \u5de6\u8fb9\u6709 <code>k</code> \u4e2a\u4e0e <code>boxes[i]</code> \u989c\u8272\u76f8\u540c\u7684\u76d2\u5b50\u65f6\uff0c\u79fb\u9664\u8be5\u533a\u95f4\u5185\u6240\u6709\u76d2\u5b50\u80fd\u83b7\u5f97\u7684\u6700\u5927\u79ef\u5206...</p> <ol> <li>\u76f4\u63a5\u79fb\u9664 <code>boxes[i]</code> \u53ca\u5176\u5de6\u8fb9\u7684 <code>k</code> \u4e2a\u76f8\u540c\u989c\u8272\u7684\u76d2\u5b50\uff1a\u6b64\u65f6\u5148\u79fb\u9664 <code>boxes[i]</code> \u4ee5\u53ca\u5b83\u5de6\u8fb9\u7684 <code>k</code> \u4e2a\u76f8\u540c\u989c\u8272\u7684\u76d2\u5b50\uff0c\u83b7\u5f97 <code>(k + 1) * (k + 1)</code> \u79ef\u5206\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u533a\u95f4 <code>[i + 1, j]</code>\uff0c\u5373 <code>dp[i + 1][j][0]</code>\u3002</li> <li>\u5148\u79fb\u9664\u4e2d\u95f4\u7684\u76d2\u5b50\uff0c\u518d\u79fb\u9664 <code>boxes[i]</code> \u53ca\u5176\u5de6\u8fb9\u7684\u76f8\u540c\u989c\u8272\u7684\u76d2\u5b50\uff1a\u904d\u5386\u533a\u95f4 <code>[i + 1, j]</code>\uff0c\u627e\u5230\u4e0e <code>boxes[i]</code> \u989c\u8272\u76f8\u540c\u7684\u76d2\u5b50 <code>boxes[m]</code>\uff0c\u5148\u79fb\u9664\u533a\u95f4 <code>[i + 1, m - 1]</code> \u5185\u7684\u76d2\u5b50\uff0c\u83b7\u5f97 <code>dp[i + 1][m - 1][0]</code> \u79ef\u5206\uff0c\u7136\u540e\u5c06 <code>boxes[i]</code> \u4e0e <code>boxes[m]</code> \u5408\u5e76\uff0c\u7ee7\u7eed\u5904\u7406\u533a\u95f4 <code>[m, j]</code>\uff0c\u6b64\u65f6 <code>boxes[m]</code> \u5de6\u8fb9\u6709 <code>k + 1</code> \u4e2a\u4e0e\u5b83\u989c\u8272\u76f8\u540c\u7684\u76d2\u5b50\uff0c\u5373 <code>dp[m][j][k + 1]</code>\u3002</li> </ol> <pre><code>class Solution:\n    def removeBoxes(self, boxes: List[int]) -&gt; int:\n        @cache\n        def dfs(left: int, right: int, same: int) -&gt; int:\n            if left &gt; right:\n                return 0\n            res = dfs(left, right - 1, 0) + (same + 1) ** 2\n            for i in range(left, right):\n                if boxes[i] == boxes[right]:\n                    res = max(res, dfs(left, i, same + 1) + dfs(i + 1, right - 1, 0))\n            return res\n        return dfs(0, len(boxes) - 1, 0)\n</code></pre>"},{"location":"leetcode-tencent/#625","title":"625 \u6700\u5c0f\u56e0\u5f0f\u5206\u89e3","text":"<p>https://github.com/doocs/leetcode/blob/main/solution/0600-0699/0625.Minimum%20Factorization/README.md</p> <p>https://zhuanlan.zhihu.com/p/523712273</p> <p>https://zhuanlan.zhihu.com/p/602415886</p> <pre><code>class Solution:\n    def smallestFactorization(self, a: int) -&gt; int:\n        # \u5982\u679c a \u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8fd4\u56de a\n        if a &lt; 10:\n            return a\n        # \u7528\u4e8e\u5b58\u50a8\u5206\u89e3\u5f97\u5230\u7684\u6570\u5b57\n        factors = []\n        # \u4ece 9 \u5230 2 \u904d\u5386\uff0c\u5c1d\u8bd5\u5206\u89e3 a\n        for i in range(9, 1, -1):\n            while a % i == 0:\n                factors.append(i)\n                a //= i\n        # \u5982\u679c\u6700\u7ec8 a \u4ecd\u7136\u5927\u4e8e 1\uff0c\u8bf4\u660e\u65e0\u6cd5\u5206\u89e3\n        if a &gt; 1:\n            return 0\n        # \u5c06 factors \u5217\u8868\u4e2d\u7684\u6570\u5b57\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5e8f\n        factors.sort()\n        # \u5c06 factors \u5217\u8868\u4e2d\u7684\u6570\u5b57\u7ec4\u5408\u6210\u4e00\u4e2a\u6574\u6570\n        result = int(''.join(map(str, factors)))\n        # \u68c0\u67e5\u7ed3\u679c\u662f\u5426\u8d85\u51fa 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\n        if result &gt; 2**31 - 1:\n            return 0\n        return result\n</code></pre>"},{"location":"leetcode-tencent/#354","title":"354. \u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898","text":"<p>\u601d\u8def\u662f\u6709\u4e86\uff1a\u5148\u904d\u5386\u6784\u5efa\u6811\uff0c\u7136\u540e\u6c42\u6700\u5927\u6df1\u5ea6</p> <p>\u6784\u5efa\u6811\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ece\u6839\u90e8\u5f00\u59cb\u4e00\u76f4\u5224\u65ad\u5230\u5408\u9002\u7684leave</p> <p>\u6216\u8005...\u76f4\u63a5dfs...\u770b\u8d77\u6765\u53ef\u884c\uff1f\u4f46\u6709\u4e9bbug...</p> <pre><code>class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -&gt; int:\n        def insert_point(envs, e):\n            if len(envs) == 0:\n                return 0\n            l = 0\n            r = len(envs) - 1\n            while l &lt;= r:\n                mid = l + (r - l) // 2\n                if envs[mid][0] &gt; e[0] and envs[mid][1] &gt; e[1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            if l == 0 and not (envs[0][0] &lt; e[0] and envs[0][1] &lt; e[1]):\n                return -1\n            if l == len(envs) and not (envs[-1][0] &gt; e[0] and envs[-1][1] &gt; e[1]):\n                return -1\n            return l\n        def dfs(i, cur):\n            if i == len(envelopes):\n                return len(cur)\n            res = dfs(i + 1, cur)\n            e = envelopes[i]\n            p = insert_point(cur, e)\n            if p == -1:\n                return res\n            else:\n                cur = cur[:]\n                cur.insert(p, e)\n                return max(res, dfs(i + 1, cur))\n        return dfs(0, [])\n</code></pre> <p>\u770b\u770banswer\u5427</p> <p>\u6392\u5e8f\u5bbd\uff0c\u53ea\u6c42\u9ad8\uff0c\u4e0d\u5c31\u662f\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u5417...</p> <pre><code>class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -&gt; int:\n        if not envelopes:\n            return 0\n\n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n\n        f = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if envelopes[j][1] &lt; envelopes[i][1]:\n                    f[i] = max(f[i], f[j] + 1)\n\n        return max(f)\n</code></pre>"},{"location":"leetcode-tencent/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>\u7ecf\u5178\u8001\u9898\u4e86\uff0c\u4e00\u4e2a dummy node \u5373\u53ef\uff08\u73af\u5f62\u94fe\u8868\uff09</p> <pre><code>class Node:\n    # \u63d0\u9ad8\u8bbf\u95ee\u5c5e\u6027\u7684\u901f\u5ea6\uff0c\u5e76\u8282\u7701\u5185\u5b58\n    __slots__ = 'prev', 'next', 'key', 'value'\n\n    def __init__(self, key=0, value=0):\n        self.key = key\n        self.value = value\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dummy = Node()  # \u54e8\u5175\u8282\u70b9\n        self.dummy.prev = self.dummy\n        self.dummy.next = self.dummy\n        self.key_to_node = dict()\n\n    # \u83b7\u53d6 key \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u540c\u65f6\u628a\u8be5\u8282\u70b9\u79fb\u5230\u94fe\u8868\u5934\u90e8\n    def get_node(self, key: int) -&gt; Optional[Node]:\n        if key not in self.key_to_node:  # \u6ca1\u6709\u8fd9\u672c\u4e66\n            return None\n        node = self.key_to_node[key]  # \u6709\u8fd9\u672c\u4e66\n        self.remove(node)  # \u628a\u8fd9\u672c\u4e66\u62bd\u51fa\u6765\n        self.push_front(node)  # \u653e\u5728\u6700\u4e0a\u9762\n        return node\n\n    def get(self, key: int) -&gt; int:\n        node = self.get_node(key)\n        return node.value if node else -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        node = self.get_node(key)\n        if node:  # \u6709\u8fd9\u672c\u4e66\n            node.value = value  # \u66f4\u65b0 value\n            return\n        self.key_to_node[key] = node = Node(key, value)  # \u65b0\u4e66\n        self.push_front(node)  # \u653e\u5728\u6700\u4e0a\u9762\n        if len(self.key_to_node) &gt; self.capacity:  # \u4e66\u592a\u591a\u4e86\n            back_node = self.dummy.prev\n            del self.key_to_node[back_node.key]\n            self.remove(back_node)  # \u53bb\u6389\u6700\u540e\u4e00\u672c\u4e66\n\n    # \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff08\u62bd\u51fa\u4e00\u672c\u4e66\uff09\n    def remove(self, x: Node) -&gt; None:\n        x.prev.next = x.next\n        x.next.prev = x.prev\n\n    # \u5728\u94fe\u8868\u5934\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\uff08\u628a\u4e00\u672c\u4e66\u653e\u5728\u6700\u4e0a\u9762\uff09\n    def push_front(self, x: Node) -&gt; None:\n        x.prev = self.dummy\n        x.next = self.dummy.next\n        x.prev.next = x\n        x.next.prev = x\n</code></pre>"},{"location":"leetcode-zunxiang-19/","title":"Leetcode zunxiang 19","text":""},{"location":"leetcode-zunxiang-19/#_1","title":"\u6570\u7ec4/\u5b57\u7b26\u4e32","text":""},{"location":"leetcode-zunxiang-19/#624","title":"624. \u6570\u7ec4\u5217\u8868\u4e2d\u7684\u6700\u5927\u8ddd\u79bb","text":"<pre><code>class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -&gt; int:\n        ans = 0\n        mn, mx = inf, -inf\n        for a in arrays:\n            ans = max(ans, a[-1] - mn, mx - a[0])\n            mn = min(mn, a[0])\n            mx = max(mx, a[-1])\n        return ans\n</code></pre> <p>\u53ef\u4ee5\u7528\u9012\u63a8\u7684\u601d\u8def\u7406\u89e3</p>"},{"location":"leetcode-zunxiang-19/#280","title":"280. \u6446\u52a8\u6392\u5e8f","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code>, \u5c06\u8be5\u6570\u7ec4\u91cd\u65b0\u6392\u5e8f\u540e\u4f7f <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code> </p> <p>\u8f93\u5165\u6570\u7ec4\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165\uff1anums = [3,5,2,1,6,4]\n\u8f93\u51fa\uff1a[3,5,1,6,2,4]\n\u89e3\u91ca\uff1a[1,6,2,5,3,4]\u4e5f\u662f\u6709\u6548\u7684\u7b54\u6848\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165\uff1anums = [6,6,5,6,3,8]\n\u8f93\u51fa\uff1a[6,6,5,6,3,8]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li> <li><code>0 &lt;= nums[i] &lt;= 104</code></li> <li>\u8f93\u5165\u7684 <code>nums</code> \u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u7b54\u6848\u3002</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5728 <code>O(n)</code> \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p> <pre><code>class Solution:\n    def wiggleSort(self, nums: List[int]) -&gt; None:\n        nums.sort()\n        for i in range(1, len(nums) - 1, 2):\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n</code></pre> <p>\u8d2a\u5fc3\u505a\u6cd5\uff08\u9700\u8981\u4ed4\u7ec6\u89c2\u5bdf\u8fc7\u7a0b\uff09\uff1a</p> <pre><code>class Solution:\n    def wiggleSort(self, nums: List[int]) -&gt; None:\n        for i in range(len(nums) - 1):\n            if ((i % 2 == 0 and nums[i] &gt; nums[i + 1]) or \n                (i % 2 == 1 and nums[i] &lt; nums[i + 1])):\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n</code></pre>"},{"location":"leetcode-zunxiang-19/#1056","title":"1056. \u6613\u6df7\u6dc6\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57 <code>N</code>\uff0c\u5f53\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u65f6\u5019\u8fd4\u56de <code>true</code>\uff1a</p> <p>\u539f\u6570\u5b57\u65cb\u8f6c 180\u00b0 \u4ee5\u540e\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u6570\u5b57\u3002</p> <p>\u5982 0, 1, 6, 8, 9 \u65cb\u8f6c 180\u00b0 \u4ee5\u540e\uff0c\u5f97\u5230\u4e86\u65b0\u7684\u6570\u5b57 0, 1, 9, 8, 6 \u3002</p> <p>2, 3, 4, 5, 7 \u65cb\u8f6c 180\u00b0 \u540e\uff0c\u5f97\u5230\u7684\u4e0d\u662f\u6570\u5b57\u3002</p> <p>\u6613\u6df7\u6dc6\u6570 (confusing number) \u5728\u65cb\u8f6c180\u00b0\u4ee5\u540e\uff0c\u53ef\u4ee5\u5f97\u5230\u548c\u539f\u6765\u4e0d\u540c\u7684\u6570\uff0c\u4e14\u65b0\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u662f\u6709\u6548\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a6\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a \n\u628a 6 \u65cb\u8f6c 180\u00b0 \u4ee5\u540e\u5f97\u5230 9\uff0c9 \u662f\u6709\u6548\u6570\u5b57\u4e14 9!=6 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a89\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca: \n\u628a 89 \u65cb\u8f6c 180\u00b0 \u4ee5\u540e\u5f97\u5230 68\uff0c68 \u662f\u6709\u6548\u6570\u5b57\u4e14 89!=68 \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a11\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\n\u628a 11 \u65cb\u8f6c 180\u00b0 \u4ee5\u540e\u5f97\u5230 11\uff0c11 \u662f\u6709\u6548\u6570\u5b57\u4f46\u662f\u503c\u4fdd\u6301\u4e0d\u53d8\uff0c\u6240\u4ee5 11 \u4e0d\u662f\u6613\u6df7\u6dc6\u6570\u5b57\u3002 \n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a25\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\n\u628a 25 \u65cb\u8f6c 180\u00b0 \u4ee5\u540e\u5f97\u5230\u7684\u4e0d\u662f\u6570\u5b57\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ol> <li><code>0 &lt;= N &lt;= 10^9</code></li> <li>\u53ef\u4ee5\u5ffd\u7565\u6389\u65cb\u8f6c\u540e\u5f97\u5230\u7684\u524d\u5bfc\u96f6\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u65cb\u8f6c\u540e\u5f97\u5230 <code>0008</code> \u90a3\u4e48\u8be5\u6570\u5b57\u5c31\u662f <code>8</code> \u3002'</li> </ol> <p>\u7ffb\u8f6c\u662f\u65cb\u8f6c\u7684\u610f\u601d\uff01\uff01\uff01</p> <pre><code>class Solution:\n    def confusingNumber(self, n: int) -&gt; bool:\n        num = []\n        num_map = {'6': '9', '9': '6'}\n        for i in str(n):\n            if int(i) in [6, 9]:\n                num.append(num_map[i])\n            elif int(i) in [2, 3, 4, 5, 7]:\n                return False\n            else:\n                num.append(i)\n        if int(\"\".join(reversed(num))) == n:\n            return False\n        return True\n</code></pre>"},{"location":"leetcode-zunxiang-19/#1427","title":"1427. \u5b57\u7b26\u4e32\u7684\u5de6\u53f3\u79fb","text":""},{"location":"leetcode-zunxiang-19/#161-1","title":"161. \u76f8\u9694\u4e3a 1 \u7684\u7f16\u8f91\u8ddd\u79bb","text":""},{"location":"leetcode-zunxiang-19/#186-ii","title":"186. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd II","text":""},{"location":"leetcode-zunxiang-19/#1055","title":"1055. \u5f62\u6210\u5b57\u7b26\u4e32\u7684\u6700\u77ed\u8def\u5f84","text":""},{"location":"leetcode-zunxiang-19/#_2","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"leetcode-zunxiang-19/#_3","title":"\u54c8\u5e0c","text":""},{"location":"leetcode-zunxiang-36/","title":"Leetcode zunxiang 36","text":""},{"location":"leetcode-zunxiang-36/#_1","title":"\u8bbe\u8ba1","text":""},{"location":"leetcode-zunxiang-36/#_2","title":"\u56de\u6eaf","text":""},{"location":"leetcode-zunxiang-36/#_3","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-zunxiang-36/#276","title":"276. \u6805\u680f\u6d82\u8272","text":"<p>\u6709 <code>k</code> \u79cd\u989c\u8272\u7684\u6d82\u6599\u548c\u4e00\u4e2a\u5305\u542b <code>n</code> \u4e2a\u6805\u680f\u67f1\u7684\u6805\u680f\uff0c\u8bf7\u4f60\u6309\u4e0b\u8ff0\u89c4\u5219\u4e3a\u6805\u680f\u8bbe\u8ba1\u6d82\u8272\u65b9\u6848\uff1a</p> <ul> <li>\u6bcf\u4e2a\u6805\u680f\u67f1\u53ef\u4ee5\u7528\u5176\u4e2d \u4e00\u79cd \u989c\u8272\u8fdb\u884c\u4e0a\u8272\u3002</li> <li>\u76f8\u90bb\u7684\u6805\u680f\u67f1 \u6700\u591a\u8fde\u7eed\u4e24\u4e2a \u989c\u8272\u76f8\u540c\u3002</li> </ul> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 <code>k</code> \u548c <code>n</code> \uff0c\u8fd4\u56de\u6240\u6709\u6709\u6548\u7684\u6d82\u8272 \u65b9\u6848\u6570 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1an = 3, k = 2\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u6240\u6709\u7684\u53ef\u80fd\u6d82\u8272\u65b9\u6848\u5982\u4e0a\u56fe\u6240\u793a\u3002\u6ce8\u610f\uff0c\u5168\u6d82\u7ea2\u6216\u8005\u5168\u6d82\u7eff\u7684\u65b9\u6848\u5c5e\u4e8e\u65e0\u6548\u65b9\u6848\uff0c\u56e0\u4e3a\u76f8\u90bb\u7684\u6805\u680f\u67f1 \u6700\u591a\u8fde\u7eed\u4e24\u4e2a \u989c\u8272\u76f8\u540c\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 1, k = 1\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 7, k = 2\n\u8f93\u51fa\uff1a42\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>1 &lt;= k &lt;= 105</code></li> <li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\uff1a\u5bf9\u4e8e\u8f93\u5165\u7684 <code>n</code> \u548c <code>k</code> \uff0c\u5176\u7b54\u6848\u5728\u8303\u56f4 <code>[0, 231 - 1]</code> \u5185</li> </ul> <pre><code>class Solution:\n    def numWays(self, n: int, k: int) -&gt; int:\n        if k == 1 and n &lt;= 2:\n            return 1\n        elif k == 1:\n            return 0\n        elif n == 1:\n            return k\n\n        @cache\n        def dp(n, used):\n            if n == 1 and used:\n                return k - 1\n            elif n == 1 and not used:\n                return k\n            if used:\n                return (k - 1) * dp(n - 1, False)  \n            else:\n                return dp(n - 1, True) + (k - 1) * dp(n - 1, False)\n\n\n        return k * dp(n - 1, False)\n</code></pre> <p>todo\uff1a\u66f4\u597d\u7684\u52a8\u6001\u89c4\u5212\u65b9\u6cd5</p>"}]}