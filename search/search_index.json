{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u524d\u8a00","text":"<p>\u5f53\u4eca\u4e92\u8054\u7f51\u65f6\u4ee3\uff0c\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5df2\u7ecf\u6210\u4e3a\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u4e2d\u7684\u6838\u5fc3\u77e5\u8bc6\u3002\u65e0\u8bba\u662f\u5728\u5de5\u4e1a\u754c\u8fd8\u662f\u5b66\u672f\u754c\uff0c\u90fd\u9700\u8981\u6df1\u5165\u7406\u89e3\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u57fa\u672c\u539f\u7406\u548c\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u8ba1\u7b97\u548c\u4f18\u5316\u7684\u7cfb\u7edf\u8bbe\u8ba1\u3002</p> <p>\u4f5c\u4e3a\u4e00\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u5b66\u4e60\u8005\u6216\u4ece\u4e1a\u8005\uff0c\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5b66\u4e60\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u5237\u9898\u662f\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u901a\u8fc7\u5237\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u638c\u63e1\u5404\u79cd\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u65b9\u5f0f\u3001\u4f18\u7f3a\u70b9\u3001\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u7b49\u91cd\u8981\u6982\u5ff5\u3002</p> <p>\u672c\u535a\u5ba2\u65e8\u5728\u8bb0\u5f55\u6211\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e2d\u7684\u4e00\u4e9b\u5fc3\u5f97\u4f53\u4f1a\u548c\u5237\u9898\u7ecf\u9a8c\uff0c\u4ee5\u53ca\u6211\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u3002\u6211\u5c06\u5206\u4eab\u4e00\u4e9b\u7ecf\u5178\u95ee\u9898\u7684\u89e3\u6cd5\u548c\u4f18\u5316\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5b9e\u7528\u7684\u6280\u5de7\u548c\u5de5\u5177\uff0c\u5e0c\u671b\u80fd\u591f\u5bf9\u6b63\u5728\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u540c\u5b66\u4eec\u6709\u6240\u5e2e\u52a9\u3002</p> <p>By ChatGPT</p>"},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/","title":"Python\u5237\u9898\u6280\u5de7","text":"<p>\u672c\u6587\u4e3b\u8981\u603b\u7ed3\u4ecb\u7ecd\u4f7f\u7528Python\u5237\u9898\u65f6\u4f1a\u7528\u4e0a\u7684\u4e00\u4e9b\u6280\u5de7\u3002\uff08\u4e3a\u4ec0\u4e48\u9009\u62e9Python\uff1f\u5f53\u7136\u662f\u5199\u8d77\u6765\u7b80\u5355\u4e86~</p> <p>\u4e3b\u8981\u662f\uff1a</p> <ol> <li>\u6570\u636e\u7ed3\u6784\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u5e93\u51fd\u6570\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u4ee3\u7801\u7ec4\u7ec7\u65b9\u6cd5</li> </ol> <p>\u4e0d\u4f1a\u8bbe\u8ba1\u5230\u592a\u8fc7\u5de5\u7a0b\u548c\u5b9e\u73b0\u76f8\u5173\u7684\u5185\u5bb9\uff08\u867d\u7136\u53bb\u5e74\u5b9e\u4e60\u7ed3\u675f\u540e\u5f88\u60f3\u5199\u8fd9\u6837\u4e00\u7bc7\u535a\u5ba2\uff0c\u4f46\u662f\u8fd8\u662f\u56e0\u4e3a\u61d2\u60f0\u6ca1\u6709\u5199\u6210</p> <p>\u672c\u8282\u5185\u5bb9\u4e3b\u8981\u662f\u5728\u5237 leetcode hot100 \u65f6\u603b\u7ed3\u7684\u3002</p> <ol> <li>\u6570\u5b57\u8303\u56f4 <code>range(start, end)</code> range(i - 1, -1, -1)</li> </ol> <p>\u4ea4\u6362\u8d4b\u503c\uff1a                         nums[j], nums[j + 1] = nums[j + 1], nums[j]</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#_1","title":"\u8fed\u4ee3\u5668","text":"","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#hashtable","title":"\u5b57\u5178\uff08hashtable\uff09","text":"<p>\u65b0\u5efa\uff1a <pre><code>        hashtable = dict()\n</code></pre></p> <p>\u904d\u5386\uff1a  enumerate(xxx) -&gt; \u5f97\u5230index \u548c value ht.values() -&gt; \u5f97\u5230value</p> <p>\u8bb0\u5f97\u521d\u59cb\u5316\uff1a <pre><code>            if key not in ht:\n                ht[key] = []\n</code></pre></p> <p>collections.defaultdict \u662f Python \u4e2d\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\uff0c\u7279\u522b\u9002\u5408\u7528\u4e8e\u5904\u7406\u5b57\u5178\u7684\u9ed8\u8ba4\u503c\u3002\u4f7f\u7528 defaultdict(list) \u53ef\u4ee5\u65b9\u4fbf\u5730\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u6837\u5728\u5411\u5b57\u5178\u4e2d\u6dfb\u52a0\u65b0\u5143\u7d20\u65f6\uff0c\u5982\u679c\u8be5\u952e\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u3002</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528 collections.defaultdict(list) \u7684\u793a\u4f8b\uff1a</p> <p>python</p> <p>Copy from collections import defaultdict</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#defaultdict","title":"\u521b\u5efa\u4e00\u4e2a defaultdict\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5217\u8868","text":"<p>mp = defaultdict(list)</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#defaultdict_1","title":"\u5411 defaultdict \u6dfb\u52a0\u5143\u7d20","text":"<p>mp['a'].append(1) mp['a'].append(2) mp['b'].append(3)</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#defaultdict_2","title":"\u6253\u5370 defaultdict","text":"<p>print(mp)</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#_2","title":"\u5217\u8868","text":"<p>list(xxx) \u65b0\u5efalist v.sort() \u539f\u5730\u6392\u5e8f \u9ed8\u8ba4ASCD sorted(v) \u6392\u5e8f\u540e\u8fd4\u56de\u65b0\u5bf9\u8c61 v.append(x) v.pop() [] = False for while</p> <p><code>leftMax = [height[0]] + [0] * (n - 1)</code> \u53cd\u5411\u904d\u5386\u53ef\u4ee5\u53ea\u64cd\u4f5c\u4e0b\u6807\uff1a <code>for i in range(n - 2, -1, -1):</code></p> <p>\u8fed\u4ee3\u5668\u64cd\u4f5c: <code>ans = sum(min(leftMax[i], rightMax[i]) - height[i] for i in range(n))</code></p> <p>stack top: <code>stack[-1]</code></p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#hot100","title":"Hot100","text":"","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#_3","title":"\u54c8\u5e0c","text":"<p>\u4e24\u6570\u4e4b\u548c: \u7b2c\u4e8c\u904d\u626b\u63cf\u53ef\u8f6c\u5316\u4e3a\u54c8\u5e0c\u8868\u67e5\u627eX \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4: \u5148\u6392\u5e8f\uff0c\u518d\u54c8\u5e0c \u6700\u957f\u8fde\u7eed\u5e8f\u5217: \u6bcf\u4e2a\u6570\u67e5\u770b\u5176\u90bb\u5c45\u662f\u5426\u5b58\u5728\uff08\u54c8\u5e0c\u4e00\u4e0b\uff09</p> <p>\u54c8\u5e0c\uff1a O(1)\u8fc5\u901f\u89e3\u51b3\u5b58\u5728\u6027\u95ee\u9898</p>","tags":[]},{"location":"Python%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7/#_4","title":"\u53cc\u6307\u9488","text":"<p>\u79fb\u52a8\u96f6: \u4eff\u7167\u5192\u6ce1-&gt;\u91cd\u590d\u8ba1\u7b97; \u4e00\u4e2a\u6307\u9488\u8d1f\u8d23\u5176\u5de6\u8fb9\u533a\u95f4\u7ef4\u62a4\u6027\u8d28\uff0c\u4e00\u4e2a\u6307\u9488\u8d1f\u8d23\u8f85\u52a9\u4ea4\u6362\u3002 \u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668: \u53cc\u6307\u9488\uff0c\u9650\u5b9a\u904d\u5386\u8303\u56f4\u3002\u4ee3\u8868\u53ef\u80fd\u7684\u533a\u95f4\u3002 \u4e09\u6570\u4e4b\u548c: \u64cd\uff0c\u8fd9\u4e48\u96be\uff0c\u6211\u53bb\u5e74\u548b\u505a\u51fa\u6765\u7684\uff1f\uff1f \u603b\u662f\u8fd8\u662f\u5148\u60f3\u7740\u66b4\u529b\uff0c\u7136\u540e\u518d\u601d\u8003\u4f18\u5316\uff01\uff01\uff01\uff01 \u4e0d\u8981\u4e00\u5f00\u59cb\u5c31\u4f18\u5316\u65b9\u6cd5... \u5f53\u6211\u4eec\u9700\u8981\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u65f6\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u968f\u7740\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u9012\u589e\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u9012\u51cf\u7684 \uff08\u5176\u5b9e\u8fd9\u4e00\u6b65\u54c8\u5e0c\u4e5f\u53ef\u4ee5\uff09 \u6240\u4ee5\u4e24\u6570\u4e4b\u548c\u4e5f\u53ef\u4ee5\u53cc\u6307\u9488\u4e86\uff1f\uff1f\uff08\u4f46\u662f\u6392\u5e8fN(LOGN)\uff0c\u4e0d\u662f\u4e70\u691f\u8fd8\u73e0\u54e6\u5417\uff09</p> <p>\u63a5\u96e8\u6c34: \u8fd9\u4e2a\u660e\u5929\u4e00\u5b9a\u5f97\u505a\u51fa\u6765... \u505a\u4e4b\u524d\u987a\u4fbf\u518d\u6574\u7406\u6211\u7684\u4e4b\u524d\u7b14\u8bb0... AC!!!</p> <ol> <li>\u601d\u8def1\uff1a\u5982\u4f55\u66b4\u529b\u6c42\u89e3 -&gt; \u4ece\u4f4e\u5411\u4e0a\u626b\u63cf -&gt; \u592a\u6162 -&gt; \u4f18\u5316\uff1a \u4ece\u9ad8\u5230\u4f4e\u626b\u63cf -&gt; \u5148\u8ba1\u7b97\u6c34\u4f4d\uff0c\u518d\u8ba1\u7b97\u9762\u79ef</li> <li>\u601d\u8def2\uff1a\u8ba1\u7b97\u6c34\u4f4d -&gt; \u89c2\u5bdf\uff1a\u6c34\u4f4d\u7b49\u4e8e\u6700\u4f4e\u8fb9\u754c -&gt; \u89c2\u5bdf\uff1a\u5b58\u6c34\u7684\u5730\u65b9\u90fd\u662f\u51f9\u5f62\u72b6 -&gt; \u4ec0\u4e48\u662f\u51f9\uff1f\u4f4e\u7684\u4e00\u8fb9\u662f\u5355\u4fa7\u9ad8\u5cf0\uff01</li> <li>\u4e24\u8fb9\u626b\u63cf\u5148\u6c42\u51fa\u4e24\u4fa7\u9ad8\u5cf0\uff0c\u7136\u540e\u4e00\u904d\u626b\u63cf\u6c42\u51fa\u6240\u6709\u51f9\u533a\u95f4\uff0c\u8ba1\u7b97\u6c34\u4f4d\uff0c\u8ba1\u7b97\u9762\u79ef</li> </ol> <p>\u601d\u8def\u548c\u5b98\u65b9\u9898\u89e3\u52a8\u6001\u89c4\u5212\u601d\u8def\u76f8\u540c\uff0c\u4f46\u4ee3\u7801\u9700\u8981\u4f18\u5316...</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u5355\u8c03\u6808 \u4e00\u5c42\u4e00\u5c42\u63a5\u96e8\u6c34... \u8fd9\u8c01\u60f3\u5f97\u5230</p> <p>\u65b9\u6cd5\u4e09\uff1a\u53cc\u6307\u9488 \u65b9\u6cd5\u4e00\u5347\u7ea7\u7248 \u4f46\u611f\u89c9\u4e5f\u5f88\u96be... \u7edf\u4e00\u5316\u5904\u7406\uff1a\u4e5f\u6709\u63a5\u6c34\u4e3a0\u7684\u5730\u65b9</p>","tags":[]},{"location":"haskell-learning/","title":"Haskell learning","text":"<p>2023.10.5</p> <p>\u5728\u4e86\u89e3\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8bed\u8a00\u5b66\u4e60\u7684\u6700\u4f73\u65b9\u6cd5\u8fd8\u662f\u5237\u9898\u3002\u5237\u9898\u5e76\u5bf9\u6bd4\u81ea\u5df1\u548c\u4ed6\u4eba\u7684\u89e3\u7b54\u80fd\u6559\u7ed9\u4f60\u4e00\u4e9b\u5728\u4ee3\u7801\u7f16\u5199\u7684 \"best practice\" \uff0c\u89c1\u591a\u4e86\u8fd9\u4e9b \"best practice\" \u65b9\u624d\u66f4\u6709\u4fe1\u5fc3\u53bb\u505a\u9879\u76ee/\u8bfb\u9879\u76ee\u4ee3\u7801\u3002</p> <p>\u6700\u8fd1\u5728\u5b66\u4e60 Haskell\uff0c\u5c31\u5728 codewars \u4e0a\u627e\u4e00\u4e9b\u9898\u76ee\u5b66\u4e60\u4e00\u4e0b\u3002</p>"},{"location":"haskell-learning/#highest-and-lowest","title":"Highest and Lowest","text":"<p>https://www.codewars.com/kata/554b4ac871d6813a03000035/haskell</p> <p>\u614c\u5fd9 google \u5404\u79cd\u5e38\u7528\u51fd\u6570\u540e\u5f97\u5230\u5982\u4e0b\u7b54\u6848\uff08\u5176\u4e2d\u6700\u5927\u7684\u95ee\u9898\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u7ed9 expr \u7c7b\u578b\u6807\u6ce8\uff0c\u6240\u4ee5\u628a read \u5c01\u88c5\u6210\u4e86 stringToInt\uff09\uff1a</p> <pre><code>stringToInt :: String -&gt; Int\nstringToInt = read\n\nhighAndLow :: String -&gt; String\nhighAndLow input =\n  let strs = words input in\n   let nums = map stringToInt strs in\n        show (maximum nums) ++ \" \" ++ show (minimum nums)\n</code></pre> <p>\u66f4\u597d\u7684\u89e3\u7b541\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow xs = show (maximum ns) ++ \" \" ++ show (minimum ns)\n  where ns = (map read $ words xs) :: [Int]\n</code></pre> <ol> <li> <p>where \u548c let \u4f3c\u4e4e\u5dee\u4e0d\u591a... \u4f46\u82e5\u662f \u9884\u5907\u5de5\u4f5c\u592a\u591a \u8fd8\u662f\u653e\u5728 where \u91cc\u66f4\u597d\u4e00\u4e9b\uff0c\u56e0\u4e3a where \u7f6e\u540e\u80fd\u66f4\u597d\u51f8\u663e\u4ee3\u7801\u4e3b\u4f53...</p> </li> <li> <p>\u5bf9 expr \u7684\u7c7b\u578b\u6807\u6ce8\u7528 <code>::</code> \u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5 \u4e0a\u9762\u7684 <code>stringToInt</code> \u53ef\u4ee5\u66ff\u6362\u4e3a <code>(read :: String -&gt; Int)</code></p> </li> </ol> <p>\u66f4\u597d\u7684\u89e3\u7b542\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . sequence [maximum,minimum] . map (read ::String-&gt;Int) . words\n</code></pre> <p>\u4e00\u884c\u6d41...</p> <p>unwords: words \u7684 inverse</p> <p>sequence: Evaluate each monadic action in the structure from left to right, and collect the results. The <code>Traversable</code> class \u7684\u51fd\u6570; class (Functor t, Foldable t) =&gt; Traversable t</p> <ul> <li>https://blog.jakuba.net/2014-07-30-foldable-and-traversable/</li> <li>https://downloads.haskell.org/~ghc/5.04.1/docs/html/base/index.html</li> <li>https://wiki.haskell.org/Foldable_and_Traversable</li> <li>!!! Monad ((-&gt;) r) https://hackage.haskell.org/package/base-4.14.1.0/docs/src/GHC.Base.html#line-979\uff0c \u8fd9\u4e2a Monad \u53ef\u4ee5\u7406\u89e3\u4e3a Map?</li> <li>\u55ef...\u603b\u4e4b\u8fd8\u662f\u975e\u5e38\u62bd\u8c61...</li> </ul> <p>\u89e3\u7b543:</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . f . map read . words\n    where f :: [Integer] -&gt; [Integer]\n          f xs = [maximum xs, minimum xs]\n</code></pre> <p>\u4e0a\u9762\u89e3\u7b54\u4e2d\u70e7\u8111\u7684 <code>sequence [maximum,minimum]</code> \u6362\u6210 <code>f</code></p> <p>\u89e3\u7b544\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow input = \n  let ns = map read $ words input :: [Int]\n      mx = maximum ns\n      mn = minimum ns\n  in\n    unwords $ map show [mx,mn]\n</code></pre> <p>\u5f88\u89c4\u6574\u7684\u4e00\u4e2a\u89e3\u7b54</p> <p>\u89e3\u7b545\uff1a</p> <pre><code>highAndLow :: String -&gt; String\nhighAndLow = unwords . map show . highAndLow' . map read . words\n\nhighAndLow' :: [Int] -&gt; [Int]\nhighAndLow' (n1:ns) = foldl (\\[mx, mn] n -&gt; [max mx n, min mn n]) [n1, n1] ns\n</code></pre> <p>\u7a0d\u5fae\u5feb\u70b9\uff0c\u4f46\u5c31\u6ca1\u90a3\u4e48\u597d\u770b\u4e86</p>"},{"location":"haskell-learning/#multiply","title":"Multiply","text":"<p>https://www.codewars.com/kata/50654ddff44f800200000004/haskell</p> <pre><code>multiply :: Int -&gt; Int -&gt; Int\nmultiply a b = a * b\n</code></pre> <p>\u4f46\u611f\u89c9\u5e94\u8be5\u4e0d\u662f\u8003\u70b9...</p> <p>\u8003\u70b9\u5e94\u8be5\u662f\u5982\u4e0b\u89e3\u7b54\u4e2d\u6d89\u53ca\u7684\uff1a</p> <pre><code>multiply :: Int -&gt; Int -&gt; Int\nmultiply a b = fromJust $ do\n  return $ a * b\n</code></pre>"},{"location":"haskell-learning/#tribonacci-sequence","title":"Tribonacci Sequence","text":"<p>https://www.codewars.com/kata/556deca17c58da83c00002db/haskell</p> <pre><code>tribonacci :: (Num a) =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n =\n  take n $\n    map (\\(x, _, _) -&gt; x) ns\n  where\n    ns = iterate (\\(x, y, z) -&gt; (y, z, x + y + z)) (a, b, c)\n</code></pre> <p>emm...\u8fd8\u662f\u5f88\u9ebb\u70e6\u7684\u89e3\u7b54</p> <p>\u89e3\u7b541\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci _ n | n &lt; 1 = []\ntribonacci (a, b, c) n = a : tribonacci (b, c, a+b+c) (n-1)\n</code></pre> <p>emmmm.... very very clever!!! </p> <p>\u5728\u505a\u672c\u9898\u7684\u65f6\u5019\u8111\u5b50\u91cc\u5c31\u6ca1\u6709\u4ea7\u751f\u8fc7\u9012\u5f52\u8fd9\u4e2a\u5ff5\u5934...\u88ab wholemeal programming \u6bd2\u5bb3\u4e86\u4e48...</p> <p>\u89e3\u7b542\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n tribs\n    where tribs = [a, b, c] ++ zipWith3 (\\x y z -&gt; x + y + z) tribs (tail tribs) (tail $ tail tribs)\n\n-- \u6216\u7c7b\u4f3c\u7684    \ntribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n $ trib\n    where trib = a : b : c : zipWith3 (\\a b c -&gt; a + b + c)\n                                      (drop 0 trib)\n                                      (drop 1 trib)\n                                      (drop 2 trib)\n</code></pre> <p>\u4eba\u5bb6\u4e5f\u662f wholemeal programming\uff0c\u4eba\u5bb6\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4f18\u96c5\uff1f\uff01</p> <p>\u5662\uff0ctribs \u53ef\u4ee5\u76f4\u63a5\u9012\u5f52\u5b9a\u4e49\u554a...</p> <p>https://www.scs.stanford.edu/16wi-cs240h/slides/basics-slides.html#(8)</p> <p>\u89e3\u7b543\uff1a</p> <pre><code>tribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci sig n = take n $ unfoldr (\\(a,b,c) -&gt; Just (a,(b,c,a+b+c))) sig\n</code></pre> <p>\u8fd8\u6709 <code>unfoldr</code> \u8fd9\u4e48\u9ad8\u7ea7\u7684\u51fd\u6570\u5417...</p> <p>https://hackage.haskell.org/package/deferred-folds-0.9.18.3/docs/DeferredFolds-Unfoldr.html</p> <p>\u89e3\u7b544\uff1a</p> <pre><code>{-# LANGUAGE BangPatterns #-}\n\ntribonacci :: Num a =&gt; (a, a, a) -&gt; Int -&gt; [a]\ntribonacci (a, b, c) n = take n . go $ (a, b, c)\n  where\n    go (!x, !y, !z) = x : go (y, z, x + y + z)\n</code></pre> <p>BangPattern: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/strict.html \uff0c \u4e0d lazy \u4e86</p> <p>\u5176\u4f59\u548c\u89e3\u6cd5\u4e00\u7c7b\u4f3c</p>"},{"location":"haskell-learning/#_1","title":"\u5176\u5b83","text":"<p>https://en.wikibooks.org/wiki/Haskell/Understanding_monads</p> <p>\u53d1\u73b0\u4e00\u95e8\u975e\u5e38\u597d\u7684\u8bfe\u7a0b...\u51b3\u5b9a\u5148\u770b\u8fd9\u4e2a\u4e86 https://www.scs.stanford.edu/16wi-cs240h/sched/</p>"},{"location":"leetcode-2024-feb/","title":"Leetcode 2024 feb","text":""},{"location":"leetcode-2024-feb/#217-3007-k","title":"2.17  3007. \u4ef7\u503c\u548c\u5c0f\u4e8e\u7b49\u4e8e K \u7684\u6700\u5927\u6570\u5b57","text":"<p>\u9898\u89e3\uff1ahttps://leetcode.cn/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k/</p> <p>\u89c6\u9891\uff1ahttps://www.bilibili.com/video/BV1zt4y1R7Tc/?vd_source=226da368954a7c68d6b7e4bbdc91b2cd</p> <ul> <li>\u6570\u4f4dDP</li> <li>https://www.bilibili.com/video/BV1rS4y1s721/?spm_id_from=333.337.search-card.all.click&amp;vd_source=226da368954a7c68d6b7e4bbdc91b2cd</li> </ul> <p>\u5982\u679c\u7528\u6700\u6734\u7d20\u7684\u60f3\u6cd5\u53bb\u89e3\u9898\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e0b\u9762\u4e09\u79cd\u64cd\u4f5c</p> <ol> <li>\u64cd\u4f5c1\uff1a\u6c42\u4e00\u4e2a\u6574\u6570\u7684\u4ef7\u503c -&gt; <code>O(1/x)</code></li> <li>\u64cd\u4f5c2\uff1a\u6c42\u4ece 1 \u5230 num \u6240\u6709\u6574\u6570\u7684\u4ef7\u503c\u548c -&gt; <code>O(num/x)</code></li> <li>\u64cd\u4f5c3\uff1a\u6c42\u6700\u5927\u7684 num\uff0c\u4f7f\u5f97 1 ... num \u7684\u4ef7\u503c\u548c\u5c0f\u4e8e k -&gt;  <code>O(k^2/x)</code></li> </ol> <p>\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f <code>O()</code></p> <p>\u53c8\u5df2\u77e5</p> <ul> <li><code>1 &lt;= k &lt;= 10^15</code></li> <li><code>1 &lt;= x &lt;= 8</code></li> </ul> <p>\u53c8\u5df2\u77e5\u5e38\u89c1\u6570\u636e\u91cf\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1ahttps://www.acwing.com/blog/content/32/</p> <p>\u4e00\u822cACM\u6216\u8005\u7b14\u8bd5\u9898\u7684\u65f6\u95f4\u9650\u5236\u662f1\u79d2\u62162\u79d2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++\u4ee3\u7801\u4e2d\u7684\u64cd\u4f5c\u6b21\u6570\u63a7\u5236\u5728 10^7\u223c10^8 \u4e3a\u6700\u4f73\u3002</p> <p>\u56e0\u6b64\uff0c\u4e0a\u9762\u7684\u64cd\u4f5c\u81f3\u5c11\u53d6\u4e00\u4e2a\u5bf9\u6570\uff1b</p> <p>\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\u7528\u4e8c\u5206\u67e5\u627e\uff1a</p> <pre><code>    pub fn find_maximum_number(k: i64, x: i32) -&gt; i64 {\n        let mut hi = 1 &lt;&lt; x * (k.ilog2() as i32 + 1);\n        let mut lo = 0;\n        while lo &lt;= hi {\n            let mid = (hi + lo) / 2;\n            let sum = Solution::sum_until(mid, x);\n            if sum == k {\n                return mid;\n            } \n            if sum &gt; k {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        unreachable!()\n    }\n</code></pre> <p>\u8003\u8651sum_until \u6709\u8f83\u591a\u91cd\u590d\u8ba1\u7b97\uff0c\u53ef\u4f7f\u7528\u6570\u4f4d dp \u51cf\u5c11\u91cd\u590d\u3002</p> <p>\u6ce8\u610f\u4f18\u5148\u7ea7\u95ee\u9898\uff1a</p> <p><code>dp_arr[i] = dp_arr[i - 1] * 2 - 1 + 1 &lt;&lt; (*x* as usize * (i - 1))</code></p> <p><code>*h* &amp; !((2 &lt;&lt; (i * *x*)) - 1)</code></p> <p>\u6570\u4f4dDP\uff1a\u9012\u5f52\u65b9\u7a0b\u548c\u4ece\u9ad8\u5230\u5e95\u6309\u4f4d\u679a\u4e3e\u6709\u5173</p> <p>\u8be6\u89c1\uff1ahttps://algo.itcharge.cn/10.Dynamic-Programming/09.Digit-DP/01.Digit-DP/#_2-2-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0</p> <p>\u57fa\u672c\u6846\u67b6\uff1a</p> <pre><code>class Solution:\n    def digitDP(self, n: int) -&gt; int:\n        # \u5c06 n \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 s\n        s = str(n)\n\n        @cache\n        # pos: \u7b2c pos \u4e2a\u6570\u4f4d\n        # state: \u4e4b\u524d\u9009\u8fc7\u7684\u6570\u5b57\u96c6\u5408\u3002\n        # isLimit: \u8868\u793a\u662f\u5426\u53d7\u5230\u9009\u62e9\u9650\u5236\u3002\u5982\u679c\u4e3a\u771f\uff0c\u5219\u7b2c pos \u4f4d\u586b\u5165\u6570\u5b57\u6700\u591a\u4e3a s[pos]\uff1b\u5982\u679c\u4e3a\u5047\uff0c\u5219\u6700\u5927\u53ef\u4e3a 9\u3002\n        # isNum: \u8868\u793a pos \u524d\u9762\u7684\u6570\u4f4d\u662f\u5426\u586b\u4e86\u6570\u5b57\u3002\u5982\u679c\u4e3a\u771f\uff0c\u5219\u5f53\u524d\u4f4d\u4e0d\u53ef\u8df3\u8fc7\uff1b\u5982\u679c\u4e3a\u5047\uff0c\u5219\u5f53\u524d\u4f4d\u53ef\u8df3\u8fc7\u3002\n        def dfs(pos, state, isLimit, isNum):\n            if pos == len(s):\n                # isNum \u4e3a True\uff0c\u5219\u8868\u793a\u5f53\u524d\u65b9\u6848\u7b26\u5408\u8981\u6c42\n                return int(isNum)\n\n            ans = 0\n            if not isNum:\n                # \u5982\u679c isNumb \u4e3a False\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u5f53\u524d\u6570\u4f4d\n                ans = dfs(pos + 1, state, False, False)\n\n            # \u5982\u679c\u524d\u4e00\u4f4d\u6ca1\u6709\u586b\u5199\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u53ef\u9009\u62e9\u6570\u5b57\u4e3a 0\uff0c\u5426\u5219\u6700\u5c11\u4e3a 1\uff08\u4e0d\u80fd\u542b\u6709\u524d\u5bfc 0\uff09\u3002\n            minX = 0 if isNum else 1\n            # \u5982\u679c\u53d7\u5230\u9009\u62e9\u9650\u5236\uff0c\u5219\u6700\u5927\u53ef\u9009\u62e9\u6570\u5b57\u4e3a s[pos]\uff0c\u5426\u5219\u6700\u5927\u53ef\u9009\u62e9\u6570\u5b57\u4e3a 9\u3002\n            maxX = int(s[pos]) if isLimit else 9\n\n            # \u679a\u4e3e\u53ef\u9009\u62e9\u7684\u6570\u5b57\n            for x in range(minX, maxX + 1): \n                # x \u4e0d\u5728\u9009\u62e9\u7684\u6570\u5b57\u96c6\u5408\u4e2d\uff0c\u5373\u4e4b\u524d\u6ca1\u6709\u9009\u62e9\u8fc7 x\n                if (state &gt;&gt; x) &amp; 1 == 0:\n                    ans += dfs(pos + 1, state | (1 &lt;&lt; x), isLimit and x == maxX, True)\n            return ans\n\n        return dfs(0, 0, True, False)\n</code></pre> <p>\u6b64\u5916\u5747 sum_until \u548c findMaximumNumber \u5b9e\u9645\u4e0a\u90fd\u6709\u7b80\u6613\u7684O(n)\u505a\u6cd5(\u627e\u89c4\u5f8b)</p>"},{"location":"leetcode-2024-jan/","title":"Leetcode 2024 jan","text":""},{"location":"leetcode-2024-jan/#114-822","title":"1.14 822. \u7ffb\u8f6c\u5361\u7247\u6e38\u620f","text":"<pre><code>use std::collections::HashSet;\nimpl Solution {\n    pub fn flipgame(fronts: Vec&lt;i32&gt;, backs: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut wants = HashSet::new();\n        let mut n_wants = HashSet::new();\n        for i in 0..fronts.len() {\n            wants.insert(fronts[i]);\n            wants.insert(backs[i]);\n            if fronts[i] == backs[i] {\n                n_wants.insert(fronts[i]);\n            }\n        }\n        wants = wants.difference(&amp;n_wants).copied().collect();\n\n        wants.into_iter().min().unwrap_or(0)\n    }\n}\n</code></pre> <p>\u590d\u5065\u6d3b\u52a8...</p>"},{"location":"leetcode-2024-jan/#120-1938","title":"1.20 1938. \u67e5\u8be2\u6700\u5927\u57fa\u56e0\u5dee","text":"<p>\u6b64\u9898\u4e00\u89c1\u5c31\u60f3\u5230\u4e86\u4e0b\u9762\u8fd9\u79cd\u66b4\u529b\u89e3\u6cd5\uff0c\u5982\u679c queries \u957f n\uff0cparents \u957f m\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n logm)</code></p> <pre><code>impl Solution {\n    pub fn max_genetic_difference(parents: Vec&lt;i32&gt;, queries: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; Vec&lt;i32&gt; {\n        let mut ans = Vec::&lt;i32&gt;::new();\n        for query in queries {\n            if let [mut n, v] = query[..] {\n                let mut max_v = v ^ n;\n                while n != -1 {\n                    n = parents[n as usize];\n                    max_v = max_v.max(n ^ v);\n                }\n                ans.push(max_v);\n            } else {\n                unreachable!()\n            }\n        }\n        ans\n    }\n}\n</code></pre> <p>\u95ee\u9898\u5728\u4e8e\u6d4b\u8bd5\u6570\u636e\u4e2d m \u53ef\u80fd\u592a\u5927\uff0c\u56e0\u6b64 TLE</p> <p>\u8003\u8651\u5230 n \u4e0d\u53ef\u7701\u7565\uff0c\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u51cf\u5c0f log m \u8fd9\u4e2a\u56e0\u5b50\u3002\u8003\u8651\u6bd4\u8f83\u7684\u8fc7\u7a0b\u5728\u4e8e\u4ece leaf \u5230 root \u8ba1\u7b97 log m \u6b21\u5f02\u6216\u5e76\u53d6\u6700\u5927\u503c\uff0c\u8f6c\u800c\u601d\u8003 \u6c42\u82e5\u5e72\u6b21\u5f02\u6216\u64cd\u4f5c\u7684\u6700\u5927\u503c\u6709\u65e0\u7b80\u4fbf\u65b9\u6cd5\u3002</p> <p>\u5f02\u6216\u4e3a\u4e8c\u8fdb\u5236\u6309\u4f4d\u6bd4\u8f83\uff0c\u76f8\u540c\u4e3a 0\uff0c\u4e0d\u540c\u4e3a 1\u3002\u800c\u6bd4\u8f83\u5927\u5c0f\u4e3a\u4e8c\u8fdb\u5236\u6309\u4f4d\u6bd4\u8f83\u5148\u51fa\u73b0 1 \u7684\u5927\u3002\u90a3\u4e48\u4e00\u4e2a\u6570 a \u82e5\u5e72\u6570\u5f02\u6216\u64cd\u4f5c\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6309\u4f4d\u5224\u65ad\u54ea\u4e2a\u6570\u6700\u5148\u51fa\u73b0\u4e0e a \u4e0d\u540c\u7684\u4f4d\u3002\u8fd9\u79cd\u6309\u5e8f\u5217\u4e0d\u65ad\u9012\u8fdb\u7684\u611f\u89c9\u5c31\u8ba9\u4eba\u60f3\u5230\u4e86 Trie \u6811\u3002</p> <p>\u8003\u8651\u4f7f\u7528 Trie \u6811\uff0c\u7ed3\u679c\u5982\u4e0b\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6570\u4f4d\u6570\u6709\u9650\uff0c\u590d\u6742\u5ea6 <code>O(n+m)</code></p> <p>\u00b7</p> <pre><code>const MAX_BIT: usize = 18;\n\n#[derive(Debug)]\nstruct Trie {\n    left:  Option&lt;Box&lt;Trie&gt;&gt;,  // 0\n    right: Option&lt;Box&lt;Trie&gt;&gt;, // 1\n    cnt: usize\n}\n\nimpl Trie {\n\n    pub fn new() -&gt; Trie {\n        Trie {\n            left: None,\n            right: None,\n            cnt: 0,\n        }\n    }\n\n    pub fn insert(trie: &amp;mut Trie, n: i32) {\n        let mut cur = trie;\n        for i in (0..=MAX_BIT).rev()  {\n            cur.cnt += 1;\n            let bit = n &amp; (1 &lt;&lt; i);\n            if bit != 0 {\n                cur = cur.right.get_or_insert(Box::new(Trie::new()))\n            } else {\n                cur = cur.left.get_or_insert(Box::new(Trie::new()))\n            }\n        }\n        cur.cnt += 1;\n    }\n\n    pub fn remove(trie: &amp;mut Trie, n: i32) {\n        let mut cur = trie;\n        for i in (0..=MAX_BIT).rev()  {\n            cur.cnt -= 1;\n            let bit = n &amp; (1 &lt;&lt; i);\n            if bit != 0 {\n                cur = cur.right.get_or_insert(Box::new(Trie::new()))\n            } else {\n                cur = cur.left.get_or_insert(Box::new(Trie::new()))\n            }\n        }\n        cur.cnt -= 1;\n    }\n\n\n    pub fn max(trie: &amp;Trie, v: i32) -&gt; i32 {\n        let mut cur = trie;\n        let mut p = 0;\n        for i in (0..=MAX_BIT).rev()  {\n            let bit = v &amp; (1 &lt;&lt; i);\n            // try to select different bit:\n            if bit != 0 {\n                if cur.left.is_some() &amp;&amp; cur.left.as_ref().unwrap().cnt != 0 {\n                    cur = cur.left.as_ref().unwrap();\n                } else {\n                    p += 1 &lt;&lt; i;\n                    cur = cur.right.as_ref().unwrap();\n                }\n\n            } else {\n                if cur.right.is_some() &amp;&amp; cur.right.as_ref().unwrap().cnt != 0{\n                    p += 1 &lt;&lt; i;\n                    cur = cur.right.as_ref().unwrap();\n                } else {\n                    cur = cur.left.as_ref().unwrap();\n                }\n            }\n        }\n        p ^ v\n    }\n\n}\n\n\nimpl Solution {\n\n    pub fn max_genetic_difference(parents: Vec&lt;i32&gt;, queries: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; Vec&lt;i32&gt; {\n        // assign queries -&gt; O(n)\n        let mut node_queries = vec![Vec::&lt;(usize, i32)&gt;::new(); parents.len()];\n        let query_len = queries.len();\n\n        for (i, query) in queries.into_iter().enumerate() {\n            if let [n, v] = query[..] {\n                node_queries[n as usize].push((i, v))\n            } else {\n                unreachable!() \n            }\n        }\n\n        // build graph -&gt; O(m)\n        let mut graph = vec![Vec::&lt;i32&gt;::new(); parents.len()];\n        let mut root = 0;\n        for (n, p) in parents.into_iter().enumerate() {\n            if p == -1 {\n                root = n;\n            } else {\n                graph[p as usize].push(n as i32);\n            }\n        }\n\n        // dfs -&gt; O(m log MAX_BIT)\uff0clog MAX_BIT \u4e3a\u5728 Trie \u4e2d\u63d2\u5165/\u5220\u9664\u6bcf\u4e2a\u6570\u7684\u65f6\u95f4\n        let mut ans = vec![0; query_len];\n        let mut stack = vec![(root, false)];\n        let mut trie = Trie::new();\n\n        while let Some((n, visited)) = stack.pop() {\n            if visited {\n                Trie::remove(&amp;mut trie, n as i32);\n                continue;\n            }\n            stack.push((n, true));\n            Trie::insert(&amp;mut trie, n as i32);\n            for (i, v) in node_queries[n].iter() {\n                ans[*i] = Trie::max(&amp;trie, *v);\n            }\n            for child in graph[n].iter() {\n                stack.push((*child as usize, false))\n            }\n        }\n\n\n        ans\n    }\n}\n</code></pre>"},{"location":"leetcode-2024-jan/#121","title":"1.21 \u6784\u9020\u6700\u957f\u975e\u9012\u51cf\u5b50\u6570\u7ec4","text":"<p>\u7b2c\u4e00\u773c\u6ca1\u6709\u8003\u8651\u6e05\u695a\uff0c\u6ca1\u6709\u8ba4\u8bc6\u5230\u5bf9\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u51b3\u7b56\u90fd\u4f1a\u5bf9\u540e\u7eed\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd\uff0c\u6709\u4e86\u4e0b\u9762\u9519\u8bef\u7b54\u6848\u3002</p> <pre><code>impl Solution {\n    pub fn max_non_decreasing_length(nums1: Vec&lt;i32&gt;, nums2: Vec&lt;i32&gt;) -&gt; i32 {\n        let l = nums1.len();\n\n        let mut res = 0;\n        let mut maxl = 0;\n        let mut cur = 0;\n        for i in 0..l {\n            let min = nums1[i].min(nums2[i]);\n            let max = nums1[i].max(nums2[i]);\n            if min &gt;= cur {\n                cur = min;\n                maxl += 1;\n            } else if max &gt;= cur {\n                cur = min;\n                maxl += 1;\n            } else {\n                res = res.max(maxl);\n                maxl = 1;\n                cur = min;\n            }\n        }\n        res.max(maxl)\n    }\n}\n</code></pre> <p>\u8003\u8651\u5230\u5f71\u54cd\u540e\uff0c\u610f\u8bc6\u5230\u6bcf\u4e2a\u4f4d\u7f6e\u9009\u6570\u7ec4 A \u6216\u9009\u6570\u7ec4 B \u90fd\u8981\u8003\u8651\uff0c\u8003\u8651\u53ef\u4ee5\u5212\u5206\u5b50\u95ee\u9898\uff0c\u627e\u5230\u4f9d\u8d56\u5173\u7cfb\u3002\u53c8\u56e0\u4e3a\u662f\u5426\u80fd\u9009\u4f4d\u7f6e n \u4e0a\u7684\u67d0\u4e2a\u6570\u53d6\u51b3\u4e8e\u4f4d\u7f6e n-1 \u4e0a\u7684\u6570\uff0c\u5f97\u51fa\u5982\u4e0b\u7b54\u6848\uff1a</p> <pre><code>    // \u5982\u679c\u628a\u300c\u5b50\u6570\u7ec4\u300d\u6539\u6210\u300c\u5b50\u5e8f\u5217\u300d\u5462\uff1f -&gt; \u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u6570\u7ec4\u7684\u6700\u957f\u975e\u9012\u51cf\u5b50\u5e8f\u5217 -&gt; \u5b58\u5728 O(nlog\u2061n) \u89e3\u6cd5\n    // https://leetcode.cn/problems/longest-increasing-subsequence/\n    // https://www.bilibili.com/video/BV1XW4y1f7Wv/?spm_id_from=333.999.0.0&amp;vd_source=ebce05e0e6ac0774e7cf8844bf20f437\n    pub fn max_non_decreasing_length(nums1: Vec&lt;i32&gt;, nums2: Vec&lt;i32&gt;) -&gt; i32 {\n\n        let (mut last_min, mut last_max) = (0, 0);\n\n        let mut lmin_l = 0;\n        let mut lmax_l = 0;\n\n        let mut max_l = 0;\n\n\n        for i in 0..nums1.len() {\n            let min = nums1[i].min(nums2[i]);\n            let max = nums1[i].max(nums2[i]);\n\n            let lmin_l_ = if min &gt;= last_max {\n                lmax_l + 1\n            } else if min &gt;= last_min {\n                lmin_l + 1\n            } else {\n                1\n            };\n\n            lmax_l = if max &gt;= last_max {\n                lmax_l + 1\n            } else if max &gt;= last_min {\n                lmin_l + 1\n            } else {\n                1\n            };\n            lmin_l = lmin_l_;\n\n\n            last_min = min;\n            last_max = max;\n            max_l = max_l.max(lmax_l);\n        }\n\n        max_l\n    }\n</code></pre>"},{"location":"leetcode-2024-jan/#122-2304","title":"1.22 2304. \u7f51\u683c\u4e2d\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7","text":"<p>\u4e00\u773c\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u6ce8\u610f\uff1a</p> <ol> <li>MAX_COST \u6700\u5927\u503c</li> <li>\u4e0b\u6807\u5199\u5bf9</li> </ol> <pre><code>    pub fn min_path_cost(grid: Vec&lt;Vec&lt;i32&gt;&gt;, move_cost: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; i32 {\n        const MAX_COST: i32 = std::i32::MAX;\n\n        let m = grid.len();\n        let n = grid[0].len();\n        let mut min_path = vec![vec![MAX_COST; n]; m];\n\n        for i in 0..n {\n            min_path[0][i] = grid[0][i];\n        }\n\n        // O(mn^2)\n        for i in 1..m {\n            for j in 0..n {\n                for k in 0..n {\n                    let parent_val = grid[i - 1][j];\n                    let total_cost = grid[i][k] + move_cost[parent_val as usize][k];\n                    min_path[i][k] = min_path[i][k].min(min_path[i - 1][j] + total_cost);\n                }\n            }\n        }\n\n        *min_path[m - 1].iter().min().unwrap()\n    }\n</code></pre>"},{"location":"leetcode-2024-jan/#125-2498-ii","title":"1.25 2498. \u9752\u86d9\u8fc7\u6cb3 II","text":"<p>\u6784\u9020\u9898\uff0c\u8fd9 tm \u8c01\u80fd\u60f3\u5230...</p> <p>\u8bc1\u660e\uff1a\u95f4\u9694\u8df3\u6240\u5f97\u7ed3\u679c\u4e3a\u6240\u6709\u95f4\u9694\u7684\u6700\u5927\u503c\u3002\u5047\u8bbe\u5b58\u5728\u975e\u95f4\u9694\u8df3\u6700\u4f18\u89e3\uff0c\u5219\u5fc5\u62c6\u5206\u6700\u5927\u95f4\u9694\uff0c\u6700\u5927\u95f4\u9694\u62c6\u5206\u540e\u53cd\u7a0b\u95f4\u9694\u5fc5\u5927\u4e8e\u539f\u6700\u5927\u95f4\u9694\uff0c\u77db\u76fe\u3002\u6545\u95f4\u9694\u8df3\u4e3a\u6700\u4f18\u89e3\u3002</p> <pre><code>impl Solution {\n    pub fn max_jump(stones: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut max_jmp = stones[1] - stones[0];\n        for i in 2..stones.len() {\n            max_jmp = max_jmp.max(stones[i] - stones[i - 2]);\n        }\n        max_jmp\n    }\n}\n</code></pre> <p>\u6b64\u5916\uff0c\u68c0\u67e5\u53ef\u5426\u5728\u6700\u5927\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>m</code>\u7684\u60c5\u51b5\u4e0b\u5f80\u8fd4\uff0c\u4e8c\u5206\u67e5\u627e <code>m</code> \u5373\u53ef\u3002\uff08\u8fd9\u79cd\u601d\u8def\u5176\u5b9e\u66f4\u6709\u542f\u53d1\u6027\uff09</p>"},{"location":"leetcode-contest-355/","title":"Leetcode contest 355","text":"<p>2023.8.23</p> <p>contest-355</p> <p>\u672c\u79d1\u558a\u4e86\u4e09\u5e74\u7684\u8981\u5b66\u7b97\u6cd5\uff0c\u524d\u534a\u5e74\u53c8\u4e3a\u4e86\u627e\u5b9e\u4e60\u558a\u4e86\u597d\u51e0\u4e2a\u6708\u7684\u8981\u5237\u9898\uff0c\u53ef\u7ec8\u7a76\u662f\u6ca1\u6709\u5237\u8d77\u6765\u3002\u4e3b\u8981\u539f\u56e0\u662f\u61d2\uff0c\u6b21\u8981\u539f\u56e0\u662f\u8fd8\u662f\u5728\u601d\u60f3\u4e0a\u8fd8\u662f\u8f7b\u89c6\u4e86\u3002\u3002</p> <p>\u4e0d\u8fc7\u6700\u8fd1\u8d8a\u53d1\u610f\u8bc6\u5230\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7075\u9b42\u8fd8\u662f\u5173\u4e8e\u8ba1\u7b97\u7684\u3002\u5728\u5404\u4e2a\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\u53cd\u590d\u9047\u5230\u4e00\u4e9b\u4f3c\u66fe\u76f8\u8bc6\u7684\u6a21\u5f0f(\u6bd4\u5982\u5c61\u89c1\u4e0d\u9c9c\u7684\u4e0d\u52a8\u70b9\u7b97\u6cd5)\u4e4b\u540e\uff0c\u6211\u8d8a\u53d1\u611f\u5230\u9700\u8981\u4e00\u5c42\u66f4\u9ad8\u7684\u62bd\u8c61\u6765\u7edf\u4e00\u8fd9\u4e9b\u5173\u4e8e\u8ba1\u7b97\u7684\u6a21\u5f0f\u4e86\u3002\u4f46\u662f\u8ba1\u7b97\u53c8\u597d\u50cf\u5f80\u5f80\u96be\u4ee5\u62bd\u8c61\uff0c\u6bcf\u4e2a\u7b97\u6cd5\u672c\u8eab\u5c31\u8f83\u4e3a\u590d\u6742\u4e14\u7b97\u6cd5\u4e4b\u95f4\u7684\u5171\u540c\u6027\u53c8\u8f83\u5c11\uff0c\u652f\u914d\u7b97\u6cd5\u9898\u76ee\u7684\u597d\u50cf\u53ea\u662f\u4e9b\u6a21\u7cca\u7684\u201c\u601d\u60f3\u201d\uff0c\u5982\u201c\u5206\u6cbb\u201d\uff0c\u201c\u52a8\u6001\u89c4\u5212\u201d\u4e4b\u7c7b\u7684\u3002\u8fd9\u4e9b\u601d\u60f3\u53c8\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u7ed3\u5408\u5728\u4e00\u4e2a\u9898\u76ee\u4e2d\uff0c\u8ba9\u4eba\u65e0\u6cd5\u901a\u8fc7\u4e00\u79cd\u201c\u7b97\u6cd5\u201d\u53bb\u89e3\u51b3\u6240\u6709\u7b97\u6cd5\u95ee\u9898\u3002\u76f8\u6bd4\u4e8e\u4eba\u4e3a\u9650\u5b9a\u7684\u903b\u8f91\u63a8\u7406\u89c4\u5219\uff0c\u8fd9\u79cd\u7075\u6d3b\u591a\u53d8\u7684\u201c\u601d\u60f3\u201d\u4f3c\u4e4e\u624d\u662f\u66f4\u4e3a\u666e\u904d\u7684\u3002\u5bf9\u4e8e\u601d\u60f3\u7684\u5b66\u4e60\u90a3\u5c31\u53ea\u80fd\u9760\u201c\u609f\u201d\u4e86\uff0c\u800c\u201c\u609f\u201d\u4e0d\u80fd\u5149\u9760\u770b\uff0c\u5fc5\u987b\u8981\u601d\u8003\uff0c\u52a8\u624b\u540e\u624d\u80fd\u4f53\u4f1a\uff0c\u56e0\u6b64\u505a\u9898\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u4e86\u3002</p> <p>\u6210\u529f\u8bf4\u670d\u81ea\u5df1\u540e\uff0c\u7ec8\u4e8e\u505a\u4e86\u4e00\u6b21leetcode\u5468\u8d5b\uff0c\u7ed3\u679c\u81ea\u7136\u662f\u60e8\u4e0d\u5fcd\u7779\uff0c\u53ea\u8fc7\u4e86\u4e24\u9053\u7b80\u5355\u3002\u3002\u5e0c\u671b\u4ee5\u540e\u575a\u6301\u4e0b\u53bb\u80fd\u6709\u8fdb\u6b65\u5427\u3002</p> <p>\u6211\u611f\u89c9Python\u6700\u9002\u5408\u7528\u6765\u505a\u7b97\u6cd5\u9898\uff0c\u53ef\u4ee5\u8ba9\u4eba\u53ea\u5173\u6ce8\u7eaf\u7cb9\u7684\u8ba1\u7b97\u800c\u5f88\u5c11\u62c5\u5fc3\u8bed\u8a00\u672c\u8eab\u7684\u95ee\u9898\u3002\u4e0d\u8fc7\u56e0\u4e3a\u60f3\u7740\u987a\u4fbf\u5b66\u4e60\u4e0bRust\uff0c\u5c31\u5148\u7528Rust\u505a\u51e0\u6b21\u9898\u3002</p>"},{"location":"leetcode-contest-355/#2789","title":"2789. \u5408\u5e76\u540e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20","text":"<pre><code>impl Solution {\n    pub fn max_array_value(nums: Vec&lt;i32&gt;) -&gt; i64 {\n        nums.into_iter().rfold(0i64, |acc, num| {\n            if acc &gt;= num as i64 {\n                acc + num as i64\n            } else {\n                num as i64\n            }\n        })\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a\u89c2\u5bdf \u64cd\u4f5c \uff0c\u5bb9\u6613\u5f97\u51fa\u82e5\u6570\u7ec4\u4e2d\u6709\u76f8\u90bb\u7684\u4e09\u4e2a\u5143\u7d20 abc\uff0c\u82e5 a &lt; b &lt; c \u5219\u4e00\u5b9a\u6709  a &lt; b + c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6570\u7ec4\u7684\u9012\u589e\u533a\u95f4\u53ef\u4ee5\u4ece\u53f3\u5230\u5de6\u8fdb\u884c\u64cd\u4f5c\u5c06\u533a\u95f4\u5185\u6240\u6709\u6570\u52a0\u8d77\u6765\uff1b\u64cd\u4f5c\u540e\u4e0d\u5f71\u54cd\u8be5\u533a\u95f4\u53f3\u4fa7\u7684\u9012\u51cf\u533a\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u53f3\u5411\u5de6\u626b\u63cf\u5408\u5e76\u6240\u6709\u9012\u589e\u533a\u95f4(on fly)\u3002</p>"},{"location":"leetcode-contest-355/#2788","title":"2788. \u6309\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32","text":"<pre><code>impl Solution {\n    pub fn split_words_by_separator(words: Vec&lt;String&gt;, separator: char) -&gt; Vec&lt;String&gt; {\n        words\n            .into_iter()\n            .flat_map(|word| {\n                word.split(separator)\n                    .filter(|w| !w.is_empty())\n                    .map(str::to_string)\n                    .collect::&lt;Vec&lt;String&gt;&gt;()\n            })\n            .collect()\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a\u5206\u5272\u5373\u53ef\u3002\u7528flat_map\u65b9\u4fbf\u4e9b\u3002</p>"},{"location":"leetcode-contest-355/#2791","title":"2791. \u6811\u4e2d\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u7684\u8def\u5f84\u6570","text":"<pre><code>use std::{collections::{HashMap, btree_map::Entry}, process::id};\nimpl Solution {\n    #[inline(always)]\n    fn to_bits(c: char) -&gt; Option&lt;u32&gt; {\n        let offset = c as u32 - 'a' as u32;\n        if offset &lt; 26 {\n            return Some(1 &lt;&lt; offset);\n        }\n        None\n    }\n\n    pub fn count_palindrome_paths(parent: Vec&lt;i32&gt;, s: String) -&gt; i64 {\n        let mut pal_cnt: i64 = 0;\n        let mut xors: HashMap&lt;u32, i64&gt; = HashMap::new();\n        let chars: Vec&lt;char&gt; = s.chars().collect();\n        let mut graph: HashMap&lt;i32, Vec&lt;i32&gt;&gt; = HashMap::new();\n        for (idx, ele) in parent.iter().enumerate() {\n            graph.entry(*ele).or_insert(vec![]).push(idx as i32);\n        }\n\n        xors.insert(0, 1);\n        let mut stack: Vec&lt;(i32, u32)&gt; = vec![(0, 0)];\n        while let Some((cur, p_xor)) = stack.pop() {\n            if let Some(v) = graph.get(&amp;cur) {\n                for nxt in v {\n                    let xor = p_xor ^ Self::to_bits(*chars.get(*nxt as usize).unwrap()).unwrap();\n                    pal_cnt += (0..26)\n                        .into_iter()\n                        .map(|i| *xors.get(&amp;((1 &lt;&lt; i) ^ xor)).unwrap_or(&amp;0))\n                        .sum::&lt;i64&gt;();\n                    pal_cnt += xors.get(&amp;xor).unwrap_or(&amp;0);\n                    *xors.entry(xor).or_insert(0) += 1;\n                    stack.push((*nxt, xor));\n                }\n            }\n        }\n        return pal_cnt as i64;\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a</p> <ol> <li> <p>\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9\u7136\u540e\u5224\u65ad\u3002</p> </li> <li> <p>\u5df2\u77e5\u8def\u5f84\u5982\u4f55\u5224\u65ad\u662f\u5426\u56de\u6587\uff1f-&gt; \u5947\u5076\u6027\u5373\u53ef\u5224\u65ad</p> </li> <li> <p>\u5df2\u77e5\u4e00\u5bf9\u70b9\u5982\u4f55\u77e5\u9053\u8def\u5f84\uff1f-&gt; \u4ecelca\u51fa\u53d1\u7684\u4e24\u6761\u8def\u5f84\u5408\u5e76(\u5224\u65ad\u56de\u6587\u6070\u597d\u4e5f\u4e0d\u9700\u8981\u8003\u8651\u65b9\u5411\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u522b\u8d70\u7136\u540e\u5408\u5e76)</p> </li> <li> <p>\u5982\u4f55\u8868\u793a\u8def\u5f84\u4fe1\u606f\uff1f-&gt; \u5982\u679c\u7528HashMap\u9700\u8981\u591a\u6b21copy\uff0c\u8003\u8651\u5230\u53ea\u9700\u8981\u4fdd\u5b58\u5947\u5076\u4fe1\u606f\u4e14\u5b57\u6bcd\u8868\u6709\u9650\uff0c\u7528bitset\u5373\u53ef</p> </li> <li> <p>\u4f7f\u7528bitset\u4e4b\u540e\u53d1\u73b0\u8def\u5f84\u7684\u5408\u5e76\u6070\u597d\u53ef\u4ee5\u7528bitset\u4e4b\u95f4\u7684\u4ea6\u6216\u8868\u793a</p> </li> <li> <p>\u5982\u4f55\u679a\u4e3e\u6240\u6709\u7684\u70b9\u5bf9\uff1f\u70b9\u5bf9\u4e4b\u95f4\u662f\u5426\u6709\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\uff1f</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\uff0c\u9488\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c</p> <p>\u601d\u8def\u7c7b\u4f3c\u4e8e\u70b9\u5206\u6cbb</p> </li> <li> <p>\u7684\u786e\u662f\u6709\u4f9d\u8d56\u5173\u7cfb\uff08\u7236\u8282\u70b9\u53ef\u5229\u7528\u5b50\u8282\u70b9\u5df2\u77e5\u7684\u8def\u5f84\u4fe1\u606f\uff09\uff0c\u4f46\u96be\u4ee5\u5229\u7528\uff08\u56e0\u4e3a\u9700\u8981\u5b50\u8282\u70b9\u4fdd\u5b58\u6240\u6709\u8def\u5f84\u4fe1\u606f\uff0c\u8fd9\u5f00\u9500\u53c8\u4e0d\u5c0f\uff09\u3002\u6b64\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3alca\u65f6\u4e24\u4e2a\u5b50\u6811\u4e92\u76f8\u5339\u914d\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u5927(n^2)</p> </li> <li> <p>\u8fd9\u91cc\u5361\u58f3\u4e86\uff0c\u7136\u540e\u770b\u9898\u89e3\uff1a</p> </li> <li> <p>\u5982\u4f55\u5229\u7528\u4f9d\u8d56\u5173\u7cfb\u51cf\u5c11\u8ba1\u7b97\uff1f\u8003\u8651 a ^ b ^ a = b \u56e0\u6b64\u8def\u5f84 a -&gt; b -&gt; c ^ a -&gt; b -&gt; d = c -&gt;b -&gt; d\u3002\u56e0\u4e3a\u8def\u5f84\u95f4\u7684\u76f8\u4e92\u62b5\u6d88\u3002\u6211\u4eec\u4e0d\u9700\u8981\u5355\u72ec\u5b58\u50a8\u6bcf\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8def\u5f84\uff0c\u4efb\u4f55\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u53ef\u4ee5\u6709\u4e24\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u5f02\u6216\u5f97\u5230\uff01</p> </li> <li> <p>\u679a\u4e3e\u70b9\u5bf9\u65f6\u53ef\u4ee5\u5229\u7528\u4e24\u6570\u4e4b\u548c\u7684\u601d\u8def\u3002\uff08\u4e0d\u8981\u88ab\u5b57\u6bcd\u8868\u5413\u5230\uff0c\u53ea\u8981\u5b83\u6709\u9650\uff0c\u5c31\u662fO(1)\uff01</p> </li> <li> <p>\u6240\u4ee5\u6700\u540e\u5c31\u80fd\u4ee5<code>O(n)</code>\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u9053\u9898</p> </li> </ol>"},{"location":"leetcode-contest-355/#2790","title":"2790. \u957f\u5ea6\u9012\u589e\u7ec4\u7684\u6700\u5927\u6570\u76ee","text":"<pre><code>impl Solution {\n    pub fn max_increasing_groups(usage_limits: Vec&lt;i32&gt;) -&gt; i32 {\n        let mut ord_limits = usage_limits.into_iter().map(|x| x as i64).collect::&lt;Vec&lt;i64&gt;&gt;();\n        ord_limits.sort();\n        ord_limits.into_iter()\n            .fold((0, 0), |(cur, rem), num| {\n                if rem + num &gt;= cur + 1 {\n                    (cur + 1, rem + num - cur - 1)\n                } else {\n                    (cur, rem + num)\n                }\n            })\n            .0 as i32\n    }\n}\n</code></pre> <p>\u76f4\u89c9\uff1a</p> <ol> <li>\u5148\u6392\u4e2a\u5e8f\uff0c\u8bd5\u7740\u6784\u9020\u4e00\u4e0b</li> <li>\u4ece\u591a\u5230\u5c11\u5c1d\u8bd5\u903c\u8fd1\u9898\u76ee\u8981\u6c42\uff0c\u591a\u7684\u53ef\u4ee5\u6d88\u53bb</li> <li>\u53d1\u73b0\u601d\u8def\u4e0d\u592a\u5bf9\uff0c\u53c8\u8003\u8651\u5982\u4f55\u628a\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u6253\u4e71\uff0c\u82e5\u6709\u4e86\u6253\u4e71\u7b97\u6cd5\u80fd\u5426\u9006\u5411\u8fd8\u539f</li> <li>\u601d\u7d22\u65e0\u679c\uff0c\u770b\u9898\u89e3\uff1a</li> <li>\u4ece\u5c11\u5230\u591a\u5c1d\u8bd5\u903c\u8fd1\u9898\u76ee\u8981\u6c42\uff0c\u591a\u7684\u53ef\u4ee5\u8865\u5230\u540e\u9762\uff08\u9707\u60ca</li> </ol>"},{"location":"leetcode-contest-355/#_1","title":"\u53cd\u601d","text":""},{"location":"leetcode-contest-355/#_2","title":"\u601d\u8003\u65b9\u5f0f","text":"<p>\u505a\u4e86\u505a\u9898\u53d1\u73b0\u81ea\u5df1\u7684\u601d\u7ef4\u8fd8\u662f\u5f88\u5355\u7eaf\u7684\u3002\u3002\u3002</p> <p>\u505a\u9898\u5c31\u4e24\u4e2a\u601d\u8def\uff1a</p> <ol> <li>\u679a\u4e3e\u5e76\u5206\u522b\u5224\u65ad\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u770b\u80fd\u4e0d\u80fd\u6d88\u9664\u4f9d\u8d56\u5173\u7cfb\uff08\u679a\u4e3e\u4e5f\u53ef\u4ee5\u662f\u4e00\u79cd\u6784\u9020\uff0c\u4e0d\u8fc7\u663e\u7136\u6784\u9020\u96be\u5ea6\u592a\u5927</li> <li>\u6784\u9020\uff0c\u6b63\u5411\u4e0d\u884c\u5c31\u53cd\u5411\uff08\u6784\u9020\u4e5f\u53ef\u4ee5\u7b97\u4e00\u79cd\u679a\u4e3e\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7ed3\u6784\u5e76\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6784\u9020\u6761\u4ef6-&gt;\u4f46\u662f\u6709\u7684\u9898\u663e\u7136\u641c\u7d22\u7a7a\u95f4\u592a\u5927\uff0c\u53ea\u80fd\u6784\u9020</li> </ol> <p>\u4e00\u4e2a\u6280\u5de7\uff1a</p> <ol> <li>\u7279\u5316\uff0c\u4e0d\u7528\u7684\u4fe1\u606f\u5c31\u522b\u7ba1\u4e86\uff0c\u964d\u4f4e\u70b9\u5e38\u6570\u65f6\u95f4\u3002</li> </ol> <p>\u540e\u9762\u4e24\u4e2a\u96be\u9898\u90fd\u662f\u8fd9\u6837\u5957\uff0c\u4f46\u5374\u6ca1\u6709\u5957\u6210\u3002</p> <p>\u5c1d\u8bd5\u6cdb\u5316\u4e00\u4e0b\u51e0\u4e2a\u9898\uff1a</p> <p>\u7ed9\u67d0\u4e2a\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c\u6c42\u6ee1\u8db3\u67d0\u4e2a\u6027\u8d28\u7684\u7ed3\u6784\u7684\u96c6\u5408\u3002\u4e0d\u540c\u70b9\u5728\u4e8e\u7ed3\u6784\u7684\u5b9a\u4e49\u65b9\u5f0f\u4ee5\u53ca\u6027\u8d28\uff08\u597d\u50cf\u6ca1\u5565\u7528</p> <p>\u601d\u8def\u597d\u50cf\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u4e3a\u4ec0\u4e48\u505a\u4e0d\u51fa\u6765\u5462\uff1f</p> <p>\u5173\u952e\u5c31\u5728\u4e8e\u5982\u4f55\u6d88\u9664\u201c\u4f9d\u8d56\u5173\u7cfb\u201d\u4ee5\u53ca\u5982\u4f55\u201c\u6784\u9020\u201d\u662f\u9760\u76f4\u89c9\u7684\u3002\u3002\u3002\u4f46\u662f\u6211\u7ecf\u8fc7\u7684\u8bad\u7ec3\u8f83\u5c11\u6ca1\u80fd\u517b\u6210\u8fd9\u6837\u7684\u76f4\u89c9\u3002</p> <p>\u62ff 2791 \u6765\u770b\uff0c\u5176\u4f9d\u8d56\u5173\u7cfb\u5728\u4e8e \u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684 \u8def\u5f84 \u4f9d\u8d56\u4e8e \u5b83\u4eec\u5230 \u6839\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u4e14\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u662f\u7531\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u4fdd\u8bc1\u7684\u3002\u4f46\u662f\u6211\u6ca1\u60f3\u5230\u5f02\u6216\u7684\u8fd9\u4e2a\u6027\u8d28\uff0c\u6ca1\u6709\u8fd9\u4e2a\u6027\u8d28\u7684\u63d0\u793a\u81ea\u7136\u4e5f\u5c31\u60f3\u4e0d\u5230\u771f\u6b63\u7684\u4f9d\u8d56\u5173\u7cfb\u4e86\u3002\u800c\u4e4b\u524d\u505a\u7684\u52a8\u6001\u89c4\u5212\u53c8\u7ed9\u4e86\u6211\u4e00\u79cd\u4e00\u5b9a\u662f\u201c\u5b50\u8282\u70b9\u4f9d\u8d56\u7236\u8282\u70b9\u201d\u7684\u9519\u89c9\uff0c\u6240\u4ee5\u5c31\u4e00\u76f4\u5f80\u8fd9\u65b9\u9762\u8003\u8651\u4e86\u3002</p> <p>\u62ff 2790  \u6765\u770b\uff0c\u5982\u679c\u6211\u5728\u8003\u8651\u76f4\u89c92\u65f6\u7a0d\u5fae\u53cd\u4e00\u4e0b\u5c31\u53ef\u4ee5\u628a\u6784\u9020\u60f3\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u5374\u6700\u540e\u9677\u5165\u4e86\u9519\u8bef\u7684\u601d\u8def\u91cc\u53bb\u3002</p> <p>\u4e24\u9053\u9898\u56e0\u4e3a\u611f\u89c9\u505a\u4e0d\u51fa\u9677\u5165\u6b7b\u80e1\u540c\u6765\u800c\u653e\u5f03\u4e86\uff0c\u4f46\u5982\u679c\u540e\u9762\u80fd\u5728\u505a\u9898\u7684\u540c\u65f6\u8bb0\u5f55\u81ea\u5df1\u7684\u601d\u8003\u65b9\u5f0f\uff0c\u4e5f\u8bb8\u80fd\u907f\u514d\u8fd9\u79cd\u9677\u5165\u6b7b\u80e1\u540c\u7684\u611f\u89c9\u3002</p>"},{"location":"leetcode-contest-355/#_3","title":"\u7b97\u6cd5","text":"<p>\u67e5 2791 \u76f8\u5173\u8d44\u6599\u65f6\u53d1\u73b0\u4e86\u8bb8\u591a\u7b97\u6cd5\uff1a</p> <p>\u5982\u4e0a\u9762\u63d0\u5230\u7684\u70b9\u5206\u6cbb\uff0c\u4ee5\u53ca\u6c42lca\u7684\u7b97\u6cd5\u3002\u5ffd\u7136\u60f3\u8d77\u6765\u4e4b\u524d\u5199\u7f16\u8bd1\u5668\u505a\u7c7b\u578b\u63a8\u5bfc\u6c42\u6700\u5c0f\u7236\u7c7b\u65f6\u4e5f\u6d89\u53ca\u6c42lca\uff0c\u4f46\u5f53\u65f6\u597d\u50cf\u7528\u4e86\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\u7684\u66b4\u529b\u505a\u6cd5\u3002\u3002</p> <p>\u53e6\u5916\u505a\u8fd9\u4efd\u7b14\u8bb0\u65f6\u672c\u6765\u6253\u7b97\u65e2\u5199\u201c\u76f4\u89c9\u201d\uff0c\u4e5f\u5199\u8bc1\u660e\u7684\uff0c\u4f46\u662f\u611f\u89c9\u5199\u7b97\u6cd5\u7684\u8bc1\u660e\u6bd4\u5199\u7b97\u6cd5\u96be\u591a\u4e86\u3002\u3002\u3002\u5bf9\u4e8e\u8fd9\u79cd\u6709\u6d4b\u8bd5\u7528\u4f8b\u7684\u9898\u76ee\u8fd8\u662f\u76f8\u4fe1\u76f4\u89c9\u4e86\u3002\u3002\u3002</p>"},{"location":"leetcode-contest-355/#rust","title":"Rust","text":"<p>rust\u7684\u8bb8\u591a\u51fd\u6570\u5f0f\u7279\u6027\u548c\u96c6\u5408\u975e\u5e38\u6709\u7528\u3002</p> <p>JonGjengset\u7684youtube\u9891\u9053\u6709\u5173\u4e8e\u5b83\u4eec\u7684\u5f88\u597d\u7684\u4ecb\u7ecd</p> <ul> <li>collection</li> <li>iter</li> </ul> <p>\u53d1\u73b0\u4e24\u4e2a\u6709\u5173rust\u7684\u6709\u8da3\u7684\u9879\u76ee\uff1a</p> <ul> <li>frunk crate\uff1arust\u51fd\u6570\u5f0f\u7f16\u7a0b\u652f\u6301 </li> <li>cranelift\uff1arust\u4f3c\u4e4e\u8ba1\u5212\u672a\u6765\u7528\u8fd9\u4e2a\u66ff\u4ee3llvm\u4f5c\u4e3a\u540e\u7aef(\u8fd9\u6837\u5c31\u5b8c\u5168\u81ea\u4e3e\u4e86\uff01) </li> </ul> <p>\u6587\u7ae0:</p> <ul> <li>Rust\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff01</li> <li>ebpf\u4e0d\u662f\u56fe\u7075\u5b8c\u5907\u7684\uff01</li> </ul> <p>\u4e66\u7c4d\uff1a</p> <ul> <li>effective rust</li> </ul> <p>\u8bfe\u7a0b:</p> <ul> <li>15-816 Linear Logic  by Frank Pfenning </li> </ul>"},{"location":"leetcode-hot100-12/","title":"Leetcode hot100 12","text":"<p>2024.11.22</p> <p>\u90e8\u5206\u4ee3\u7801\u6765\u81ea\u5b98\u65b9\u9898\u89e3</p>"},{"location":"leetcode-hot100-12/#_1","title":"\u54c8\u5e0c","text":""},{"location":"leetcode-hot100-12/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<p>\u66b4\u529b\u505a\u6cd5\uff1a<code>O(n^2)</code> \u4e24\u91cd\u5faa\u73af\u904d\u5386\u6240\u6709\u7ec4\u5408</p> <p>\u4f18\u5316\uff1a</p> <p>\u8003\u8651\u5185\u5c42\u5faa\u73af\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u67d0\u4e2a\u786e\u5b9a\u6307 <code>target - num[i]</code></p> <p>\u53ef\u4ee5\u628a\u4e24\u5c42\u5faa\u73af\u7684\u904d\u5386\u65b9\u5411\u7edf\u4e00\uff0c\u518d\u628a\u7b2c\u4e8c\u5c42\u5faa\u73af\u7684\u904d\u5386\u7528\u54c8\u5e0c\u67e5\u8868\u66ff\u4ee3\uff08\u7b2c\u4e00\u6b21\u5faa\u73af\u65f6\u5df2\u6536\u96c6\u4e86\u6240\u6709\u4fe1\u606f\uff09</p>"},{"location":"leetcode-hot100-12/#49","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<ol> <li>\u5982\u4f55\u5224\u65ad\u5f02\u4f4d\u8bcd\uff1f -&gt; \u6392\u5e8f\uff08\u6216\u8005\u5b57\u6bcd\u8ba1\u6570\uff09</li> <li>\u5982\u4f55\u5206\u7ec4? -&gt; \u904d\u5386\uff0c\u5bf9 key \u54c8\u5e0c\u5f97\u5230\u5206\u7ec4</li> </ol> <pre><code>class Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            key = \"\".join(sorted(st))\n            mp[key].append(st)\n\n        return list(mp.values())\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            counts = [0] * 26\n            for ch in st:\n                counts[ord(ch) - ord(\"a\")] += 1\n            # \u9700\u8981\u5c06 list \u8f6c\u6362\u6210 tuple \u624d\u80fd\u8fdb\u884c\u54c8\u5e0c\n            mp[tuple(counts)].append(st)\n\n        return list(mp.values())\n</code></pre>"},{"location":"leetcode-hot100-12/#128","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002</p> <p>\u4e5f\u5c31\u662f\u7a7f\u9488\u5f15\u7ebf\u80fd\u8fbe\u5230\u7684\u6700\u957f\u957f\u5ea6</p> <p>\u6700\u521d\u601d\u8def\uff1a</p> <p>\u53ea\u8003\u8651\u6570\u7ec4\u7684\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u80fd\u5426\u6c42\u51fa\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u6700\u957f\u5e8f\u5217\u5462\uff1f</p> <p>\u8003\u8651\u5176\u4e2d\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570 <code>n</code>\uff0c\u4e0e\u4ed6\u76f8\u90bb\u7684\u6570\u80af\u5b9a\u4e3a <code>n+1</code> <code>n-1</code></p> <p>\u5982\u679c\u5728\u6269\u5c55\u533a\u95f4\u65f6\u6709\u4e00\u4e2a\u5927\u54c8\u5e0c\u8868\uff0ckey \u4e3a\u533a\u95f4\u7aef\u70b9\uff0cvalue \u4e3a\u8be5\u533a\u95f4\u957f\u5ea6\uff08\u53ef\u4ee5\u4e0d\u7528\u8bb0\u5f55\u7aef\u70b9\u4e0b\u6807\uff01\uff09</p> <p>\u6bcf\u6b21\u6269\u5c55\u4e00\u4e2a\u6570\u65f6\uff0c\u5c31\u80fd\u77e5\u9053\u662f\u5426\u53ef\u4ee5\u52a0\u5165\u5df2\u6709\u533a\u95f4\u94fe\u4e2d\u4e86</p> <pre><code>class Solution(object):\n    def longestConsecutive(self, nums):\n        hash_dict = dict()\n\n        max_length = 0\n        for num in nums:\n            if num not in hash_dict:\n                left = hash_dict.get(num - 1, 0)\n                right = hash_dict.get(num + 1, 0)\n\n                cur_length = 1 + left + right\n                if cur_length &gt; max_length:\n                    max_length = cur_length\n\n                hash_dict[num] = cur_length\n                hash_dict[num - left] = cur_length\n                hash_dict[num + right] = cur_length\n\n        return max_length\n</code></pre> <p>\u4f46\u5982\u679c\u80fd\u7531 <code>n</code> \u77e5\u9053 <code>n-1</code>\uff0c\u81ea\u7136\u4e5f\u80fd\u77e5\u9053 <code>n-2</code> ...</p> <p>\u6240\u4ee5\u624b\u52a8\u5bf9\u6bcf\u4e2a\u53ef\u80fd\u7684\u533a\u95f4\u7a7f\u9488\u5f15\u7ebf\u5373\u53ef\uff01</p> <pre><code>class Solution:\n    def longestConsecutive(self, nums: List[int]) -&gt; int:\n        longest_streak = 0\n        num_set = set(nums)\n\n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n\n                longest_streak = max(longest_streak, current_streak)\n\n        return longest_streak\n</code></pre>"},{"location":"leetcode-hot100-12/#_2","title":"\u53cc\u6307\u9488","text":""},{"location":"leetcode-hot100-12/#283","title":"283. \u79fb\u52a8\u96f6","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 <code>0</code> \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p>\u7b2c\u4e00\u4e2a\u60f3\u6cd5\uff1a\u5192\u6ce1\u6392\u5e8f</p> <p>\u4f46\u662f\u5192\u6ce1\u65f6\u4e5f\u6709\u5f88\u591a\u591a\u4f59\u52a8\u4f5c</p> <p>\u5b9e\u9645\u4e0a\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u7ef4\u6301\u6027\u8d28\uff08\u4e0e\u5192\u6ce1\u6392\u5e8f\u76f8\u540c\uff09</p> <p>\u4f46\u4e3a\u4e86\u7ef4\u6301\u6027\u8d28\u53d8\u5316\u6570\u7ec4\u65f6\uff0c\u4e0d\u7528\u50cf\u5192\u6ce1\u4e00\u6837\u6328\u4e2a\u6bd4\u8f83\uff0c\u800c\u662f\u76f4\u63a5\u9009\u62e9\u4e00\u4e2a\u975e0\u7684\u4ea4\u6362\uff08\u4f7f\u7528\u53e6\u5916\u4e00\u4e2a\u6307\u9488\u5373\u53ef\uff09</p> <p>\u56e0\u6b64\u662f \u53cc\u6307\u9488</p> <pre><code>class Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:\n        n = len(nums)\n        left = right = 0\n        while right &lt; n:\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n</code></pre>"},{"location":"leetcode-hot100-12/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u66b4\u529b\u89e3\u6cd5\uff1a\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u5bb9\u91cf\u7ec4\u5408 <code>O(n^2)</code></p> <p>\u4f18\u5316\uff1a\u8003\u8651\u54ea\u91cc\u6709\u5197\u4f59\u8ba1\u7b97\uff1f-&gt; \u5982\u679c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u540c\u65f6\u51cf\u5c0f\uff0c\u5bb9\u91cf\u4e0d\u53ef\u80fd\u6700\u5927\u3002\u800c\u4e14\u9ad8\u5ea6\u53d6\u51b3\u4e8e\u6700\u4f4e\u5899\u3002</p> <p>\u8003\u8651\u4e00\u79cd\u6ca1\u6709\u5197\u4f59\u7684\u904d\u5386\u987a\u5e8f\u3002</p> <p>\u8003\u8651\u5230\u76ee\u6807\u662f\u6c42\u6781\u503c\u3002\u6211\u4eec\u7684\u987a\u5e8f\u6700\u597d\u80fd\u907f\u514d\u660e\u663e\u7684\u9012\u51cf</p> <p>\u8003\u8651\u5bbd\u5ea6\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff0c\u5219\u6bcf\u6b21\u51cf\u5c0f\u5bbd\u5ea6\u90fd\u8981\u589e\u52a0\u9ad8\u5ea6...</p> <p>\u6240\u4ee5\u53cc\u6307\u9488\u5373\u53ef\uff0c\u6bcf\u6b21\u79fb\u52a8\u6307\u5411\u8f83\u4f4e\u5899\u7684\u6307\u9488 <code>O(n)</code></p> <pre><code>class Solution:\n    def maxArea(self, height: List[int]) -&gt; int:\n        l, r = 0, len(height) - 1\n        ans = 0\n        while l &lt; r:\n            area = min(height[l], height[r]) * (r - l)\n            ans = max(ans, area)\n            if height[l] &lt;= height[r]:\n                l += 1\n            else:\n                r -= 1\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 <code>[nums[i], nums[j], nums[k]]</code> \u6ee1\u8db3 <code>i != j</code>\u3001<code>i != k</code> \u4e14 <code>j != k</code> \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 <code>nums[i] + nums[j] + nums[k] == 0</code> \u3002\u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a <code>0</code> \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <ol> <li>\u8003\u8651\u5982\u679c\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u5c31\u6210\u4e86\u300c\u4e24\u6570\u4e4b\u548c\u300d\u95ee\u9898\u3002<code>O(n^2)</code></li> <li>\u6b64\u65f6\u7684\u4e24\u91cd\u904d\u5386\u987a\u5e8f\u5982\u679c\u518d\u4e00\u81f4\u5316\uff1f -&gt; \u4f46\u4e5f\u6ca1\u529e\u6cd5\u77e5\u9053\u7b2c\u4e09\u4e2a\u6570\u662f\u4ec0\u4e48...</li> <li>\u8003\u8651\u5230\u4e09\u6570\u4e4b\u548c\u4e00\u5b9a\u4e3a 0\uff0c\u540c\u65f6\u8fd8\u6709 \u4e0d\u91cd\u590d \u7684\u8981\u6c42</li> <li>\u4e0d\u91cd\u590d -&gt; \u6392\u5e8f\uff0c\u7136\u540e\u5185\u5c42\u5faa\u73af\u7528\u53cc\u6307\u9488\uff08\u8fd8\u662f\u7b80\u5316\u904d\u5386\uff09</li> <li>\u4e3a\u4ec0\u4e48\u300c\u4e24\u6570\u4e4b\u548c\u300d\u4e0d\u7528\u53cc\u6307\u9488\uff1f-&gt; \u6392\u5e8f\u8017\u65f6\u592a\u957f</li> </ol> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        n = len(nums)\n        nums.sort()\n        ans = list()\n\n        # \u679a\u4e3e a\n        for first in range(n):\n            # \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n            if first &gt; 0 and nums[first] == nums[first - 1]:\n                continue\n            # c \u5bf9\u5e94\u7684\u6307\u9488\u521d\u59cb\u6307\u5411\u6570\u7ec4\u7684\u6700\u53f3\u7aef\n            third = n - 1\n            target = -nums[first]\n            # \u679a\u4e3e b\n            for second in range(first + 1, n):\n                # \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n                if second &gt; first + 1 and nums[second] == nums[second - 1]:\n                    continue\n                # \u9700\u8981\u4fdd\u8bc1 b \u7684\u6307\u9488\u5728 c \u7684\u6307\u9488\u7684\u5de6\u4fa7\n                while second &lt; third and nums[second] + nums[third] &gt; target:\n                    third -= 1\n                # \u5982\u679c\u6307\u9488\u91cd\u5408\uff0c\u968f\u7740 b \u540e\u7eed\u7684\u589e\u52a0\n                # \u5c31\u4e0d\u4f1a\u6709\u6ee1\u8db3 a+b+c=0 \u5e76\u4e14 b&lt;c \u7684 c \u4e86\uff0c\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\n                if second == third:\n                    break\n                if nums[second] + nums[third] == target:\n                    ans.append([nums[first], nums[second], nums[third]])\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#42","title":"42. \u63a5\u96e8\u6c34","text":"<ol> <li>\u66b4\u529b\u601d\u8def\u663e\u7136\u8d85\u65f6\uff08\u6bcf\u4e00\u5c42\u5206\u522b\u904d\u5386\uff09</li> <li>\u8003\u8651\uff1a</li> <li>\u4ec0\u4e48\u65f6\u5019\u80fd\u63a5\u5230\u96e8\u6c34 -&gt; \u51f9\u5f62   </li> <li>\u4ec0\u4e48\u662f\u51f9 -&gt; \u4e24\u4fa7\u5899\u4e2d\u8f83\u77ee\u4fa7\u4e3a\u5355\u4fa7\u6781\u503c\uff08\u4ece\u6b64\u671b\u53bb\uff0c\u4e00\u9a6c\u5e73\u5ddd</li> </ol> <p>\u6240\u4ee5</p> <p></p> <pre><code>class Solution:\n    def trap(self, height: List[int]) -&gt; int:\n        if not height:\n            return 0\n\n        n = len(height)\n        leftMax = [height[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            leftMax[i] = max(leftMax[i - 1], height[i])\n\n        rightMax = [0] * (n - 1) + [height[n - 1]]\n        for i in range(n - 2, -1, -1):\n            rightMax[i] = max(rightMax[i + 1], height[i])\n\n        ans = sum(min(leftMax[i], rightMax[i]) - height[i] for i in range(n))\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#_3","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"leetcode-hot100-12/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f \u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u6ed1\u52a8\u7a97\u53e3\uff0c\u6709\u91cd\u590d\u7684\u5c31\u6536\u7f29\uff08\u907f\u514d\u904d\u5386\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u4e32</p> <pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        l = 0\n        res = 0\n        cs = set()\n        for i, c in enumerate(s):\n            if c in cs:\n                while c in cs:\n                    cs.remove(s[l])\n                    l += 1\n            cs.add(c)\n            res = max(res, i - l + 1)\n        return res\n</code></pre>"},{"location":"leetcode-hot100-12/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>p</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6240\u6709 <code>p</code> \u7684 \u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p> <p>\u7b80\u5355\u66b4\u529b\u505a\u6cd5\uff1a<code>O(nlogn + nmlogm)</code></p> <pre><code>class Solution:\n    def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n        res = []\n        ss = sorted(p)\n        for i in range(0, len(s) - len(p) + 1):\n            sub = s[i: i + len(p)]\n            if sorted(sub) == ss:\n                res.append(i)\n        return res \n</code></pre> <p>\u4f46\u8003\u8651\u6ed1\u52a8\u7a97\u53e3\uff0c\u6e10\u53d8\u8ba1\u7b97 \u00b7<code>O(m+(n\u2212m)\u03a3)</code></p> <pre><code>class Solution:\n    def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n        s_len, p_len = len(s), len(p)\n\n        if s_len &lt; p_len:\n            return []\n\n        ans = []\n        s_count = [0] * 26\n        p_count = [0] * 26\n        for i in range(p_len):\n            s_count[ord(s[i]) - 97] += 1\n            p_count[ord(p[i]) - 97] += 1\n\n        if s_count == p_count:\n            ans.append(0)\n\n        for i in range(s_len - p_len):\n            s_count[ord(s[i]) - 97] -= 1\n            s_count[ord(s[i + p_len]) - 97] += 1\n\n            if s_count == p_count:\n                ans.append(i + 1)\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#_4","title":"\u5b50\u4e32","text":""},{"location":"leetcode-hot100-12/#560-k","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de \u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a <code>k</code> \u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570 \u3002</p> <p>\u66b4\u529b\u89e3\u6cd5\uff1a<code>O(n^2)</code></p> <p>\u4f46\u662f\u8003\u8651... <code>sum(a...b) = sum(0... b) - sum(0... a) = k</code></p> <p>\u628a\u6bcf\u4e2a\u6570<code>a</code>\u6539\u4e3a <code>sum(0... a)</code>\uff0c\u8fd9\u4e0d\u5c31\u6210\u4e86\u300c\u4e24\u6570\u4e4b\u548c\u300d\u5417\uff1f</p> <p>\u6f02\u4eae\u7684\u95ee\u9898\u8f6c\u5316</p> <pre><code>from collections import defaultdict\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -&gt; int:\n        mp = defaultdict(int)\n        mp[0] = 1\n        prsum = 0\n        res = 0\n        for n in nums:\n            prsum += n\n            res += mp[prsum - k]\n            mp[prsum] += 1\n        return res \n</code></pre>"},{"location":"leetcode-hot100-12/#239","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":"<p>\u4e00\u5f00\u59cb\u601d\u8def\uff1a</p> <p>\u6709\u6ca1\u6709\u8fd9\u6837\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u589e\u5220\u90fd\u5feb\uff0c\u800c\u4e14\u80fd\u6c42\u6700\u503c\uff1f<code>O(nlogn)</code></p> <p>\u5f53\u7136\u6709\uff0c\u4f46\u524d\u63d0\u662f\u4f60\u77e5\u9053 api </p> <pre><code>class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\n        n = len(nums)\n        # \u6ce8\u610f Python \u9ed8\u8ba4\u7684\u4f18\u5148\u961f\u5217\u662f\u5c0f\u6839\u5806\n        q = [(-nums[i], i) for i in range(k)]\n        heapq.heapify(q)\n\n        ans = [-q[0][0]]\n        for i in range(k, n):\n            heapq.heappush(q, (-nums[i], i))\n            while q[0][1] &lt;= i - k:\n                heapq.heappop(q)\n            ans.append(-q[0][0])\n\n        return ans\n</code></pre> <p><code>O(n)</code> \u7684\u4f18\u5316\uff1f\u4f60\u6ca1\u770b\u9519...</p> <p>\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6c42\u51fa\u7684\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5f53\u524d\u7684\u6ed1\u52a8\u7a97\u53e3\u4e2d\u6709\u4e24\u4e2a\u4e0b\u6807 i \u548c j\uff0c\u5176\u4e2d i \u5728 j \u7684\u5de6\u4fa7\uff08i&lt;j\uff09\uff0c\u5e76\u4e14 i \u5bf9\u5e94\u7684\u5143\u7d20\u4e0d\u5927\u4e8e j \u5bf9\u5e94\u7684\u5143\u7d20\uff08nums[i]\u2264nums[j]\uff09\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f</p> <p>\u5f53\u6ed1\u52a8\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u65f6\uff0c\u53ea\u8981 i \u8fd8\u5728\u7a97\u53e3\u4e2d\uff0c\u90a3\u4e48 j \u4e00\u5b9a\u4e5f\u8fd8\u5728\u7a97\u53e3\u4e2d\uff0c\u8fd9\u662f i \u5728 j \u7684\u5de6\u4fa7\u6240\u4fdd\u8bc1\u7684\u3002\u56e0\u6b64\uff0c\u7531\u4e8e nums[j] \u7684\u5b58\u5728\uff0cnums[i] \u4e00\u5b9a\u4e0d\u4f1a\u662f\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 nums[i] \u6c38\u4e45\u5730\u79fb\u9664\u3002</p> <p>(\u6df1\u5165\u6ed1\u52a8\u8fc7\u7a0b\u5185\u90e8</p> <p>\u5373\u7ef4\u62a4\u4e86\u987a\u5e8f\uff0c\u4e5f\u7ef4\u62a4\u4e86\u6781\u503c\uff0c\u5999\u54c9\uff08\u5173\u952e\u5728\u610f\u8bc6\u5230\uff1a\u4e0d\u662f\u6781\u503c\u7684\u53ef\u4ee5\u65e9\u65e9\u4e22\u6389\uff0c\u800c\u4e0d\u662f\u7b49\u6ed1\u8fc7\u540e\u518d\u4e22</p> <pre><code>class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\n        n = len(nums)\n        q = collections.deque()\n        for i in range(k):\n            while q and nums[i] &gt;= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n\n        ans = [nums[q[0]]]\n        for i in range(k, n):\n            while q and nums[i] &gt;= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            while q[0] &lt;= i - k:\n                q.popleft()\n            ans.append(nums[q[0]])\n\n        return ans\n</code></pre>"},{"location":"leetcode-hot100-12/#76","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>t</code> \u3002\u8fd4\u56de <code>s</code> \u4e2d\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c <code>s</code> \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code> \u3002</p> <p>\u4e00\u5f00\u59cb\u5c31\u610f\u8bc6\u5230\uff0c\u5178\u578b\u7684\u6ed1\u52a8\u7a97\u53e3</p> <p>\u4f46\u5173\u952e\u5728\u4e8e\u9009\u62e9\u600e\u6837\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5f53\u524d\u7a97\u53e3\u4fe1\u606f</p> <p>(\u5982\u679c\u7528\u539f\u751f dict\uff0c\u7684\u786e\u8fc7\u4e8e\u7e41\u7410...</p> <pre><code>class Solution:\n    def minWindow(self, s: str, t: str) -&gt; str:\n        ans_left, ans_right = -1, len(s)\n        cnt_s = Counter()  # s \u5b50\u4e32\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n        cnt_t = Counter(t)  # t \u4e2d\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n\n        left = 0\n        for right, c in enumerate(s):  # \u79fb\u52a8\u5b50\u4e32\u53f3\u7aef\u70b9\n            cnt_s[c] += 1  # \u53f3\u7aef\u70b9\u5b57\u6bcd\u79fb\u5165\u5b50\u4e32\n            while cnt_s &gt;= cnt_t:  # \u6db5\u76d6\n                if right - left &lt; ans_right - ans_left:  # \u627e\u5230\u66f4\u77ed\u7684\u5b50\u4e32\n                    ans_left, ans_right = left, right  # \u8bb0\u5f55\u6b64\u65f6\u7684\u5de6\u53f3\u7aef\u70b9\n                cnt_s[s[left]] -= 1  # \u5de6\u7aef\u70b9\u5b57\u6bcd\u79fb\u51fa\u5b50\u4e32\n                left += 1\n        return \"\" if ans_left &lt; 0 else s[ans_left: ans_right + 1]\n</code></pre>"},{"location":"leetcode-hot100-25/","title":"Leetcode hot100 25","text":"<p>2024.12.1</p>"},{"location":"leetcode-hot100-25/#_1","title":"\u52a8\u6001\u89c4\u5212\u57fa\u672c\u77e5\u8bc6","text":"<p>\u6709\u8da3\u7684\u65b9\u6cd5\uff1a</p> <ul> <li><code>10^7</code> \u8ba1\u7b97\u4e3a 1s</li> </ul> <p>\u76f8\u5173\u8d44\u6599</p> <ol> <li>\u7b97\u6cd5\u901a\u5173\u624b\u518c</li> <li>ntnu</li> <li>hello\u7b97\u6cd5</li> <li>oi wiki</li> </ol> <p>dynamic programming = divide-and-conquer method + memoization</p> <pre><code>1. \u628a\u539f\u554f\u984c\u905e\u8ff4\u5206\u5272\u6210\u8a31\u591a\u66f4\u5c0f\u7684\u554f\u984c\u3002\uff08recurrence\uff09\n   1-1. \u5b50\u554f\u984c\u8207\u539f\u554f\u984c\u7684\u6c42\u89e3\u65b9\u5f0f\u7686\u985e\u4f3c\u3002\uff08optimal sub-structure\uff09\n   1-2. \u5b50\u554f\u984c\u6703\u4e00\u800c\u518d\u3001\u518d\u800c\u4e09\u7684\u51fa\u73fe\u3002\uff08overlapping sub-problems\uff09\n2. \u8a2d\u8a08\u8a08\u7b97\u904e\u7a0b\uff1a\n   2-1. \u78ba\u8a8d\u6bcf\u500b\u554f\u984c\u9700\u8981\u54ea\u4e9b\u5b50\u554f\u984c\u4f86\u8a08\u7b97\u7b54\u6848\u3002\uff08recurrence\uff09\n   2-2. \u78ba\u8a8d\u7e3d\u5171\u6709\u54ea\u4e9b\u554f\u984c\u3002\uff08state space\uff09\n   2-3. \u628a\u554f\u984c\u4e00\u4e00\u5c0d\u61c9\u5230\u8868\u683c\u3002\uff08lookup table\uff09\n   2-4. \u6c7a\u5b9a\u554f\u984c\u7684\u8a08\u7b97\u9806\u5e8f\u3002\uff08computational sequence\uff09\n   2-5. \u78ba\u8a8d\u521d\u59cb\u503c\u3001\u8a08\u7b97\u7bc4\u570d\u3002\uff08initial states / boundary\uff09\n3. \u5be6\u4f5c\uff0c\u4e3b\u8981\u6709\u5169\u7a2e\u65b9\u5f0f\uff1a\n   3-1. top-down\n   3-2. bottom-up\n</code></pre> <p>\u70ba\u4ec0\u9ebc\u5206\u5272\u554f\u984c\u4e4b\u5f8c\uff0c\u5c31\u5bb9\u6613\u8a08\u7b97\u7b54\u6848\u5462\uff1f\u56e0\u70ba\u5206\u5272\u554f\u984c\u6642\uff0c\u540c\u6642\u4e5f\u5206\u985e\u4e86\u9019\u500b\u554f\u984c\u7684\u6240\u6709\u53ef\u80fd\u7b54\u6848\u3002\u5206\u985e\u4f7f\u5f97\u7b54\u6848\u7684\u898f\u5f8b\u8b8a\u5f97\u55ae\u7d14\uff0c\u65bc\u662f\u66f4\u5bb9\u6613\u6c42\u5f97\u7b54\u6848\u3002</p>"},{"location":"leetcode-hot100-25/#leetcode","title":"Leetcode \u9898\u76ee","text":""},{"location":"leetcode-hot100-25/#_2","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-hot100-25/#70","title":"70. \u722c\u697c\u68af","text":"<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 <code>n</code> \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p> <p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c <code>1</code> \u6216 <code>2</code> \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p> <p>\u8ba1\u6570\u95ee\u9898\uff0c\u9012\u5f52\u5206\u89e3\u3002\u8003\u8651\u4f9d\u8d56\u5173\u7cfb\uff0c\u6bcf\u6b21\u53ea\u4fdd\u5b58\u4e24\u4e2a\u72b6\u6001\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6<code>O(n)</code></p> <pre><code>class Solution:\n    def climbStairs(self, n: int) -&gt; int:\n        if n == 1:\n            return 1\n        a = 1\n        b = 2\n        for _ in range(n - 2):\n            c = b + a\n            a = b\n            b = c\n        return b \n</code></pre> <p>\u8003\u8651\u5230\u9012\u63a8\u5f0f\u9f50\u6b21\u7ebf\u6027\u7684\uff0c\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u77e9\u9635\u4e58\u6cd5\uff0c\u8fdb\u800c\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u628a\u590d\u6742\u5ea6\u964d\u5230 <code>O(log n)</code> (\u975e\u9f50\u6b21\u5f0f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53d8\u6362\u8f6c\u5316\u4e3a\u9f50\u6b21\u9012\u63a8\u95ee\u9898)</p> <p>\u5feb\u901f\u5e42\u601d\u8def\uff1a</p> <p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u901a\u9879\u516c\u5f0f</p>"},{"location":"leetcode-hot100-25/#118","title":"118. \u6768\u8f89\u4e09\u89d2","text":"<pre><code>class Solution:\n    def generate(self, numRows: int) -&gt; List[List[int]]:\n        res = []\n        for i in range(numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[-1][j - 1] + res[-1][j])\n            res.append(row)\n        return res\n</code></pre>"},{"location":"leetcode-hot100-25/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u9012\u63a8\u5173\u7cfb\uff1a\u5077\u524d N \u5bb6\u6240\u5f97\u6700\u5927\u91d1\u989d = max(\u4ed6\u7684\u91d1\u989d + \u524d N-2 \u5bb6\u91d1\u989d\uff0c\u524d N-1\u5bb6\u91d1\u989d)</p> <p>\u901a\u8fc7\u5077\u7b2cN\u5bb6\u4e0e\u5426\u5212\u5206\u5b50\u95ee\u9898</p> <pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        first = 0\n        second = 0\n        for i in nums:\n            first, second = second, first + i\n            second = max(first, second)\n        return second\n</code></pre> <p>\u6280\u5de7\uff1a</p> <ol> <li>\u518d\u5de6\u4fa7\u591a\u52a0\u4e24\u5bb6\u94b1\u4e3a0\u7684\u623f\u5c4b\uff0c\u4e0d\u5f71\u54cd\u7ed3\u679c\u4e14\u7b80\u5316\u8ba1\u7b97</li> <li>python\u4e2d\u53ef\u4ee5\u5e76\u884c\u8d4b\u503c</li> </ol> <p>\u6211\u7684\u65e7\u89e3\u6cd5\u4e3a\uff1a</p> <pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        mh = 0 # with\n        mt = 0 # without\n        for i in nums:\n            nmt = mh\n            nmh = mt + i\n            mt = nmt\n            mh = max(nmt, nmh)\n        return mh\n</code></pre> <p>\u8be5\u89e3\u6cd5\u4e2d\uff0c\u5b50\u95ee\u9898\u95f4\u9012\u63a8\u5173\u7cfb\u4e0d\u5982\u65b0\u89e3\u6cd5\u6e05\u6670</p>"},{"location":"leetcode-hot100-25/#279","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u8fd4\u56de \u548c\u4e3a <code>n</code> \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf \u3002</p> <p>\u672c\u9898\u5b9e\u9645\u4e0a\u662f\u627e\u786c\u5e01\u7684\u53d8\u4f53</p> <p>\u4f46\u201c\u786c\u5e01\u9762\u989d\u201d\u9700\u8981\u6839\u636en\u63a8\u65ad\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n sqrt n)</code></p> <pre><code>class Solution:\n    def numSquares(self, n: int) -&gt; int:\n        dp = [0]*(n+1)\n        for i in range(1, n + 1):\n            if i ** 0.5 % 1 == 0:\n                dp[i] = 1\n            else:\n                dp[i] = 1+min([dp[i-j*j] for j in range(1,int(i**0.5)+1)])\n        return dp[-1]\n</code></pre>"},{"location":"leetcode-hot100-25/#322","title":"322. \u96f6\u94b1\u5151\u6362","text":"<p>\u7ecf\u5178\u627e\u786c\u5e01</p> <pre><code>class Solution:\n    def coinChange(self, coins: List[int], amount: int) -&gt; int:\n        dp = [0] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            inds = [dp[i - coin] for coin in coins if coin &lt;= i and dp[i - coin] != -1]\n            if inds == []:\n                dp[i] = -1\n            else:\n                dp[i] = min(inds) + 1\n        return dp[-1]\n</code></pre>"},{"location":"leetcode-hot100-25/#139","title":"139. \u5355\u8bcd\u62c6\u5206","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 <code>wordDict</code> \u4f5c\u4e3a\u5b57\u5178\u3002\u5982\u679c\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u62fc\u63a5\u51fa <code>s</code> \u5219\u8fd4\u56de <code>true</code>\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u6c42\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u5e76\u4e14\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <ol> <li>\u9996\u5148\u8003\u8651 \u8fd9\u4e5f\u662f\u4e00\u4e2a\u627e\u786c\u5e01\u95ee\u9898</li> </ol> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        @cache\n        def dfs(s: str) -&gt; bool:\n            if all(c == '_' for c in s):\n                return True\n            words = [word for word in wordDict if word in s]\n            if words == []:\n                return False\n            else:\n                return any([dfs(s.replace(word, \"_\", 1)) for word in words])    \n        return dfs(s)\n</code></pre> <p>\u4f46\u662f\u8d85\u65f6\u3002</p> <p>\u8003\u8651\u5230\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u90e8\u5206\u4e00\u5b9a\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u8fdb\u884c\u4f18\u5316\u3002\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n^2)</code></p> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        max_len = max(map(len, wordDict))  # \u7528\u4e8e\u9650\u5236\u4e0b\u9762 j \u7684\u5faa\u73af\u6b21\u6570\n        words = set(wordDict)  # \u4fbf\u4e8e\u5feb\u901f\u5224\u65ad s[j:i] in words\n\n        @cache  # \u7f13\u5b58\u88c5\u9970\u5668\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97 dfs \u7684\u7ed3\u679c\uff08\u8bb0\u5fc6\u5316\uff09\n        def dfs(i: int) -&gt; bool:\n            if i == 0:  # \u6210\u529f\u62c6\u5206\uff01\n                return True\n            return any(s[j:i] in words and dfs(j)\n                       for j in range(i - 1, max(i - max_len - 1, -1), -1))\n\n        return dfs(len(s))\n</code></pre>"},{"location":"leetcode-hot100-25/#300","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u4f9d\u7136\u8003\u8651\u5b89\u88c5\u6570\u7ec4\u957f\u5ea6\u9012\u5f52\uff0c\u9700\u8981\u4fdd\u5b58\u6700\u957f\u957f\u5ea6\u548c\u5f53\u524d\u6700\u5927\u503c\u3002\u600e\u4e48\u6301\u6709\u6700\u5927\u503c\uff0c\u6b64\u65f6\u6211\u6309\u4e4b\u524d\u7684 with/without \u9012\u5f52\u601d\u8def\u6765\u505a\u7684</p> <pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        dp1 = [0] * len(nums) # with\n        dp2 = [0] * len(nums) # all\n        dp1[0] = 1\n        dp2[0] = 1\n        for i in range(1, len(nums)):\n            prev = 0\n            for j in range(0, i):\n                if nums[j] &lt; nums[i]:\n                    prev = max(dp1[j], prev)\n            dp1[i] = prev + 1\n            dp2[i] = max(dp2[i - 1], dp1[i])\n        return dp2[-1]\n</code></pre> <p>\u4e8b\u5b9e\u4e0a\uff0c\u95ee\u9898\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f6c\u6362\uff0c\u5148\u6c42\u5305\u542b\u6700\u540e\u4e00\u4e2a\u6570\u7684\u6700\u5927\u503c\uff0c\u518dmax\u4e00\u4e0b</p> <pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        dp = []\n        for i in range(len(nums)):\n            dp.append(1)\n            for j in range(i):\n                if nums[i] &gt; nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n</code></pre> <p>\u4f46\u662f\u4e5f\u6709\u4e00\u4e2a\u8d2a\u5fc3\u505a\u6cd5\uff1a\u4f7f\u5f97\u6bcf\u6b21\u52a0\u4e0a\u7684\u6570\u5c3d\u53ef\u80fd\u5c0f...<code>O(n log n)</code></p> <p>\u4e0d\u8fc7\u4e00\u5f00\u59cb\u5e76\u6ca1\u6709\u60f3\u5230\u8d2a\u5fc3\u7b56\u7565...</p>"},{"location":"leetcode-hot100-25/#152","title":"152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed \u5b50\u6570\u7ec4</p> <p>\uff08\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u56e0\u4e3a\u542b\u6709\u8d1f\u6570\uff0c\u6240\u4ee5\u4e58\u79ef\u7f3a\u4e4f\u5355\u8c03\u6027\uff0c\u96be\u4ee5\u5212\u5206\u5b50\u95ee\u9898\u3002\u4e00\u5f00\u59cb\u4f3c\u4e4e\u53ea\u6709 <code>O(n^2)</code>\u7684\u66b4\u529b\u505a\u6cd5\u3002</p> <p>\u4f46\u662f\u7ec6\u7ec6\u8003\u8651\uff0c\u4e58\u6cd5\u7ed3\u679c\u7684\u7b26\u53f7\u867d\u7136\u53d8\u5316\uff0c\u4f46\u6570\u503c\u5374\u4e00\u76f4\u589e\u5927\u3002\u5982\u679c\u540c\u65f6\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u5c31\u6709\u529e\u6cd5\u7528\u52a8\u6001\u89c4\u5212\u4e86\u3002</p> <pre><code>class Solution:\n    def maxProduct(self, nums: List[int]) -&gt; int:\n        ans = -inf  # \u6ce8\u610f\u7b54\u6848\u53ef\u80fd\u662f\u8d1f\u6570\n        f_max = f_min = 1\n        for x in nums:\n            f_max, f_min = max(f_max * x, f_min * x, x), \\\n                           min(f_max * x, f_min * x, x)\n            ans = max(ans, f_max)\n        return ans\n</code></pre> <p>\u8fd9\u91cc\u4e5f\u6ce8\u610f\uff1a\u52a8\u6001\u89c4\u5212\u4e0d\u4e00\u5b9a\u8981\u76f4\u63a5\u6c42\u51fa\u6700\u7ec8\u7ed3\u679c\uff0c\u53ef\u4ee5\u53ea\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u7a0b\u5e8f</p>"},{"location":"leetcode-hot100-25/#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570 \u7684 \u975e\u7a7a \u6570\u7ec4 <code>nums</code> \u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u95ee\u9898\u8f6c\u6362\uff1a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5b50\u96c6\uff0c\u548c\u4e3a sum / 2\u3002</p> <p>01\u80cc\u5305\u95ee\u9898\uff0c\u540c\u65f6\u5bf9\u6570\u7ec4\u957f\u5ea6\u548c\u603b\u548c\u9012\u5f52</p> <pre><code>class Solution:\n    def canPartition(self, nums: List[int]) -&gt; bool:\n        # 1. \u8f6c\u5316\u95ee\u9898\n        # 2. 01\u80cc\u5305\n        @cache\n        def dfs(i: int, j: int) -&gt; bool:\n            if i &lt; 0:\n                return j == 0\n            return j &gt;= nums[i] and dfs(i - 1, j - nums[i]) or dfs(i - 1, j)\n\n        s = sum(nums)\n        return s % 2 == 0 and dfs(len(nums) - 1, s // 2)\n</code></pre>"},{"location":"leetcode-hot100-25/#32","title":"32. \u6700\u957f\u6709\u6548\u62ec\u53f7","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b <code>'('</code> \u548c <code>')'</code> \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u62ec\u53f7\u5339\u914d\u5c31\u53ef\u4ee5\u3002\u6bcf\u6b21\u6709\u5339\u914d\u5230\u7684\uff0c\u5219\u66f4\u65b0\u957f\u5ea6\u3002</p> <pre><code>class Solution:\n    def longestValidParentheses(self, s: str) -&gt; int:\n        res = 0\n        stk = []\n        for i in range(0, len(s)):\n            if s[i] == '(':\n                stk.append(i + 1)\n            else:\n                if len(stk) != 0 and stk[-1] &gt; 0:\n                    stk.pop()\n                    if len(stk) == 0:\n                        length = i + 1\n                    else:\n                        length = i - abs(stk[-1]) + 1\n                    res = max(res, length)\n                else:\n                    stk.append(-(i + 1))\n        return res\n</code></pre>"},{"location":"leetcode-hot100-25/#_3","title":"\u591a\u7ef4\u52a8\u6001\u89c4\u5212","text":""},{"location":"leetcode-hot100-25/#62","title":"62. \u4e0d\u540c\u8def\u5f84","text":"<p>\u7ecf\u5178\u9012\u63a8</p> <pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        dp = [[0] * m] * n\n        for i in range(0, n):\n            dp[i][0] = 1\n        for i in range(0, m):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n        return dp[n - 1][m - 1]\n</code></pre>"},{"location":"leetcode-hot100-25/#64","title":"64. \u6700\u5c0f\u8def\u5f84\u548c","text":"<pre><code>class Solution:\n    def minPathSum(self, grid: List[List[int]]) -&gt; int:\n        c = len(grid)\n        r = len(grid[0])\n        # dp = [[0] * r] * c  # shallow copy!!!\n        dp = [[0] * r for _ in range(c)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, c):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for i in range(1, r):\n            dp[0][i] = dp[0][i-1] + grid[0][i]\n        for i in range(1, c):\n            for j in range(1, r):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[c - 1][r - 1]\n</code></pre>"},{"location":"leetcode-hot100-25/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6700\u957f\u7684 \u56de\u6587\u5b50\u4e32\u3002</p> <p>\u601d\u8def\uff1a\u4ecekernel\u5f00\u59cb\u62d3\u5c55</p> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        maxl = 1\n        start = 0\n        # one kernel\n        for i in range(len(s)):\n            for j in range(1, min(i + 1, len(s) - i)):\n                if s[i + j] == s[i - j]:\n                    if 1 + 2 * j &gt; maxl:\n                        start = i - j\n                        maxl = 1 + 2 * j\n                else:\n                    break\n\n\n        # two kernel\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                if 2 &gt; maxl:\n                    start = i\n                    maxl = 2\n                for j in range(1, min(i+1, len(s)-i-1)):\n                    if s[i + j + 1] == s[i - j]:\n                        if 2 + 2 * j &gt; maxl:\n                            start = i - j\n                            maxl = 2 + 2 * j\n                    else:\n                        break\n        return s[start:start + maxl]\n</code></pre> <p>\u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u52a8\u6001\u89c4\u5212\uff1a</p> <p></p>"},{"location":"leetcode-hot100-25/#1143","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u540c\u65f6\u5bf9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u505a\u9012\u5f52...</p> <pre><code>class Solution:\n    # \u4e0b\u6807\u8fd0\u7b97\u597d\u590d\u6742\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        if set(text1).isdisjoint(set(text2)):\n            return 0\n        dp = [[0 for _ in range(len(text1))] for _ in range(len(text2))] \n        for i in range(len(text2)):\n            dp[i][0] = 1 if text2[i] == text1[0] else 0\n        for i in range(len(text1)):\n            dp[0][i] = 1 if text2[0] == text1[i] else 0\n        for i in range(len(text2)):\n            for j in range(len(text1)):\n                c = text2[i] \n                l = 0\n                for k in reversed(range(0, j + 1)):\n                    if k == 0 or i == 0:\n                        prev = 0\n                    else:\n                        prev = dp[i-1][k-1]\n                    if text1[k] == c:\n                        l = prev + 1\n                        break\n                dp[i][j] = max(l, dp[i-1][j])\n        return dp[-1][-1]\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3\uff1a</p> <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n</code></pre>"},{"location":"leetcode-hot100-25/#72","title":"72. \u7f16\u8f91\u8ddd\u79bb","text":"<p>\u7ecf\u5178\u95ee\u9898</p> <pre><code>class Solution:\n    def minDistance(self, word1: str, word2: str) -&gt; int:\n        if len(word1) == 0 or len(word2) == 0:\n            return max(len(word1), len(word2))\n        # \u591a\u52a0\u4e00\u4e2a\u7ef4\u5ea6\n        dp = [[0 for _ in range(len(word1) + 1)] for _ in range(len(word2) + 1)]\n        for i in range(len(word2) + 1):\n            dp[i][0] = i\n        for i in range(len(word1) + 1):\n            dp[0][i] = i     \n        for i in range(1, len(word2) + 1):\n            for j in range(1, len(word1) + 1):\n                if word1[j - 1] != word2[i - 1]:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1])\n        return dp[-1][-1]\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution:\n    def minDistance(self, word1: str, word2: str) -&gt; int:\n        n = len(word1)\n        m = len(word2)\n\n        # \u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u7a7a\u4e32\n        if n * m == 0:\n            return n + m\n\n        # DP \u6570\u7ec4\n        D = [ [0] * (m + 1) for _ in range(n + 1)]\n\n        # \u8fb9\u754c\u72b6\u6001\u521d\u59cb\u5316\n        for i in range(n + 1):\n            D[i][0] = i\n        for j in range(m + 1):\n            D[0][j] = j\n\n        # \u8ba1\u7b97\u6240\u6709 DP \u503c\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                left = D[i - 1][j] + 1\n                down = D[i][j - 1] + 1\n                left_down = D[i - 1][j - 1] \n                if word1[i - 1] != word2[j - 1]:\n                    left_down += 1\n                D[i][j] = min(left, down, left_down)\n\n        return D[n][m]\n</code></pre>"}]}